/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SdWebUiApi.Client;
using SdWebUiApi.Model;

namespace SdWebUiApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Api Info
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiInfoInfoGet(bool? serialize = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Api Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiInfoInfoGetWithHttpInfo(bool? serialize = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Api Info
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiInfoInfoGet_0(bool? serialize = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Api Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiInfoInfoGet_0WithHttpInfo(bool? serialize = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Api Refresh Embeddings
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPost(int operationIndex = 0);

        /// <summary>
        /// Api Refresh Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Api Refresh Temp Files
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiRefreshTempFilesTacapiV1RefreshTempFilesPost(int operationIndex = 0);

        /// <summary>
        /// Api Refresh Temp Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiRefreshTempFilesTacapiV1RefreshTempFilesPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// App Id
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AppIdAppIdGet(int operationIndex = 0);

        /// <summary>
        /// App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppIdAppIdGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// App Id
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AppIdAppIdGet_0(int operationIndex = 0);

        /// <summary>
        /// App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AppIdAppIdGet_0WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Build Resource
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BuildResourceAssetsPathGet(string path, int operationIndex = 0);

        /// <summary>
        /// Build Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BuildResourceAssetsPathGetWithHttpInfo(string path, int operationIndex = 0);
        /// <summary>
        /// Control Types
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ControlTypesControlnetControlTypesGet(int operationIndex = 0);

        /// <summary>
        /// Control Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ControlTypesControlnetControlTypesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Create Embedding
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateResponse</returns>
        CreateResponse CreateEmbeddingSdapiV1CreateEmbeddingPost(Object body, int operationIndex = 0);

        /// <summary>
        /// Create Embedding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        ApiResponse<CreateResponse> CreateEmbeddingSdapiV1CreateEmbeddingPostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// Create Hypernetwork
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateResponse</returns>
        CreateResponse CreateHypernetworkSdapiV1CreateHypernetworkPost(Object body, int operationIndex = 0);

        /// <summary>
        /// Create Hypernetwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        ApiResponse<CreateResponse> CreateHypernetworkSdapiV1CreateHypernetworkPostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// Detect
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyDetectControlnetDetectPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DetectControlnetDetectPost(BodyDetectControlnetDetectPost? bodyDetectControlnetDetectPost = default(BodyDetectControlnetDetectPost?), int operationIndex = 0);

        /// <summary>
        /// Detect
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyDetectControlnetDetectPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DetectControlnetDetectPostWithHttpInfo(BodyDetectControlnetDetectPost? bodyDetectControlnetDetectPost = default(BodyDetectControlnetDetectPost?), int operationIndex = 0);
        /// <summary>
        /// Download Sysinfo
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DownloadSysinfoInternalSysinfoGet(Object? attachment = default(Object?), int operationIndex = 0);

        /// <summary>
        /// Download Sysinfo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DownloadSysinfoInternalSysinfoGetWithHttpInfo(Object? attachment = default(Object?), int operationIndex = 0);
        /// <summary>
        /// Extras Batch Images Api
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasBatchImagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtrasBatchImagesResponse</returns>
        ExtrasBatchImagesResponse ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost(ExtrasBatchImagesRequest extrasBatchImagesRequest, int operationIndex = 0);

        /// <summary>
        /// Extras Batch Images Api
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasBatchImagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtrasBatchImagesResponse</returns>
        ApiResponse<ExtrasBatchImagesResponse> ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithHttpInfo(ExtrasBatchImagesRequest extrasBatchImagesRequest, int operationIndex = 0);
        /// <summary>
        /// Extras Single Image Api
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasSingleImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtrasSingleImageResponse</returns>
        ExtrasSingleImageResponse ExtrasSingleImageApiSdapiV1ExtraSingleImagePost(ExtrasSingleImageRequest extrasSingleImageRequest, int operationIndex = 0);

        /// <summary>
        /// Extras Single Image Api
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasSingleImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtrasSingleImageResponse</returns>
        ApiResponse<ExtrasSingleImageResponse> ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithHttpInfo(ExtrasSingleImageRequest extrasSingleImageRequest, int operationIndex = 0);
        /// <summary>
        /// Favicon
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object FaviconFaviconIcoGet(int operationIndex = 0);

        /// <summary>
        /// Favicon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FaviconFaviconIcoGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Fetch File
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object FetchFileSdExtraNetworksThumbGet(string? filename = default(string?), int operationIndex = 0);

        /// <summary>
        /// Fetch File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FetchFileSdExtraNetworksThumbGetWithHttpInfo(string? filename = default(string?), int operationIndex = 0);
        /// <summary>
        /// File Deprecated
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object FileDeprecatedFilePathGet(string path, int operationIndex = 0);

        /// <summary>
        /// File Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FileDeprecatedFilePathGetWithHttpInfo(string path, int operationIndex = 0);
        /// <summary>
        /// File
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object FileFilePathOrUrlGet(string pathOrUrl, int operationIndex = 0);

        /// <summary>
        /// File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FileFilePathOrUrlGetWithHttpInfo(string pathOrUrl, int operationIndex = 0);
        /// <summary>
        /// File
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object FileFilePathOrUrlHead(string pathOrUrl, int operationIndex = 0);

        /// <summary>
        /// File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FileFilePathOrUrlHeadWithHttpInfo(string pathOrUrl, int operationIndex = 0);
        /// <summary>
        /// Get Cmd Flags
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Flags</returns>
        Flags GetCmdFlagsSdapiV1CmdFlagsGet(int operationIndex = 0);

        /// <summary>
        /// Get Cmd Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Flags</returns>
        ApiResponse<Flags> GetCmdFlagsSdapiV1CmdFlagsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Config
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetConfigConfigGet(int operationIndex = 0);

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetConfigConfigGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Config
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetConfigConfigGet_0(int operationIndex = 0);

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetConfigConfigGet_0WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Config
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Options</returns>
        Options GetConfigSdapiV1OptionsGet(int operationIndex = 0);

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Options</returns>
        ApiResponse<Options> GetConfigSdapiV1OptionsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Current User
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetCurrentUserUserGet(int operationIndex = 0);

        /// <summary>
        /// Get Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetCurrentUserUserGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Current User
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetCurrentUserUserGet_0(int operationIndex = 0);

        /// <summary>
        /// Get Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetCurrentUserUserGet_0WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmbeddingsResponse</returns>
        EmbeddingsResponse GetEmbeddingsSdapiV1EmbeddingsGet(int operationIndex = 0);

        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmbeddingsResponse</returns>
        ApiResponse<EmbeddingsResponse> GetEmbeddingsSdapiV1EmbeddingsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Face Restorers
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FaceRestorerItem&gt;</returns>
        List<FaceRestorerItem> GetFaceRestorersSdapiV1FaceRestorersGet(int operationIndex = 0);

        /// <summary>
        /// Get Face Restorers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FaceRestorerItem&gt;</returns>
        ApiResponse<List<FaceRestorerItem>> GetFaceRestorersSdapiV1FaceRestorersGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Hypernetworks
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;HypernetworkItem&gt;</returns>
        List<HypernetworkItem> GetHypernetworksSdapiV1HypernetworksGet(int operationIndex = 0);

        /// <summary>
        /// Get Hypernetworks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;HypernetworkItem&gt;</returns>
        ApiResponse<List<HypernetworkItem>> GetHypernetworksSdapiV1HypernetworksGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Latent Upscale Modes
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LatentUpscalerModeItem&gt;</returns>
        List<LatentUpscalerModeItem> GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet(int operationIndex = 0);

        /// <summary>
        /// Get Latent Upscale Modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LatentUpscalerModeItem&gt;</returns>
        ApiResponse<List<LatentUpscalerModeItem>> GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Lora Cached Hash
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGet(string loraName, int operationIndex = 0);

        /// <summary>
        /// Get Lora Cached Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGetWithHttpInfo(string loraName, int operationIndex = 0);
        /// <summary>
        /// Get Lora Info
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetLoraInfoTacapiV1LoraInfoLoraNameGet(Object loraName, int operationIndex = 0);

        /// <summary>
        /// Get Lora Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetLoraInfoTacapiV1LoraInfoLoraNameGetWithHttpInfo(Object loraName, int operationIndex = 0);
        /// <summary>
        /// Get Loras
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetLorasSdapiV1LorasGet(int operationIndex = 0);

        /// <summary>
        /// Get Loras
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetLorasSdapiV1LorasGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Lyco Info
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lycoName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetLycoInfoTacapiV1LycoInfoLycoNameGet(Object lycoName, int operationIndex = 0);

        /// <summary>
        /// Get Lyco Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lycoName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetLycoInfoTacapiV1LycoInfoLycoNameGetWithHttpInfo(Object lycoName, int operationIndex = 0);
        /// <summary>
        /// Get Memory
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryResponse</returns>
        MemoryResponse GetMemorySdapiV1MemoryGet(int operationIndex = 0);

        /// <summary>
        /// Get Memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryResponse</returns>
        ApiResponse<MemoryResponse> GetMemorySdapiV1MemoryGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Metadata
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="item"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetMetadataSdExtraNetworksMetadataGet(string? page = default(string?), string? item = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="item"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetMetadataSdExtraNetworksMetadataGetWithHttpInfo(string? page = default(string?), string? item = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Prompt Styles
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PromptStyleItem&gt;</returns>
        List<PromptStyleItem> GetPromptStylesSdapiV1PromptStylesGet(int operationIndex = 0);

        /// <summary>
        /// Get Prompt Styles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PromptStyleItem&gt;</returns>
        ApiResponse<List<PromptStyleItem>> GetPromptStylesSdapiV1PromptStylesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Queue Status
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Estimation</returns>
        Estimation GetQueueStatusQueueStatusGet(int operationIndex = 0);

        /// <summary>
        /// Get Queue Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Estimation</returns>
        ApiResponse<Estimation> GetQueueStatusQueueStatusGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Realesrgan Models
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RealesrganItem&gt;</returns>
        List<RealesrganItem> GetRealesrganModelsSdapiV1RealesrganModelsGet(int operationIndex = 0);

        /// <summary>
        /// Get Realesrgan Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RealesrganItem&gt;</returns>
        ApiResponse<List<RealesrganItem>> GetRealesrganModelsSdapiV1RealesrganModelsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Samplers
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SamplerItem&gt;</returns>
        List<SamplerItem> GetSamplersSdapiV1SamplersGet(int operationIndex = 0);

        /// <summary>
        /// Get Samplers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SamplerItem&gt;</returns>
        ApiResponse<List<SamplerItem>> GetSamplersSdapiV1SamplersGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Script Info
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScriptInfo&gt;</returns>
        List<ScriptInfo> GetScriptInfoSdapiV1ScriptInfoGet(int operationIndex = 0);

        /// <summary>
        /// Get Script Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScriptInfo&gt;</returns>
        ApiResponse<List<ScriptInfo>> GetScriptInfoSdapiV1ScriptInfoGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Scripts List
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScriptsList</returns>
        ScriptsList GetScriptsListSdapiV1ScriptsGet(int operationIndex = 0);

        /// <summary>
        /// Get Scripts List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScriptsList</returns>
        ApiResponse<ScriptsList> GetScriptsListSdapiV1ScriptsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Sd Models
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SDModelItem&gt;</returns>
        List<SDModelItem> GetSdModelsSdapiV1SdModelsGet(int operationIndex = 0);

        /// <summary>
        /// Get Sd Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SDModelItem&gt;</returns>
        ApiResponse<List<SDModelItem>> GetSdModelsSdapiV1SdModelsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Sd Vaes
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SDVaeItem&gt;</returns>
        List<SDVaeItem> GetSdVaesSdapiV1SdVaeGet(int operationIndex = 0);

        /// <summary>
        /// Get Sd Vaes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SDVaeItem&gt;</returns>
        ApiResponse<List<SDVaeItem>> GetSdVaesSdapiV1SdVaeGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Single Card
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="tabname"> (optional, default to &quot;&quot;)</param>
        /// <param name="name"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetSingleCardSdExtraNetworksGetSingleCardGet(string? page = default(string?), string? tabname = default(string?), string? name = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Single Card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="tabname"> (optional, default to &quot;&quot;)</param>
        /// <param name="name"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSingleCardSdExtraNetworksGetSingleCardGetWithHttpInfo(string? page = default(string?), string? tabname = default(string?), string? name = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Thumb Preview Blob
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet(Object filename, Object type, int operationIndex = 0);

        /// <summary>
        /// Get Thumb Preview Blob
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGetWithHttpInfo(Object filename, Object type, int operationIndex = 0);
        /// <summary>
        /// Get Thumb Preview
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetThumbPreviewTacapiV1ThumbPreviewFilenameGet(Object filename, Object type, int operationIndex = 0);

        /// <summary>
        /// Get Thumb Preview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetThumbPreviewTacapiV1ThumbPreviewFilenameGetWithHttpInfo(Object filename, Object type, int operationIndex = 0);
        /// <summary>
        /// Get Token
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetTokenTokenGet(int operationIndex = 0);

        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetTokenTokenGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Token
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetTokenTokenGet_0(int operationIndex = 0);

        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetTokenTokenGet_0WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Upscalers
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UpscalerItem&gt;</returns>
        List<UpscalerItem> GetUpscalersSdapiV1UpscalersGet(int operationIndex = 0);

        /// <summary>
        /// Get Upscalers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UpscalerItem&gt;</returns>
        ApiResponse<List<UpscalerItem>> GetUpscalersSdapiV1UpscalersGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Wildcard Contents
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basepath"></param>
        /// <param name="filename"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetWildcardContentsTacapiV1WildcardContentsGet(string basepath, string filename, int operationIndex = 0);

        /// <summary>
        /// Get Wildcard Contents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basepath"></param>
        /// <param name="filename"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetWildcardContentsTacapiV1WildcardContentsGetWithHttpInfo(string basepath, string filename, int operationIndex = 0);
        /// <summary>
        /// Img2Imgapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingImg2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImageToImageResponse</returns>
        ImageToImageResponse Img2imgapiSdapiV1Img2imgPost(StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img, int operationIndex = 0);

        /// <summary>
        /// Img2Imgapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingImg2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImageToImageResponse</returns>
        ApiResponse<ImageToImageResponse> Img2imgapiSdapiV1Img2imgPostWithHttpInfo(StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img, int operationIndex = 0);
        /// <summary>
        /// Interrogateapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interrogateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object InterrogateapiSdapiV1InterrogatePost(InterrogateRequest interrogateRequest, int operationIndex = 0);

        /// <summary>
        /// Interrogateapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interrogateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> InterrogateapiSdapiV1InterrogatePostWithHttpInfo(InterrogateRequest interrogateRequest, int operationIndex = 0);
        /// <summary>
        /// Interruptapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object InterruptapiSdapiV1InterruptPost(int operationIndex = 0);

        /// <summary>
        /// Interruptapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> InterruptapiSdapiV1InterruptPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LambdaInternalPingGet(int operationIndex = 0);

        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LambdaInternalPingGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LambdaInternalProfileStartupGet(int operationIndex = 0);

        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LambdaInternalProfileStartupGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LambdaInternalSysinfoDownloadGet(int operationIndex = 0);

        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LambdaInternalSysinfoDownloadGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Login Check
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LoginCheckLoginCheckGet(int operationIndex = 0);

        /// <summary>
        /// Login Check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LoginCheckLoginCheckGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Login Check
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LoginCheckLoginCheckGet_0(int operationIndex = 0);

        /// <summary>
        /// Login Check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LoginCheckLoginCheckGet_0WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Login
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LoginLoginPost(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0);

        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LoginLoginPostWithHttpInfo(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0);
        /// <summary>
        /// Login
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LoginLoginPost_0(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0);

        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LoginLoginPost_0WithHttpInfo(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0);
        /// <summary>
        /// Main
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string MainGet(int operationIndex = 0);

        /// <summary>
        /// Main
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> MainGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Main
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string MainHead(int operationIndex = 0);

        /// <summary>
        /// Main
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> MainHeadWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Model List
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModelListControlnetModelListGet(bool? update = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Model List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModelListControlnetModelListGetWithHttpInfo(bool? update = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Module List
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasNames"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModuleListControlnetModuleListGet(bool? aliasNames = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Module List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasNames"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModuleListControlnetModuleListGetWithHttpInfo(bool? aliasNames = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Pnginfoapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pNGInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PNGInfoResponse</returns>
        PNGInfoResponse PnginfoapiSdapiV1PngInfoPost(PNGInfoRequest pNGInfoRequest, int operationIndex = 0);

        /// <summary>
        /// Pnginfoapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pNGInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PNGInfoResponse</returns>
        ApiResponse<PNGInfoResponse> PnginfoapiSdapiV1PngInfoPostWithHttpInfo(PNGInfoRequest pNGInfoRequest, int operationIndex = 0);
        /// <summary>
        /// Predict
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PredictApiApiNamePost(string apiName, PredictBody predictBody, int operationIndex = 0);

        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PredictApiApiNamePostWithHttpInfo(string apiName, PredictBody predictBody, int operationIndex = 0);
        /// <summary>
        /// Predict
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PredictApiApiNamePost_0(string apiName, PredictBody predictBody, int operationIndex = 0);

        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PredictApiApiNamePost_0WithHttpInfo(string apiName, PredictBody predictBody, int operationIndex = 0);
        /// <summary>
        /// Predict
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PredictRunApiNamePost(string apiName, PredictBody predictBody, int operationIndex = 0);

        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PredictRunApiNamePostWithHttpInfo(string apiName, PredictBody predictBody, int operationIndex = 0);
        /// <summary>
        /// Predict
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PredictRunApiNamePost_0(string apiName, PredictBody predictBody, int operationIndex = 0);

        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PredictRunApiNamePost_0WithHttpInfo(string apiName, PredictBody predictBody, int operationIndex = 0);
        /// <summary>
        /// Preprocess
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreprocessResponse</returns>
        PreprocessResponse PreprocessSdapiV1PreprocessPost(Object body, int operationIndex = 0);

        /// <summary>
        /// Preprocess
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreprocessResponse</returns>
        ApiResponse<PreprocessResponse> PreprocessSdapiV1PreprocessPostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// Progressapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="progressRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModulesProgressProgressResponse</returns>
        ModulesProgressProgressResponse ProgressapiInternalProgressPost(ProgressRequest progressRequest, int operationIndex = 0);

        /// <summary>
        /// Progressapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="progressRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModulesProgressProgressResponse</returns>
        ApiResponse<ModulesProgressProgressResponse> ProgressapiInternalProgressPostWithHttpInfo(ProgressRequest progressRequest, int operationIndex = 0);
        /// <summary>
        /// Progressapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skipCurrentImage"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModulesApiModelsProgressResponse</returns>
        ModulesApiModelsProgressResponse ProgressapiSdapiV1ProgressGet(bool? skipCurrentImage = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Progressapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skipCurrentImage"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModulesApiModelsProgressResponse</returns>
        ApiResponse<ModulesApiModelsProgressResponse> ProgressapiSdapiV1ProgressGetWithHttpInfo(bool? skipCurrentImage = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Quicksettings Hint
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;QuicksettingsHint&gt;</returns>
        List<QuicksettingsHint> QuicksettingsHintInternalQuicksettingsHintGet(int operationIndex = 0);

        /// <summary>
        /// Quicksettings Hint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;QuicksettingsHint&gt;</returns>
        ApiResponse<List<QuicksettingsHint>> QuicksettingsHintInternalQuicksettingsHintGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Refresh Checkpoints
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RefreshCheckpointsSdapiV1RefreshCheckpointsPost(int operationIndex = 0);

        /// <summary>
        /// Refresh Checkpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Refresh Loras
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RefreshLorasSdapiV1RefreshLorasPost(int operationIndex = 0);

        /// <summary>
        /// Refresh Loras
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RefreshLorasSdapiV1RefreshLorasPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Refresh Vae
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RefreshVaeSdapiV1RefreshVaePost(int operationIndex = 0);

        /// <summary>
        /// Refresh Vae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RefreshVaeSdapiV1RefreshVaePostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Reloadapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ReloadapiSdapiV1ReloadCheckpointPost(int operationIndex = 0);

        /// <summary>
        /// Reloadapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReloadapiSdapiV1ReloadCheckpointPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Rembg Remove
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRembgRemoveRembgPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RembgRemoveRembgPost(BodyRembgRemoveRembgPost? bodyRembgRemoveRembgPost = default(BodyRembgRemoveRembgPost?), int operationIndex = 0);

        /// <summary>
        /// Rembg Remove
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRembgRemoveRembgPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RembgRemoveRembgPostWithHttpInfo(BodyRembgRemoveRembgPost? bodyRembgRemoveRembgPost = default(BodyRembgRemoveRembgPost?), int operationIndex = 0);
        /// <summary>
        /// Render Openpose Json
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poseData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RenderOpenposeJsonControlnetRenderOpenposeJsonPost(List<PoseData>? poseData = default(List<PoseData>?), int operationIndex = 0);

        /// <summary>
        /// Render Openpose Json
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poseData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RenderOpenposeJsonControlnetRenderOpenposeJsonPostWithHttpInfo(List<PoseData>? poseData = default(List<PoseData>?), int operationIndex = 0);
        /// <summary>
        /// Reset Iterator
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ResetIteratorResetPost(ResetBody resetBody, int operationIndex = 0);

        /// <summary>
        /// Reset Iterator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ResetIteratorResetPostWithHttpInfo(ResetBody resetBody, int operationIndex = 0);
        /// <summary>
        /// Reset Iterator
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ResetIteratorResetPost_0(ResetBody resetBody, int operationIndex = 0);

        /// <summary>
        /// Reset Iterator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ResetIteratorResetPost_0WithHttpInfo(ResetBody resetBody, int operationIndex = 0);
        /// <summary>
        /// Reverse Proxy
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ReverseProxyProxyUrlPathGet(string urlPath, int operationIndex = 0);

        /// <summary>
        /// Reverse Proxy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReverseProxyProxyUrlPathGetWithHttpInfo(string urlPath, int operationIndex = 0);
        /// <summary>
        /// Reverse Proxy
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ReverseProxyProxyUrlPathHead(string urlPath, int operationIndex = 0);

        /// <summary>
        /// Reverse Proxy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReverseProxyProxyUrlPathHeadWithHttpInfo(string urlPath, int operationIndex = 0);
        /// <summary>
        /// Robots Txt
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string RobotsTxtRobotsTxtGet(int operationIndex = 0);

        /// <summary>
        /// Robots Txt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RobotsTxtRobotsTxtGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Set Config
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SetConfigSdapiV1OptionsPost(Object body, int operationIndex = 0);

        /// <summary>
        /// Set Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetConfigSdapiV1OptionsPostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// Settings
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SettingsControlnetSettingsGet(int operationIndex = 0);

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SettingsControlnetSettingsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Skip
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SkipSdapiV1SkipPost(int operationIndex = 0);

        /// <summary>
        /// Skip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SkipSdapiV1SkipPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Startup Events
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object StartupEventsStartupEventsGet(int operationIndex = 0);

        /// <summary>
        /// Startup Events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> StartupEventsStartupEventsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Static Resource
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object StaticResourceStaticPathGet(string path, int operationIndex = 0);

        /// <summary>
        /// Static Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> StaticResourceStaticPathGetWithHttpInfo(string path, int operationIndex = 0);
        /// <summary>
        /// Stream
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionHash"></param>
        /// <param name="run"></param>
        /// <param name="componentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object StreamStreamSessionHashRunComponentIdGet(string sessionHash, int run, int componentId, int operationIndex = 0);

        /// <summary>
        /// Stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionHash"></param>
        /// <param name="run"></param>
        /// <param name="componentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> StreamStreamSessionHashRunComponentIdGetWithHttpInfo(string sessionHash, int run, int componentId, int operationIndex = 0);
        /// <summary>
        /// Text2Imgapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingTxt2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextToImageResponse</returns>
        TextToImageResponse Text2imgapiSdapiV1Txt2imgPost(StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img, int operationIndex = 0);

        /// <summary>
        /// Text2Imgapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingTxt2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextToImageResponse</returns>
        ApiResponse<TextToImageResponse> Text2imgapiSdapiV1Txt2imgPostWithHttpInfo(StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img, int operationIndex = 0);
        /// <summary>
        /// Theme Css
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ThemeCssThemeCssGet(int operationIndex = 0);

        /// <summary>
        /// Theme Css
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ThemeCssThemeCssGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Train Embedding
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrainResponse</returns>
        TrainResponse TrainEmbeddingSdapiV1TrainEmbeddingPost(Object body, int operationIndex = 0);

        /// <summary>
        /// Train Embedding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrainResponse</returns>
        ApiResponse<TrainResponse> TrainEmbeddingSdapiV1TrainEmbeddingPostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// Train Hypernetwork
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrainResponse</returns>
        TrainResponse TrainHypernetworkSdapiV1TrainHypernetworkPost(Object body, int operationIndex = 0);

        /// <summary>
        /// Train Hypernetwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrainResponse</returns>
        ApiResponse<TrainResponse> TrainHypernetworkSdapiV1TrainHypernetworkPostWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// Unloadapi
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UnloadapiSdapiV1UnloadCheckpointPost(int operationIndex = 0);

        /// <summary>
        /// Unloadapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UnloadapiSdapiV1UnloadCheckpointPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Upload File
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UploadFileUploadPost(List<System.IO.Stream> files, int operationIndex = 0);

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UploadFileUploadPostWithHttpInfo(List<System.IO.Stream> files, int operationIndex = 0);
        /// <summary>
        /// Version
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object VersionControlnetVersionGet(int operationIndex = 0);

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VersionControlnetVersionGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Api Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiInfoInfoGetAsync(bool? serialize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Api Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiInfoInfoGetWithHttpInfoAsync(bool? serialize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Api Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiInfoInfoGet_0Async(bool? serialize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Api Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiInfoInfoGet_0WithHttpInfoAsync(bool? serialize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Api Refresh Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Api Refresh Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Api Refresh Temp Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiRefreshTempFilesTacapiV1RefreshTempFilesPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Api Refresh Temp Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiRefreshTempFilesTacapiV1RefreshTempFilesPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppIdAppIdGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppIdAppIdGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AppIdAppIdGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// App Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppIdAppIdGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BuildResourceAssetsPathGetAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuildResourceAssetsPathGetWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Control Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ControlTypesControlnetControlTypesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Control Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ControlTypesControlnetControlTypesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Embedding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateResponse</returns>
        System.Threading.Tasks.Task<CreateResponse> CreateEmbeddingSdapiV1CreateEmbeddingPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Embedding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResponse>> CreateEmbeddingSdapiV1CreateEmbeddingPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Hypernetwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateResponse</returns>
        System.Threading.Tasks.Task<CreateResponse> CreateHypernetworkSdapiV1CreateHypernetworkPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Hypernetwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResponse>> CreateHypernetworkSdapiV1CreateHypernetworkPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detect
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyDetectControlnetDetectPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DetectControlnetDetectPostAsync(BodyDetectControlnetDetectPost? bodyDetectControlnetDetectPost = default(BodyDetectControlnetDetectPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detect
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyDetectControlnetDetectPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DetectControlnetDetectPostWithHttpInfoAsync(BodyDetectControlnetDetectPost? bodyDetectControlnetDetectPost = default(BodyDetectControlnetDetectPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download Sysinfo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DownloadSysinfoInternalSysinfoGetAsync(Object? attachment = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Sysinfo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadSysinfoInternalSysinfoGetWithHttpInfoAsync(Object? attachment = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extras Batch Images Api
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasBatchImagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtrasBatchImagesResponse</returns>
        System.Threading.Tasks.Task<ExtrasBatchImagesResponse> ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostAsync(ExtrasBatchImagesRequest extrasBatchImagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extras Batch Images Api
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasBatchImagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtrasBatchImagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtrasBatchImagesResponse>> ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithHttpInfoAsync(ExtrasBatchImagesRequest extrasBatchImagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extras Single Image Api
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasSingleImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtrasSingleImageResponse</returns>
        System.Threading.Tasks.Task<ExtrasSingleImageResponse> ExtrasSingleImageApiSdapiV1ExtraSingleImagePostAsync(ExtrasSingleImageRequest extrasSingleImageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extras Single Image Api
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasSingleImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtrasSingleImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtrasSingleImageResponse>> ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithHttpInfoAsync(ExtrasSingleImageRequest extrasSingleImageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Favicon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FaviconFaviconIcoGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Favicon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FaviconFaviconIcoGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FetchFileSdExtraNetworksThumbGetAsync(string? filename = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FetchFileSdExtraNetworksThumbGetWithHttpInfoAsync(string? filename = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// File Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FileDeprecatedFilePathGetAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// File Deprecated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FileDeprecatedFilePathGetWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FileFilePathOrUrlGetAsync(string pathOrUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FileFilePathOrUrlGetWithHttpInfoAsync(string pathOrUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FileFilePathOrUrlHeadAsync(string pathOrUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FileFilePathOrUrlHeadWithHttpInfoAsync(string pathOrUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Cmd Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Flags</returns>
        System.Threading.Tasks.Task<Flags> GetCmdFlagsSdapiV1CmdFlagsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Cmd Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Flags)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flags>> GetCmdFlagsSdapiV1CmdFlagsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetConfigConfigGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetConfigConfigGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetConfigConfigGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetConfigConfigGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Options</returns>
        System.Threading.Tasks.Task<Options> GetConfigSdapiV1OptionsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Options)</returns>
        System.Threading.Tasks.Task<ApiResponse<Options>> GetConfigSdapiV1OptionsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetCurrentUserUserGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetCurrentUserUserGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetCurrentUserUserGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetCurrentUserUserGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmbeddingsResponse</returns>
        System.Threading.Tasks.Task<EmbeddingsResponse> GetEmbeddingsSdapiV1EmbeddingsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmbeddingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmbeddingsResponse>> GetEmbeddingsSdapiV1EmbeddingsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Face Restorers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FaceRestorerItem&gt;</returns>
        System.Threading.Tasks.Task<List<FaceRestorerItem>> GetFaceRestorersSdapiV1FaceRestorersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Face Restorers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FaceRestorerItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FaceRestorerItem>>> GetFaceRestorersSdapiV1FaceRestorersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Hypernetworks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HypernetworkItem&gt;</returns>
        System.Threading.Tasks.Task<List<HypernetworkItem>> GetHypernetworksSdapiV1HypernetworksGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Hypernetworks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HypernetworkItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HypernetworkItem>>> GetHypernetworksSdapiV1HypernetworksGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Latent Upscale Modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LatentUpscalerModeItem&gt;</returns>
        System.Threading.Tasks.Task<List<LatentUpscalerModeItem>> GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Latent Upscale Modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LatentUpscalerModeItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LatentUpscalerModeItem>>> GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Lora Cached Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGetAsync(string loraName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Lora Cached Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGetWithHttpInfoAsync(string loraName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Lora Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetLoraInfoTacapiV1LoraInfoLoraNameGetAsync(Object loraName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Lora Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLoraInfoTacapiV1LoraInfoLoraNameGetWithHttpInfoAsync(Object loraName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Loras
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetLorasSdapiV1LorasGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Loras
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLorasSdapiV1LorasGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Lyco Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lycoName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetLycoInfoTacapiV1LycoInfoLycoNameGetAsync(Object lycoName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Lyco Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lycoName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLycoInfoTacapiV1LycoInfoLycoNameGetWithHttpInfoAsync(Object lycoName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryResponse</returns>
        System.Threading.Tasks.Task<MemoryResponse> GetMemorySdapiV1MemoryGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemoryResponse>> GetMemorySdapiV1MemoryGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="item"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetMetadataSdExtraNetworksMetadataGetAsync(string? page = default(string?), string? item = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="item"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMetadataSdExtraNetworksMetadataGetWithHttpInfoAsync(string? page = default(string?), string? item = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Prompt Styles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PromptStyleItem&gt;</returns>
        System.Threading.Tasks.Task<List<PromptStyleItem>> GetPromptStylesSdapiV1PromptStylesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Prompt Styles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PromptStyleItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PromptStyleItem>>> GetPromptStylesSdapiV1PromptStylesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Queue Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Estimation</returns>
        System.Threading.Tasks.Task<Estimation> GetQueueStatusQueueStatusGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Queue Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Estimation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Estimation>> GetQueueStatusQueueStatusGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Realesrgan Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RealesrganItem&gt;</returns>
        System.Threading.Tasks.Task<List<RealesrganItem>> GetRealesrganModelsSdapiV1RealesrganModelsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Realesrgan Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RealesrganItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RealesrganItem>>> GetRealesrganModelsSdapiV1RealesrganModelsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Samplers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SamplerItem&gt;</returns>
        System.Threading.Tasks.Task<List<SamplerItem>> GetSamplersSdapiV1SamplersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Samplers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SamplerItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SamplerItem>>> GetSamplersSdapiV1SamplersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Script Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScriptInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ScriptInfo>> GetScriptInfoSdapiV1ScriptInfoGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Script Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScriptInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScriptInfo>>> GetScriptInfoSdapiV1ScriptInfoGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scripts List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScriptsList</returns>
        System.Threading.Tasks.Task<ScriptsList> GetScriptsListSdapiV1ScriptsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scripts List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScriptsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScriptsList>> GetScriptsListSdapiV1ScriptsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Sd Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SDModelItem&gt;</returns>
        System.Threading.Tasks.Task<List<SDModelItem>> GetSdModelsSdapiV1SdModelsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Sd Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SDModelItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SDModelItem>>> GetSdModelsSdapiV1SdModelsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Sd Vaes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SDVaeItem&gt;</returns>
        System.Threading.Tasks.Task<List<SDVaeItem>> GetSdVaesSdapiV1SdVaeGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Sd Vaes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SDVaeItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SDVaeItem>>> GetSdVaesSdapiV1SdVaeGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Single Card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="tabname"> (optional, default to &quot;&quot;)</param>
        /// <param name="name"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSingleCardSdExtraNetworksGetSingleCardGetAsync(string? page = default(string?), string? tabname = default(string?), string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Single Card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="tabname"> (optional, default to &quot;&quot;)</param>
        /// <param name="name"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSingleCardSdExtraNetworksGetSingleCardGetWithHttpInfoAsync(string? page = default(string?), string? tabname = default(string?), string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Thumb Preview Blob
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGetAsync(Object filename, Object type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Thumb Preview Blob
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGetWithHttpInfoAsync(Object filename, Object type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Thumb Preview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetThumbPreviewTacapiV1ThumbPreviewFilenameGetAsync(Object filename, Object type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Thumb Preview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetThumbPreviewTacapiV1ThumbPreviewFilenameGetWithHttpInfoAsync(Object filename, Object type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetTokenTokenGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTokenTokenGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetTokenTokenGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTokenTokenGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Upscalers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UpscalerItem&gt;</returns>
        System.Threading.Tasks.Task<List<UpscalerItem>> GetUpscalersSdapiV1UpscalersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Upscalers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UpscalerItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UpscalerItem>>> GetUpscalersSdapiV1UpscalersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Wildcard Contents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basepath"></param>
        /// <param name="filename"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetWildcardContentsTacapiV1WildcardContentsGetAsync(string basepath, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Wildcard Contents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basepath"></param>
        /// <param name="filename"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetWildcardContentsTacapiV1WildcardContentsGetWithHttpInfoAsync(string basepath, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Img2Imgapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingImg2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageToImageResponse</returns>
        System.Threading.Tasks.Task<ImageToImageResponse> Img2imgapiSdapiV1Img2imgPostAsync(StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Img2Imgapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingImg2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageToImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageToImageResponse>> Img2imgapiSdapiV1Img2imgPostWithHttpInfoAsync(StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Interrogateapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interrogateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> InterrogateapiSdapiV1InterrogatePostAsync(InterrogateRequest interrogateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Interrogateapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interrogateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InterrogateapiSdapiV1InterrogatePostWithHttpInfoAsync(InterrogateRequest interrogateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Interruptapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> InterruptapiSdapiV1InterruptPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Interruptapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InterruptapiSdapiV1InterruptPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LambdaInternalPingGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LambdaInternalPingGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LambdaInternalProfileStartupGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LambdaInternalProfileStartupGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LambdaInternalSysinfoDownloadGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;Lambda&gt;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LambdaInternalSysinfoDownloadGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login Check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LoginCheckLoginCheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login Check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoginCheckLoginCheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login Check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LoginCheckLoginCheckGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login Check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoginCheckLoginCheckGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LoginLoginPostAsync(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoginLoginPostWithHttpInfoAsync(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LoginLoginPost_0Async(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoginLoginPost_0WithHttpInfoAsync(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Main
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> MainGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Main
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> MainGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Main
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> MainHeadAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Main
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> MainHeadWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Model List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModelListControlnetModelListGetAsync(bool? update = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Model List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModelListControlnetModelListGetWithHttpInfoAsync(bool? update = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Module List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasNames"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModuleListControlnetModuleListGetAsync(bool? aliasNames = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Module List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasNames"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModuleListControlnetModuleListGetWithHttpInfoAsync(bool? aliasNames = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pnginfoapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pNGInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PNGInfoResponse</returns>
        System.Threading.Tasks.Task<PNGInfoResponse> PnginfoapiSdapiV1PngInfoPostAsync(PNGInfoRequest pNGInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pnginfoapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pNGInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PNGInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PNGInfoResponse>> PnginfoapiSdapiV1PngInfoPostWithHttpInfoAsync(PNGInfoRequest pNGInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PredictApiApiNamePostAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredictApiApiNamePostWithHttpInfoAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PredictApiApiNamePost_0Async(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredictApiApiNamePost_0WithHttpInfoAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PredictRunApiNamePostAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredictRunApiNamePostWithHttpInfoAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PredictRunApiNamePost_0Async(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Predict
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredictRunApiNamePost_0WithHttpInfoAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Preprocess
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreprocessResponse</returns>
        System.Threading.Tasks.Task<PreprocessResponse> PreprocessSdapiV1PreprocessPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Preprocess
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreprocessResponse>> PreprocessSdapiV1PreprocessPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Progressapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="progressRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModulesProgressProgressResponse</returns>
        System.Threading.Tasks.Task<ModulesProgressProgressResponse> ProgressapiInternalProgressPostAsync(ProgressRequest progressRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Progressapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="progressRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModulesProgressProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModulesProgressProgressResponse>> ProgressapiInternalProgressPostWithHttpInfoAsync(ProgressRequest progressRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Progressapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skipCurrentImage"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModulesApiModelsProgressResponse</returns>
        System.Threading.Tasks.Task<ModulesApiModelsProgressResponse> ProgressapiSdapiV1ProgressGetAsync(bool? skipCurrentImage = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Progressapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skipCurrentImage"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModulesApiModelsProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModulesApiModelsProgressResponse>> ProgressapiSdapiV1ProgressGetWithHttpInfoAsync(bool? skipCurrentImage = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Quicksettings Hint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;QuicksettingsHint&gt;</returns>
        System.Threading.Tasks.Task<List<QuicksettingsHint>> QuicksettingsHintInternalQuicksettingsHintGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Quicksettings Hint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;QuicksettingsHint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuicksettingsHint>>> QuicksettingsHintInternalQuicksettingsHintGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh Checkpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RefreshCheckpointsSdapiV1RefreshCheckpointsPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh Checkpoints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh Loras
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RefreshLorasSdapiV1RefreshLorasPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh Loras
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefreshLorasSdapiV1RefreshLorasPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh Vae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RefreshVaeSdapiV1RefreshVaePostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh Vae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefreshVaeSdapiV1RefreshVaePostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reloadapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReloadapiSdapiV1ReloadCheckpointPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reloadapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReloadapiSdapiV1ReloadCheckpointPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rembg Remove
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRembgRemoveRembgPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RembgRemoveRembgPostAsync(BodyRembgRemoveRembgPost? bodyRembgRemoveRembgPost = default(BodyRembgRemoveRembgPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rembg Remove
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRembgRemoveRembgPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RembgRemoveRembgPostWithHttpInfoAsync(BodyRembgRemoveRembgPost? bodyRembgRemoveRembgPost = default(BodyRembgRemoveRembgPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Render Openpose Json
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poseData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RenderOpenposeJsonControlnetRenderOpenposeJsonPostAsync(List<PoseData>? poseData = default(List<PoseData>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Render Openpose Json
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poseData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RenderOpenposeJsonControlnetRenderOpenposeJsonPostWithHttpInfoAsync(List<PoseData>? poseData = default(List<PoseData>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset Iterator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ResetIteratorResetPostAsync(ResetBody resetBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset Iterator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetIteratorResetPostWithHttpInfoAsync(ResetBody resetBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset Iterator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ResetIteratorResetPost_0Async(ResetBody resetBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset Iterator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetIteratorResetPost_0WithHttpInfoAsync(ResetBody resetBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reverse Proxy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReverseProxyProxyUrlPathGetAsync(string urlPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reverse Proxy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReverseProxyProxyUrlPathGetWithHttpInfoAsync(string urlPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reverse Proxy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReverseProxyProxyUrlPathHeadAsync(string urlPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reverse Proxy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReverseProxyProxyUrlPathHeadWithHttpInfoAsync(string urlPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Robots Txt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RobotsTxtRobotsTxtGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Robots Txt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RobotsTxtRobotsTxtGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetConfigSdapiV1OptionsPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetConfigSdapiV1OptionsPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SettingsControlnetSettingsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SettingsControlnetSettingsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Skip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SkipSdapiV1SkipPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Skip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SkipSdapiV1SkipPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Startup Events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> StartupEventsStartupEventsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Startup Events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartupEventsStartupEventsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Static Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> StaticResourceStaticPathGetAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Static Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StaticResourceStaticPathGetWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionHash"></param>
        /// <param name="run"></param>
        /// <param name="componentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> StreamStreamSessionHashRunComponentIdGetAsync(string sessionHash, int run, int componentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionHash"></param>
        /// <param name="run"></param>
        /// <param name="componentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamStreamSessionHashRunComponentIdGetWithHttpInfoAsync(string sessionHash, int run, int componentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Text2Imgapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingTxt2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextToImageResponse</returns>
        System.Threading.Tasks.Task<TextToImageResponse> Text2imgapiSdapiV1Txt2imgPostAsync(StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Text2Imgapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingTxt2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextToImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextToImageResponse>> Text2imgapiSdapiV1Txt2imgPostWithHttpInfoAsync(StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Theme Css
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ThemeCssThemeCssGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Theme Css
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ThemeCssThemeCssGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Train Embedding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrainResponse</returns>
        System.Threading.Tasks.Task<TrainResponse> TrainEmbeddingSdapiV1TrainEmbeddingPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Train Embedding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrainResponse>> TrainEmbeddingSdapiV1TrainEmbeddingPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Train Hypernetwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrainResponse</returns>
        System.Threading.Tasks.Task<TrainResponse> TrainHypernetworkSdapiV1TrainHypernetworkPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Train Hypernetwork
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrainResponse>> TrainHypernetworkSdapiV1TrainHypernetworkPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unloadapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UnloadapiSdapiV1UnloadCheckpointPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unloadapi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnloadapiSdapiV1UnloadCheckpointPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UploadFileUploadPostAsync(List<System.IO.Stream> files, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadFileUploadPostWithHttpInfoAsync(List<System.IO.Stream> files, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VersionControlnetVersionGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionControlnetVersionGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private SdWebUiApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = SdWebUiApi.Client.Configuration.MergeConfigurations(
                SdWebUiApi.Client.GlobalConfiguration.Instance,
                new SdWebUiApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SdWebUiApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SdWebUiApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SdWebUiApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(SdWebUiApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SdWebUiApi.Client.Configuration.MergeConfigurations(
                SdWebUiApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SdWebUiApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SdWebUiApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SdWebUiApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(SdWebUiApi.Client.ISynchronousClient client, SdWebUiApi.Client.IAsynchronousClient asyncClient, SdWebUiApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SdWebUiApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SdWebUiApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SdWebUiApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SdWebUiApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SdWebUiApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Api Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiInfoInfoGet(bool? serialize = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ApiInfoInfoGetWithHttpInfo(serialize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Api Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ApiInfoInfoGetWithHttpInfo(bool? serialize = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (serialize != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "serialize", serialize));
            }

            localVarRequestOptions.Operation = "DefaultApi.ApiInfoInfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInfoInfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Api Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiInfoInfoGetAsync(bool? serialize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ApiInfoInfoGetWithHttpInfoAsync(serialize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Api Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ApiInfoInfoGetWithHttpInfoAsync(bool? serialize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (serialize != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "serialize", serialize));
            }

            localVarRequestOptions.Operation = "DefaultApi.ApiInfoInfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInfoInfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Api Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiInfoInfoGet_0(bool? serialize = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ApiInfoInfoGet_0WithHttpInfo(serialize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Api Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ApiInfoInfoGet_0WithHttpInfo(bool? serialize = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (serialize != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "serialize", serialize));
            }

            localVarRequestOptions.Operation = "DefaultApi.ApiInfoInfoGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/info/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInfoInfoGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Api Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiInfoInfoGet_0Async(bool? serialize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ApiInfoInfoGet_0WithHttpInfoAsync(serialize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Api Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialize"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ApiInfoInfoGet_0WithHttpInfoAsync(bool? serialize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (serialize != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "serialize", serialize));
            }

            localVarRequestOptions.Operation = "DefaultApi.ApiInfoInfoGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/info/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInfoInfoGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Api Refresh Embeddings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Api Refresh Embeddings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tacapi/v1/refresh-embeddings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Api Refresh Embeddings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Api Refresh Embeddings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tacapi/v1/refresh-embeddings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRefreshEmbeddingsTacapiV1RefreshEmbeddingsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Api Refresh Temp Files 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiRefreshTempFilesTacapiV1RefreshTempFilesPost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ApiRefreshTempFilesTacapiV1RefreshTempFilesPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Api Refresh Temp Files 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ApiRefreshTempFilesTacapiV1RefreshTempFilesPostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ApiRefreshTempFilesTacapiV1RefreshTempFilesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tacapi/v1/refresh-temp-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRefreshTempFilesTacapiV1RefreshTempFilesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Api Refresh Temp Files 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiRefreshTempFilesTacapiV1RefreshTempFilesPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ApiRefreshTempFilesTacapiV1RefreshTempFilesPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Api Refresh Temp Files 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ApiRefreshTempFilesTacapiV1RefreshTempFilesPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ApiRefreshTempFilesTacapiV1RefreshTempFilesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tacapi/v1/refresh-temp-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRefreshTempFilesTacapiV1RefreshTempFilesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// App Id 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AppIdAppIdGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = AppIdAppIdGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// App Id 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> AppIdAppIdGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.AppIdAppIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/app_id/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppIdAppIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// App Id 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppIdAppIdGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await AppIdAppIdGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// App Id 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> AppIdAppIdGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.AppIdAppIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/app_id/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppIdAppIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// App Id 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AppIdAppIdGet_0(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = AppIdAppIdGet_0WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// App Id 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> AppIdAppIdGet_0WithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.AppIdAppIdGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/app_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppIdAppIdGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// App Id 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AppIdAppIdGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await AppIdAppIdGet_0WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// App Id 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> AppIdAppIdGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.AppIdAppIdGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/app_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppIdAppIdGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Resource 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BuildResourceAssetsPathGet(string path, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = BuildResourceAssetsPathGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Resource 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> BuildResourceAssetsPathGetWithHttpInfo(string path, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'path' when calling DefaultApi->BuildResourceAssetsPathGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", SdWebUiApi.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.BuildResourceAssetsPathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/assets/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildResourceAssetsPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Resource 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BuildResourceAssetsPathGetAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await BuildResourceAssetsPathGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Resource 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> BuildResourceAssetsPathGetWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'path' when calling DefaultApi->BuildResourceAssetsPathGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", SdWebUiApi.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.BuildResourceAssetsPathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/assets/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildResourceAssetsPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Control Types 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ControlTypesControlnetControlTypesGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ControlTypesControlnetControlTypesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Control Types 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ControlTypesControlnetControlTypesGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ControlTypesControlnetControlTypesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/controlnet/control_types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ControlTypesControlnetControlTypesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Control Types 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ControlTypesControlnetControlTypesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ControlTypesControlnetControlTypesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Control Types 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ControlTypesControlnetControlTypesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ControlTypesControlnetControlTypesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/controlnet/control_types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ControlTypesControlnetControlTypesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Embedding 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateResponse</returns>
        public CreateResponse CreateEmbeddingSdapiV1CreateEmbeddingPost(Object body, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<CreateResponse> localVarResponse = CreateEmbeddingSdapiV1CreateEmbeddingPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Embedding 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        public SdWebUiApi.Client.ApiResponse<CreateResponse> CreateEmbeddingSdapiV1CreateEmbeddingPostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CreateEmbeddingSdapiV1CreateEmbeddingPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CreateEmbeddingSdapiV1CreateEmbeddingPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateResponse>("/sdapi/v1/create/embedding", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmbeddingSdapiV1CreateEmbeddingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Embedding 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateResponse</returns>
        public async System.Threading.Tasks.Task<CreateResponse> CreateEmbeddingSdapiV1CreateEmbeddingPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<CreateResponse> localVarResponse = await CreateEmbeddingSdapiV1CreateEmbeddingPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Embedding 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<CreateResponse>> CreateEmbeddingSdapiV1CreateEmbeddingPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CreateEmbeddingSdapiV1CreateEmbeddingPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CreateEmbeddingSdapiV1CreateEmbeddingPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateResponse>("/sdapi/v1/create/embedding", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmbeddingSdapiV1CreateEmbeddingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Hypernetwork 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateResponse</returns>
        public CreateResponse CreateHypernetworkSdapiV1CreateHypernetworkPost(Object body, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<CreateResponse> localVarResponse = CreateHypernetworkSdapiV1CreateHypernetworkPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Hypernetwork 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        public SdWebUiApi.Client.ApiResponse<CreateResponse> CreateHypernetworkSdapiV1CreateHypernetworkPostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CreateHypernetworkSdapiV1CreateHypernetworkPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CreateHypernetworkSdapiV1CreateHypernetworkPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateResponse>("/sdapi/v1/create/hypernetwork", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateHypernetworkSdapiV1CreateHypernetworkPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Hypernetwork 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateResponse</returns>
        public async System.Threading.Tasks.Task<CreateResponse> CreateHypernetworkSdapiV1CreateHypernetworkPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<CreateResponse> localVarResponse = await CreateHypernetworkSdapiV1CreateHypernetworkPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Hypernetwork 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<CreateResponse>> CreateHypernetworkSdapiV1CreateHypernetworkPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CreateHypernetworkSdapiV1CreateHypernetworkPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.CreateHypernetworkSdapiV1CreateHypernetworkPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateResponse>("/sdapi/v1/create/hypernetwork", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateHypernetworkSdapiV1CreateHypernetworkPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyDetectControlnetDetectPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DetectControlnetDetectPost(BodyDetectControlnetDetectPost? bodyDetectControlnetDetectPost = default(BodyDetectControlnetDetectPost?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = DetectControlnetDetectPostWithHttpInfo(bodyDetectControlnetDetectPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyDetectControlnetDetectPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> DetectControlnetDetectPostWithHttpInfo(BodyDetectControlnetDetectPost? bodyDetectControlnetDetectPost = default(BodyDetectControlnetDetectPost?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyDetectControlnetDetectPost;

            localVarRequestOptions.Operation = "DefaultApi.DetectControlnetDetectPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/controlnet/detect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectControlnetDetectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyDetectControlnetDetectPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DetectControlnetDetectPostAsync(BodyDetectControlnetDetectPost? bodyDetectControlnetDetectPost = default(BodyDetectControlnetDetectPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await DetectControlnetDetectPostWithHttpInfoAsync(bodyDetectControlnetDetectPost, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyDetectControlnetDetectPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> DetectControlnetDetectPostWithHttpInfoAsync(BodyDetectControlnetDetectPost? bodyDetectControlnetDetectPost = default(BodyDetectControlnetDetectPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyDetectControlnetDetectPost;

            localVarRequestOptions.Operation = "DefaultApi.DetectControlnetDetectPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/controlnet/detect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectControlnetDetectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Sysinfo 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DownloadSysinfoInternalSysinfoGet(Object? attachment = default(Object?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = DownloadSysinfoInternalSysinfoGetWithHttpInfo(attachment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Sysinfo 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> DownloadSysinfoInternalSysinfoGetWithHttpInfo(Object? attachment = default(Object?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attachment != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "attachment", attachment));
            }

            localVarRequestOptions.Operation = "DefaultApi.DownloadSysinfoInternalSysinfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/internal/sysinfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadSysinfoInternalSysinfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Sysinfo 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DownloadSysinfoInternalSysinfoGetAsync(Object? attachment = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await DownloadSysinfoInternalSysinfoGetWithHttpInfoAsync(attachment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Sysinfo 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> DownloadSysinfoInternalSysinfoGetWithHttpInfoAsync(Object? attachment = default(Object?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attachment != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "attachment", attachment));
            }

            localVarRequestOptions.Operation = "DefaultApi.DownloadSysinfoInternalSysinfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/internal/sysinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadSysinfoInternalSysinfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extras Batch Images Api 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasBatchImagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtrasBatchImagesResponse</returns>
        public ExtrasBatchImagesResponse ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost(ExtrasBatchImagesRequest extrasBatchImagesRequest, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<ExtrasBatchImagesResponse> localVarResponse = ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithHttpInfo(extrasBatchImagesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extras Batch Images Api 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasBatchImagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtrasBatchImagesResponse</returns>
        public SdWebUiApi.Client.ApiResponse<ExtrasBatchImagesResponse> ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithHttpInfo(ExtrasBatchImagesRequest extrasBatchImagesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'extrasBatchImagesRequest' is set
            if (extrasBatchImagesRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'extrasBatchImagesRequest' when calling DefaultApi->ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = extrasBatchImagesRequest;

            localVarRequestOptions.Operation = "DefaultApi.ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ExtrasBatchImagesResponse>("/sdapi/v1/extra-batch-images", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extras Batch Images Api 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasBatchImagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtrasBatchImagesResponse</returns>
        public async System.Threading.Tasks.Task<ExtrasBatchImagesResponse> ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostAsync(ExtrasBatchImagesRequest extrasBatchImagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<ExtrasBatchImagesResponse> localVarResponse = await ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithHttpInfoAsync(extrasBatchImagesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extras Batch Images Api 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasBatchImagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtrasBatchImagesResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<ExtrasBatchImagesResponse>> ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostWithHttpInfoAsync(ExtrasBatchImagesRequest extrasBatchImagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extrasBatchImagesRequest' is set
            if (extrasBatchImagesRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'extrasBatchImagesRequest' when calling DefaultApi->ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = extrasBatchImagesRequest;

            localVarRequestOptions.Operation = "DefaultApi.ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExtrasBatchImagesResponse>("/sdapi/v1/extra-batch-images", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extras Single Image Api 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasSingleImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtrasSingleImageResponse</returns>
        public ExtrasSingleImageResponse ExtrasSingleImageApiSdapiV1ExtraSingleImagePost(ExtrasSingleImageRequest extrasSingleImageRequest, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<ExtrasSingleImageResponse> localVarResponse = ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithHttpInfo(extrasSingleImageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extras Single Image Api 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasSingleImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtrasSingleImageResponse</returns>
        public SdWebUiApi.Client.ApiResponse<ExtrasSingleImageResponse> ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithHttpInfo(ExtrasSingleImageRequest extrasSingleImageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'extrasSingleImageRequest' is set
            if (extrasSingleImageRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'extrasSingleImageRequest' when calling DefaultApi->ExtrasSingleImageApiSdapiV1ExtraSingleImagePost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = extrasSingleImageRequest;

            localVarRequestOptions.Operation = "DefaultApi.ExtrasSingleImageApiSdapiV1ExtraSingleImagePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ExtrasSingleImageResponse>("/sdapi/v1/extra-single-image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrasSingleImageApiSdapiV1ExtraSingleImagePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extras Single Image Api 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasSingleImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtrasSingleImageResponse</returns>
        public async System.Threading.Tasks.Task<ExtrasSingleImageResponse> ExtrasSingleImageApiSdapiV1ExtraSingleImagePostAsync(ExtrasSingleImageRequest extrasSingleImageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<ExtrasSingleImageResponse> localVarResponse = await ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithHttpInfoAsync(extrasSingleImageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extras Single Image Api 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extrasSingleImageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtrasSingleImageResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<ExtrasSingleImageResponse>> ExtrasSingleImageApiSdapiV1ExtraSingleImagePostWithHttpInfoAsync(ExtrasSingleImageRequest extrasSingleImageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extrasSingleImageRequest' is set
            if (extrasSingleImageRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'extrasSingleImageRequest' when calling DefaultApi->ExtrasSingleImageApiSdapiV1ExtraSingleImagePost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = extrasSingleImageRequest;

            localVarRequestOptions.Operation = "DefaultApi.ExtrasSingleImageApiSdapiV1ExtraSingleImagePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExtrasSingleImageResponse>("/sdapi/v1/extra-single-image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtrasSingleImageApiSdapiV1ExtraSingleImagePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Favicon 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object FaviconFaviconIcoGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = FaviconFaviconIcoGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Favicon 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> FaviconFaviconIcoGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.FaviconFaviconIcoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/favicon.ico", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaviconFaviconIcoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Favicon 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FaviconFaviconIcoGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await FaviconFaviconIcoGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Favicon 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> FaviconFaviconIcoGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.FaviconFaviconIcoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/favicon.ico", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FaviconFaviconIcoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object FetchFileSdExtraNetworksThumbGet(string? filename = default(string?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = FetchFileSdExtraNetworksThumbGetWithHttpInfo(filename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> FetchFileSdExtraNetworksThumbGetWithHttpInfo(string? filename = default(string?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }

            localVarRequestOptions.Operation = "DefaultApi.FetchFileSdExtraNetworksThumbGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sd_extra_networks/thumb", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchFileSdExtraNetworksThumbGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FetchFileSdExtraNetworksThumbGetAsync(string? filename = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await FetchFileSdExtraNetworksThumbGetWithHttpInfoAsync(filename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> FetchFileSdExtraNetworksThumbGetWithHttpInfoAsync(string? filename = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }

            localVarRequestOptions.Operation = "DefaultApi.FetchFileSdExtraNetworksThumbGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sd_extra_networks/thumb", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchFileSdExtraNetworksThumbGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// File Deprecated 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object FileDeprecatedFilePathGet(string path, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = FileDeprecatedFilePathGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// File Deprecated 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> FileDeprecatedFilePathGetWithHttpInfo(string path, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'path' when calling DefaultApi->FileDeprecatedFilePathGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", SdWebUiApi.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FileDeprecatedFilePathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/file/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FileDeprecatedFilePathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// File Deprecated 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FileDeprecatedFilePathGetAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await FileDeprecatedFilePathGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// File Deprecated 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> FileDeprecatedFilePathGetWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'path' when calling DefaultApi->FileDeprecatedFilePathGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", SdWebUiApi.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FileDeprecatedFilePathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/file/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FileDeprecatedFilePathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object FileFilePathOrUrlGet(string pathOrUrl, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = FileFilePathOrUrlGetWithHttpInfo(pathOrUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> FileFilePathOrUrlGetWithHttpInfo(string pathOrUrl, int operationIndex = 0)
        {
            // verify the required parameter 'pathOrUrl' is set
            if (pathOrUrl == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'pathOrUrl' when calling DefaultApi->FileFilePathOrUrlGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path_or_url", SdWebUiApi.Client.ClientUtils.ParameterToString(pathOrUrl)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FileFilePathOrUrlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/file={path_or_url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FileFilePathOrUrlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FileFilePathOrUrlGetAsync(string pathOrUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await FileFilePathOrUrlGetWithHttpInfoAsync(pathOrUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> FileFilePathOrUrlGetWithHttpInfoAsync(string pathOrUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pathOrUrl' is set
            if (pathOrUrl == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'pathOrUrl' when calling DefaultApi->FileFilePathOrUrlGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path_or_url", SdWebUiApi.Client.ClientUtils.ParameterToString(pathOrUrl)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FileFilePathOrUrlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/file={path_or_url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FileFilePathOrUrlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object FileFilePathOrUrlHead(string pathOrUrl, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = FileFilePathOrUrlHeadWithHttpInfo(pathOrUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> FileFilePathOrUrlHeadWithHttpInfo(string pathOrUrl, int operationIndex = 0)
        {
            // verify the required parameter 'pathOrUrl' is set
            if (pathOrUrl == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'pathOrUrl' when calling DefaultApi->FileFilePathOrUrlHead");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path_or_url", SdWebUiApi.Client.ClientUtils.ParameterToString(pathOrUrl)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FileFilePathOrUrlHead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Head<Object>("/file={path_or_url}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FileFilePathOrUrlHead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FileFilePathOrUrlHeadAsync(string pathOrUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await FileFilePathOrUrlHeadWithHttpInfoAsync(pathOrUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pathOrUrl"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> FileFilePathOrUrlHeadWithHttpInfoAsync(string pathOrUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pathOrUrl' is set
            if (pathOrUrl == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'pathOrUrl' when calling DefaultApi->FileFilePathOrUrlHead");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path_or_url", SdWebUiApi.Client.ClientUtils.ParameterToString(pathOrUrl)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FileFilePathOrUrlHead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.HeadAsync<Object>("/file={path_or_url}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FileFilePathOrUrlHead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cmd Flags 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Flags</returns>
        public Flags GetCmdFlagsSdapiV1CmdFlagsGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Flags> localVarResponse = GetCmdFlagsSdapiV1CmdFlagsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cmd Flags 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Flags</returns>
        public SdWebUiApi.Client.ApiResponse<Flags> GetCmdFlagsSdapiV1CmdFlagsGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetCmdFlagsSdapiV1CmdFlagsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Flags>("/sdapi/v1/cmd-flags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmdFlagsSdapiV1CmdFlagsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cmd Flags 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Flags</returns>
        public async System.Threading.Tasks.Task<Flags> GetCmdFlagsSdapiV1CmdFlagsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Flags> localVarResponse = await GetCmdFlagsSdapiV1CmdFlagsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cmd Flags 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Flags)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Flags>> GetCmdFlagsSdapiV1CmdFlagsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetCmdFlagsSdapiV1CmdFlagsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Flags>("/sdapi/v1/cmd-flags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmdFlagsSdapiV1CmdFlagsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetConfigConfigGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetConfigConfigGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetConfigConfigGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetConfigConfigGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigConfigGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetConfigConfigGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetConfigConfigGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetConfigConfigGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetConfigConfigGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigConfigGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetConfigConfigGet_0(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetConfigConfigGet_0WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetConfigConfigGet_0WithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetConfigConfigGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/config/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigConfigGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetConfigConfigGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetConfigConfigGet_0WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetConfigConfigGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetConfigConfigGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/config/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigConfigGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Options</returns>
        public Options GetConfigSdapiV1OptionsGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Options> localVarResponse = GetConfigSdapiV1OptionsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Options</returns>
        public SdWebUiApi.Client.ApiResponse<Options> GetConfigSdapiV1OptionsGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetConfigSdapiV1OptionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Options>("/sdapi/v1/options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigSdapiV1OptionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Options</returns>
        public async System.Threading.Tasks.Task<Options> GetConfigSdapiV1OptionsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Options> localVarResponse = await GetConfigSdapiV1OptionsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Options)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Options>> GetConfigSdapiV1OptionsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetConfigSdapiV1OptionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Options>("/sdapi/v1/options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfigSdapiV1OptionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Current User 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetCurrentUserUserGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = GetCurrentUserUserGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Current User 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SdWebUiApi.Client.ApiResponse<string> GetCurrentUserUserGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetCurrentUserUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/user/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUserUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Current User 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetCurrentUserUserGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = await GetCurrentUserUserGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Current User 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<string>> GetCurrentUserUserGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetCurrentUserUserGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/user/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUserUserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Current User 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetCurrentUserUserGet_0(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = GetCurrentUserUserGet_0WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Current User 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SdWebUiApi.Client.ApiResponse<string> GetCurrentUserUserGet_0WithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetCurrentUserUserGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUserUserGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Current User 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetCurrentUserUserGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = await GetCurrentUserUserGet_0WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Current User 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<string>> GetCurrentUserUserGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetCurrentUserUserGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUserUserGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Embeddings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmbeddingsResponse</returns>
        public EmbeddingsResponse GetEmbeddingsSdapiV1EmbeddingsGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<EmbeddingsResponse> localVarResponse = GetEmbeddingsSdapiV1EmbeddingsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Embeddings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmbeddingsResponse</returns>
        public SdWebUiApi.Client.ApiResponse<EmbeddingsResponse> GetEmbeddingsSdapiV1EmbeddingsGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetEmbeddingsSdapiV1EmbeddingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EmbeddingsResponse>("/sdapi/v1/embeddings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbeddingsSdapiV1EmbeddingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Embeddings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmbeddingsResponse</returns>
        public async System.Threading.Tasks.Task<EmbeddingsResponse> GetEmbeddingsSdapiV1EmbeddingsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<EmbeddingsResponse> localVarResponse = await GetEmbeddingsSdapiV1EmbeddingsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Embeddings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmbeddingsResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<EmbeddingsResponse>> GetEmbeddingsSdapiV1EmbeddingsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetEmbeddingsSdapiV1EmbeddingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmbeddingsResponse>("/sdapi/v1/embeddings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbeddingsSdapiV1EmbeddingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Face Restorers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FaceRestorerItem&gt;</returns>
        public List<FaceRestorerItem> GetFaceRestorersSdapiV1FaceRestorersGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<FaceRestorerItem>> localVarResponse = GetFaceRestorersSdapiV1FaceRestorersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Face Restorers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FaceRestorerItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<FaceRestorerItem>> GetFaceRestorersSdapiV1FaceRestorersGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetFaceRestorersSdapiV1FaceRestorersGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FaceRestorerItem>>("/sdapi/v1/face-restorers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFaceRestorersSdapiV1FaceRestorersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Face Restorers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FaceRestorerItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<FaceRestorerItem>> GetFaceRestorersSdapiV1FaceRestorersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<FaceRestorerItem>> localVarResponse = await GetFaceRestorersSdapiV1FaceRestorersGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Face Restorers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FaceRestorerItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<FaceRestorerItem>>> GetFaceRestorersSdapiV1FaceRestorersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetFaceRestorersSdapiV1FaceRestorersGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FaceRestorerItem>>("/sdapi/v1/face-restorers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFaceRestorersSdapiV1FaceRestorersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Hypernetworks 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;HypernetworkItem&gt;</returns>
        public List<HypernetworkItem> GetHypernetworksSdapiV1HypernetworksGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<HypernetworkItem>> localVarResponse = GetHypernetworksSdapiV1HypernetworksGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Hypernetworks 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;HypernetworkItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<HypernetworkItem>> GetHypernetworksSdapiV1HypernetworksGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetHypernetworksSdapiV1HypernetworksGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HypernetworkItem>>("/sdapi/v1/hypernetworks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHypernetworksSdapiV1HypernetworksGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Hypernetworks 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HypernetworkItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<HypernetworkItem>> GetHypernetworksSdapiV1HypernetworksGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<HypernetworkItem>> localVarResponse = await GetHypernetworksSdapiV1HypernetworksGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Hypernetworks 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HypernetworkItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<HypernetworkItem>>> GetHypernetworksSdapiV1HypernetworksGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetHypernetworksSdapiV1HypernetworksGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HypernetworkItem>>("/sdapi/v1/hypernetworks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHypernetworksSdapiV1HypernetworksGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Latent Upscale Modes 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LatentUpscalerModeItem&gt;</returns>
        public List<LatentUpscalerModeItem> GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<LatentUpscalerModeItem>> localVarResponse = GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Latent Upscale Modes 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LatentUpscalerModeItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<LatentUpscalerModeItem>> GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LatentUpscalerModeItem>>("/sdapi/v1/latent-upscale-modes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Latent Upscale Modes 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LatentUpscalerModeItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<LatentUpscalerModeItem>> GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<LatentUpscalerModeItem>> localVarResponse = await GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Latent Upscale Modes 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LatentUpscalerModeItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<LatentUpscalerModeItem>>> GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LatentUpscalerModeItem>>("/sdapi/v1/latent-upscale-modes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Lora Cached Hash 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGet(string loraName, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGetWithHttpInfo(loraName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Lora Cached Hash 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGetWithHttpInfo(string loraName, int operationIndex = 0)
        {
            // verify the required parameter 'loraName' is set
            if (loraName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'loraName' when calling DefaultApi->GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lora_name", SdWebUiApi.Client.ClientUtils.ParameterToString(loraName)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/tacapi/v1/lora-cached-hash/{lora_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Lora Cached Hash 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGetAsync(string loraName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGetWithHttpInfoAsync(loraName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Lora Cached Hash 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGetWithHttpInfoAsync(string loraName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loraName' is set
            if (loraName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'loraName' when calling DefaultApi->GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lora_name", SdWebUiApi.Client.ClientUtils.ParameterToString(loraName)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/tacapi/v1/lora-cached-hash/{lora_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoraCachedHashTacapiV1LoraCachedHashLoraNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Lora Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetLoraInfoTacapiV1LoraInfoLoraNameGet(Object loraName, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetLoraInfoTacapiV1LoraInfoLoraNameGetWithHttpInfo(loraName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Lora Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetLoraInfoTacapiV1LoraInfoLoraNameGetWithHttpInfo(Object loraName, int operationIndex = 0)
        {
            // verify the required parameter 'loraName' is set
            if (loraName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'loraName' when calling DefaultApi->GetLoraInfoTacapiV1LoraInfoLoraNameGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lora_name", SdWebUiApi.Client.ClientUtils.ParameterToString(loraName)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetLoraInfoTacapiV1LoraInfoLoraNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/tacapi/v1/lora-info/{lora_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoraInfoTacapiV1LoraInfoLoraNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Lora Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetLoraInfoTacapiV1LoraInfoLoraNameGetAsync(Object loraName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetLoraInfoTacapiV1LoraInfoLoraNameGetWithHttpInfoAsync(loraName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Lora Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loraName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetLoraInfoTacapiV1LoraInfoLoraNameGetWithHttpInfoAsync(Object loraName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loraName' is set
            if (loraName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'loraName' when calling DefaultApi->GetLoraInfoTacapiV1LoraInfoLoraNameGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lora_name", SdWebUiApi.Client.ClientUtils.ParameterToString(loraName)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetLoraInfoTacapiV1LoraInfoLoraNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/tacapi/v1/lora-info/{lora_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoraInfoTacapiV1LoraInfoLoraNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Loras 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetLorasSdapiV1LorasGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetLorasSdapiV1LorasGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loras 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetLorasSdapiV1LorasGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetLorasSdapiV1LorasGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sdapi/v1/loras", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLorasSdapiV1LorasGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Loras 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetLorasSdapiV1LorasGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetLorasSdapiV1LorasGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loras 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetLorasSdapiV1LorasGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetLorasSdapiV1LorasGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sdapi/v1/loras", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLorasSdapiV1LorasGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Lyco Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lycoName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetLycoInfoTacapiV1LycoInfoLycoNameGet(Object lycoName, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetLycoInfoTacapiV1LycoInfoLycoNameGetWithHttpInfo(lycoName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Lyco Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lycoName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetLycoInfoTacapiV1LycoInfoLycoNameGetWithHttpInfo(Object lycoName, int operationIndex = 0)
        {
            // verify the required parameter 'lycoName' is set
            if (lycoName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'lycoName' when calling DefaultApi->GetLycoInfoTacapiV1LycoInfoLycoNameGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lyco_name", SdWebUiApi.Client.ClientUtils.ParameterToString(lycoName)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetLycoInfoTacapiV1LycoInfoLycoNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/tacapi/v1/lyco-info/{lyco_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLycoInfoTacapiV1LycoInfoLycoNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Lyco Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lycoName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetLycoInfoTacapiV1LycoInfoLycoNameGetAsync(Object lycoName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetLycoInfoTacapiV1LycoInfoLycoNameGetWithHttpInfoAsync(lycoName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Lyco Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lycoName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetLycoInfoTacapiV1LycoInfoLycoNameGetWithHttpInfoAsync(Object lycoName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lycoName' is set
            if (lycoName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'lycoName' when calling DefaultApi->GetLycoInfoTacapiV1LycoInfoLycoNameGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lyco_name", SdWebUiApi.Client.ClientUtils.ParameterToString(lycoName)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetLycoInfoTacapiV1LycoInfoLycoNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/tacapi/v1/lyco-info/{lyco_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLycoInfoTacapiV1LycoInfoLycoNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Memory 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryResponse</returns>
        public MemoryResponse GetMemorySdapiV1MemoryGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<MemoryResponse> localVarResponse = GetMemorySdapiV1MemoryGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Memory 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryResponse</returns>
        public SdWebUiApi.Client.ApiResponse<MemoryResponse> GetMemorySdapiV1MemoryGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetMemorySdapiV1MemoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MemoryResponse>("/sdapi/v1/memory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMemorySdapiV1MemoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Memory 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryResponse</returns>
        public async System.Threading.Tasks.Task<MemoryResponse> GetMemorySdapiV1MemoryGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<MemoryResponse> localVarResponse = await GetMemorySdapiV1MemoryGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Memory 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<MemoryResponse>> GetMemorySdapiV1MemoryGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetMemorySdapiV1MemoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemoryResponse>("/sdapi/v1/memory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMemorySdapiV1MemoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metadata 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="item"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetMetadataSdExtraNetworksMetadataGet(string? page = default(string?), string? item = default(string?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetMetadataSdExtraNetworksMetadataGetWithHttpInfo(page, item);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metadata 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="item"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetMetadataSdExtraNetworksMetadataGetWithHttpInfo(string? page = default(string?), string? item = default(string?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (item != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "item", item));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetMetadataSdExtraNetworksMetadataGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sd_extra_networks/metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataSdExtraNetworksMetadataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metadata 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="item"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetMetadataSdExtraNetworksMetadataGetAsync(string? page = default(string?), string? item = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetMetadataSdExtraNetworksMetadataGetWithHttpInfoAsync(page, item, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metadata 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="item"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetMetadataSdExtraNetworksMetadataGetWithHttpInfoAsync(string? page = default(string?), string? item = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (item != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "item", item));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetMetadataSdExtraNetworksMetadataGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sd_extra_networks/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataSdExtraNetworksMetadataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Prompt Styles 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PromptStyleItem&gt;</returns>
        public List<PromptStyleItem> GetPromptStylesSdapiV1PromptStylesGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<PromptStyleItem>> localVarResponse = GetPromptStylesSdapiV1PromptStylesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Prompt Styles 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PromptStyleItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<PromptStyleItem>> GetPromptStylesSdapiV1PromptStylesGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetPromptStylesSdapiV1PromptStylesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PromptStyleItem>>("/sdapi/v1/prompt-styles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromptStylesSdapiV1PromptStylesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Prompt Styles 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PromptStyleItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<PromptStyleItem>> GetPromptStylesSdapiV1PromptStylesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<PromptStyleItem>> localVarResponse = await GetPromptStylesSdapiV1PromptStylesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Prompt Styles 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PromptStyleItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<PromptStyleItem>>> GetPromptStylesSdapiV1PromptStylesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetPromptStylesSdapiV1PromptStylesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PromptStyleItem>>("/sdapi/v1/prompt-styles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromptStylesSdapiV1PromptStylesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Queue Status 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Estimation</returns>
        public Estimation GetQueueStatusQueueStatusGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Estimation> localVarResponse = GetQueueStatusQueueStatusGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Queue Status 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Estimation</returns>
        public SdWebUiApi.Client.ApiResponse<Estimation> GetQueueStatusQueueStatusGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetQueueStatusQueueStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Estimation>("/queue/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQueueStatusQueueStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Queue Status 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Estimation</returns>
        public async System.Threading.Tasks.Task<Estimation> GetQueueStatusQueueStatusGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Estimation> localVarResponse = await GetQueueStatusQueueStatusGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Queue Status 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Estimation)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Estimation>> GetQueueStatusQueueStatusGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetQueueStatusQueueStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Estimation>("/queue/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQueueStatusQueueStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Realesrgan Models 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RealesrganItem&gt;</returns>
        public List<RealesrganItem> GetRealesrganModelsSdapiV1RealesrganModelsGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<RealesrganItem>> localVarResponse = GetRealesrganModelsSdapiV1RealesrganModelsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Realesrgan Models 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RealesrganItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<RealesrganItem>> GetRealesrganModelsSdapiV1RealesrganModelsGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetRealesrganModelsSdapiV1RealesrganModelsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RealesrganItem>>("/sdapi/v1/realesrgan-models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRealesrganModelsSdapiV1RealesrganModelsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Realesrgan Models 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RealesrganItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<RealesrganItem>> GetRealesrganModelsSdapiV1RealesrganModelsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<RealesrganItem>> localVarResponse = await GetRealesrganModelsSdapiV1RealesrganModelsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Realesrgan Models 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RealesrganItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<RealesrganItem>>> GetRealesrganModelsSdapiV1RealesrganModelsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetRealesrganModelsSdapiV1RealesrganModelsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RealesrganItem>>("/sdapi/v1/realesrgan-models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRealesrganModelsSdapiV1RealesrganModelsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Samplers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SamplerItem&gt;</returns>
        public List<SamplerItem> GetSamplersSdapiV1SamplersGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<SamplerItem>> localVarResponse = GetSamplersSdapiV1SamplersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Samplers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SamplerItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<SamplerItem>> GetSamplersSdapiV1SamplersGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSamplersSdapiV1SamplersGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SamplerItem>>("/sdapi/v1/samplers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSamplersSdapiV1SamplersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Samplers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SamplerItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SamplerItem>> GetSamplersSdapiV1SamplersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<SamplerItem>> localVarResponse = await GetSamplersSdapiV1SamplersGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Samplers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SamplerItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<SamplerItem>>> GetSamplersSdapiV1SamplersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSamplersSdapiV1SamplersGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SamplerItem>>("/sdapi/v1/samplers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSamplersSdapiV1SamplersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Script Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScriptInfo&gt;</returns>
        public List<ScriptInfo> GetScriptInfoSdapiV1ScriptInfoGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<ScriptInfo>> localVarResponse = GetScriptInfoSdapiV1ScriptInfoGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Script Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScriptInfo&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<ScriptInfo>> GetScriptInfoSdapiV1ScriptInfoGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetScriptInfoSdapiV1ScriptInfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScriptInfo>>("/sdapi/v1/script-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScriptInfoSdapiV1ScriptInfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Script Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScriptInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScriptInfo>> GetScriptInfoSdapiV1ScriptInfoGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<ScriptInfo>> localVarResponse = await GetScriptInfoSdapiV1ScriptInfoGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Script Info 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScriptInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<ScriptInfo>>> GetScriptInfoSdapiV1ScriptInfoGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetScriptInfoSdapiV1ScriptInfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScriptInfo>>("/sdapi/v1/script-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScriptInfoSdapiV1ScriptInfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scripts List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScriptsList</returns>
        public ScriptsList GetScriptsListSdapiV1ScriptsGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<ScriptsList> localVarResponse = GetScriptsListSdapiV1ScriptsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scripts List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScriptsList</returns>
        public SdWebUiApi.Client.ApiResponse<ScriptsList> GetScriptsListSdapiV1ScriptsGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetScriptsListSdapiV1ScriptsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ScriptsList>("/sdapi/v1/scripts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScriptsListSdapiV1ScriptsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scripts List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScriptsList</returns>
        public async System.Threading.Tasks.Task<ScriptsList> GetScriptsListSdapiV1ScriptsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<ScriptsList> localVarResponse = await GetScriptsListSdapiV1ScriptsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scripts List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScriptsList)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<ScriptsList>> GetScriptsListSdapiV1ScriptsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetScriptsListSdapiV1ScriptsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScriptsList>("/sdapi/v1/scripts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScriptsListSdapiV1ScriptsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Sd Models 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SDModelItem&gt;</returns>
        public List<SDModelItem> GetSdModelsSdapiV1SdModelsGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<SDModelItem>> localVarResponse = GetSdModelsSdapiV1SdModelsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sd Models 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SDModelItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<SDModelItem>> GetSdModelsSdapiV1SdModelsGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSdModelsSdapiV1SdModelsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SDModelItem>>("/sdapi/v1/sd-models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSdModelsSdapiV1SdModelsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Sd Models 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SDModelItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SDModelItem>> GetSdModelsSdapiV1SdModelsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<SDModelItem>> localVarResponse = await GetSdModelsSdapiV1SdModelsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sd Models 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SDModelItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<SDModelItem>>> GetSdModelsSdapiV1SdModelsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSdModelsSdapiV1SdModelsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SDModelItem>>("/sdapi/v1/sd-models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSdModelsSdapiV1SdModelsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Sd Vaes 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SDVaeItem&gt;</returns>
        public List<SDVaeItem> GetSdVaesSdapiV1SdVaeGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<SDVaeItem>> localVarResponse = GetSdVaesSdapiV1SdVaeGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sd Vaes 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SDVaeItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<SDVaeItem>> GetSdVaesSdapiV1SdVaeGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSdVaesSdapiV1SdVaeGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SDVaeItem>>("/sdapi/v1/sd-vae", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSdVaesSdapiV1SdVaeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Sd Vaes 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SDVaeItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SDVaeItem>> GetSdVaesSdapiV1SdVaeGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<SDVaeItem>> localVarResponse = await GetSdVaesSdapiV1SdVaeGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sd Vaes 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SDVaeItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<SDVaeItem>>> GetSdVaesSdapiV1SdVaeGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetSdVaesSdapiV1SdVaeGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SDVaeItem>>("/sdapi/v1/sd-vae", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSdVaesSdapiV1SdVaeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Single Card 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="tabname"> (optional, default to &quot;&quot;)</param>
        /// <param name="name"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetSingleCardSdExtraNetworksGetSingleCardGet(string? page = default(string?), string? tabname = default(string?), string? name = default(string?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetSingleCardSdExtraNetworksGetSingleCardGetWithHttpInfo(page, tabname, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Card 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="tabname"> (optional, default to &quot;&quot;)</param>
        /// <param name="name"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetSingleCardSdExtraNetworksGetSingleCardGetWithHttpInfo(string? page = default(string?), string? tabname = default(string?), string? name = default(string?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (tabname != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "tabname", tabname));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetSingleCardSdExtraNetworksGetSingleCardGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sd_extra_networks/get-single-card", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSingleCardSdExtraNetworksGetSingleCardGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Single Card 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="tabname"> (optional, default to &quot;&quot;)</param>
        /// <param name="name"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSingleCardSdExtraNetworksGetSingleCardGetAsync(string? page = default(string?), string? tabname = default(string?), string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetSingleCardSdExtraNetworksGetSingleCardGetWithHttpInfoAsync(page, tabname, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Card 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to &quot;&quot;)</param>
        /// <param name="tabname"> (optional, default to &quot;&quot;)</param>
        /// <param name="name"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetSingleCardSdExtraNetworksGetSingleCardGetWithHttpInfoAsync(string? page = default(string?), string? tabname = default(string?), string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (tabname != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "tabname", tabname));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetSingleCardSdExtraNetworksGetSingleCardGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sd_extra_networks/get-single-card", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSingleCardSdExtraNetworksGetSingleCardGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Thumb Preview Blob 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet(Object filename, Object type, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGetWithHttpInfo(filename, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Thumb Preview Blob 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGetWithHttpInfo(Object filename, Object type, int operationIndex = 0)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'filename' when calling DefaultApi->GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'type' when calling DefaultApi->GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", SdWebUiApi.Client.ClientUtils.ParameterToString(filename)); // path parameter
            localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "DefaultApi.GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/tacapi/v1/thumb-preview-blob/{filename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Thumb Preview Blob 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGetAsync(Object filename, Object type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGetWithHttpInfoAsync(filename, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Thumb Preview Blob 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGetWithHttpInfoAsync(Object filename, Object type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'filename' when calling DefaultApi->GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'type' when calling DefaultApi->GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", SdWebUiApi.Client.ClientUtils.ParameterToString(filename)); // path parameter
            localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "DefaultApi.GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/tacapi/v1/thumb-preview-blob/{filename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThumbPreviewBlobTacapiV1ThumbPreviewBlobFilenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Thumb Preview 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetThumbPreviewTacapiV1ThumbPreviewFilenameGet(Object filename, Object type, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetThumbPreviewTacapiV1ThumbPreviewFilenameGetWithHttpInfo(filename, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Thumb Preview 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetThumbPreviewTacapiV1ThumbPreviewFilenameGetWithHttpInfo(Object filename, Object type, int operationIndex = 0)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'filename' when calling DefaultApi->GetThumbPreviewTacapiV1ThumbPreviewFilenameGet");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'type' when calling DefaultApi->GetThumbPreviewTacapiV1ThumbPreviewFilenameGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", SdWebUiApi.Client.ClientUtils.ParameterToString(filename)); // path parameter
            localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "DefaultApi.GetThumbPreviewTacapiV1ThumbPreviewFilenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/tacapi/v1/thumb-preview/{filename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThumbPreviewTacapiV1ThumbPreviewFilenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Thumb Preview 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetThumbPreviewTacapiV1ThumbPreviewFilenameGetAsync(Object filename, Object type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetThumbPreviewTacapiV1ThumbPreviewFilenameGetWithHttpInfoAsync(filename, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Thumb Preview 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetThumbPreviewTacapiV1ThumbPreviewFilenameGetWithHttpInfoAsync(Object filename, Object type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'filename' when calling DefaultApi->GetThumbPreviewTacapiV1ThumbPreviewFilenameGet");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'type' when calling DefaultApi->GetThumbPreviewTacapiV1ThumbPreviewFilenameGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", SdWebUiApi.Client.ClientUtils.ParameterToString(filename)); // path parameter
            localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "DefaultApi.GetThumbPreviewTacapiV1ThumbPreviewFilenameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/tacapi/v1/thumb-preview/{filename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThumbPreviewTacapiV1ThumbPreviewFilenameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Token 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetTokenTokenGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetTokenTokenGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetTokenTokenGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetTokenTokenGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/token/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenTokenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Token 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetTokenTokenGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetTokenTokenGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetTokenTokenGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetTokenTokenGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/token/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenTokenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Token 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetTokenTokenGet_0(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetTokenTokenGet_0WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetTokenTokenGet_0WithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetTokenTokenGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenTokenGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Token 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetTokenTokenGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetTokenTokenGet_0WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetTokenTokenGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetTokenTokenGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenTokenGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Upscalers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UpscalerItem&gt;</returns>
        public List<UpscalerItem> GetUpscalersSdapiV1UpscalersGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<UpscalerItem>> localVarResponse = GetUpscalersSdapiV1UpscalersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Upscalers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UpscalerItem&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<UpscalerItem>> GetUpscalersSdapiV1UpscalersGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetUpscalersSdapiV1UpscalersGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UpscalerItem>>("/sdapi/v1/upscalers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUpscalersSdapiV1UpscalersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Upscalers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UpscalerItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<UpscalerItem>> GetUpscalersSdapiV1UpscalersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<UpscalerItem>> localVarResponse = await GetUpscalersSdapiV1UpscalersGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Upscalers 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UpscalerItem&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<UpscalerItem>>> GetUpscalersSdapiV1UpscalersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetUpscalersSdapiV1UpscalersGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UpscalerItem>>("/sdapi/v1/upscalers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUpscalersSdapiV1UpscalersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Wildcard Contents 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basepath"></param>
        /// <param name="filename"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetWildcardContentsTacapiV1WildcardContentsGet(string basepath, string filename, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = GetWildcardContentsTacapiV1WildcardContentsGetWithHttpInfo(basepath, filename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Wildcard Contents 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basepath"></param>
        /// <param name="filename"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> GetWildcardContentsTacapiV1WildcardContentsGetWithHttpInfo(string basepath, string filename, int operationIndex = 0)
        {
            // verify the required parameter 'basepath' is set
            if (basepath == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'basepath' when calling DefaultApi->GetWildcardContentsTacapiV1WildcardContentsGet");
            }

            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'filename' when calling DefaultApi->GetWildcardContentsTacapiV1WildcardContentsGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "basepath", basepath));
            localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));

            localVarRequestOptions.Operation = "DefaultApi.GetWildcardContentsTacapiV1WildcardContentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/tacapi/v1/wildcard-contents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWildcardContentsTacapiV1WildcardContentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Wildcard Contents 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basepath"></param>
        /// <param name="filename"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetWildcardContentsTacapiV1WildcardContentsGetAsync(string basepath, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await GetWildcardContentsTacapiV1WildcardContentsGetWithHttpInfoAsync(basepath, filename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Wildcard Contents 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basepath"></param>
        /// <param name="filename"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> GetWildcardContentsTacapiV1WildcardContentsGetWithHttpInfoAsync(string basepath, string filename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'basepath' is set
            if (basepath == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'basepath' when calling DefaultApi->GetWildcardContentsTacapiV1WildcardContentsGet");
            }

            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'filename' when calling DefaultApi->GetWildcardContentsTacapiV1WildcardContentsGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "basepath", basepath));
            localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));

            localVarRequestOptions.Operation = "DefaultApi.GetWildcardContentsTacapiV1WildcardContentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/tacapi/v1/wildcard-contents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWildcardContentsTacapiV1WildcardContentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Img2Imgapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingImg2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImageToImageResponse</returns>
        public ImageToImageResponse Img2imgapiSdapiV1Img2imgPost(StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<ImageToImageResponse> localVarResponse = Img2imgapiSdapiV1Img2imgPostWithHttpInfo(stableDiffusionProcessingImg2Img);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Img2Imgapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingImg2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImageToImageResponse</returns>
        public SdWebUiApi.Client.ApiResponse<ImageToImageResponse> Img2imgapiSdapiV1Img2imgPostWithHttpInfo(StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img, int operationIndex = 0)
        {
            // verify the required parameter 'stableDiffusionProcessingImg2Img' is set
            if (stableDiffusionProcessingImg2Img == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'stableDiffusionProcessingImg2Img' when calling DefaultApi->Img2imgapiSdapiV1Img2imgPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = stableDiffusionProcessingImg2Img;

            localVarRequestOptions.Operation = "DefaultApi.Img2imgapiSdapiV1Img2imgPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageToImageResponse>("/sdapi/v1/img2img", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Img2imgapiSdapiV1Img2imgPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Img2Imgapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingImg2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageToImageResponse</returns>
        public async System.Threading.Tasks.Task<ImageToImageResponse> Img2imgapiSdapiV1Img2imgPostAsync(StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<ImageToImageResponse> localVarResponse = await Img2imgapiSdapiV1Img2imgPostWithHttpInfoAsync(stableDiffusionProcessingImg2Img, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Img2Imgapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingImg2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageToImageResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<ImageToImageResponse>> Img2imgapiSdapiV1Img2imgPostWithHttpInfoAsync(StableDiffusionProcessingImg2Img stableDiffusionProcessingImg2Img, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stableDiffusionProcessingImg2Img' is set
            if (stableDiffusionProcessingImg2Img == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'stableDiffusionProcessingImg2Img' when calling DefaultApi->Img2imgapiSdapiV1Img2imgPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = stableDiffusionProcessingImg2Img;

            localVarRequestOptions.Operation = "DefaultApi.Img2imgapiSdapiV1Img2imgPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImageToImageResponse>("/sdapi/v1/img2img", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Img2imgapiSdapiV1Img2imgPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interrogateapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interrogateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object InterrogateapiSdapiV1InterrogatePost(InterrogateRequest interrogateRequest, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = InterrogateapiSdapiV1InterrogatePostWithHttpInfo(interrogateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Interrogateapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interrogateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> InterrogateapiSdapiV1InterrogatePostWithHttpInfo(InterrogateRequest interrogateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'interrogateRequest' is set
            if (interrogateRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'interrogateRequest' when calling DefaultApi->InterrogateapiSdapiV1InterrogatePost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = interrogateRequest;

            localVarRequestOptions.Operation = "DefaultApi.InterrogateapiSdapiV1InterrogatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/interrogate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterrogateapiSdapiV1InterrogatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interrogateapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interrogateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> InterrogateapiSdapiV1InterrogatePostAsync(InterrogateRequest interrogateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await InterrogateapiSdapiV1InterrogatePostWithHttpInfoAsync(interrogateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Interrogateapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interrogateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> InterrogateapiSdapiV1InterrogatePostWithHttpInfoAsync(InterrogateRequest interrogateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'interrogateRequest' is set
            if (interrogateRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'interrogateRequest' when calling DefaultApi->InterrogateapiSdapiV1InterrogatePost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = interrogateRequest;

            localVarRequestOptions.Operation = "DefaultApi.InterrogateapiSdapiV1InterrogatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/interrogate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterrogateapiSdapiV1InterrogatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interruptapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object InterruptapiSdapiV1InterruptPost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = InterruptapiSdapiV1InterruptPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Interruptapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> InterruptapiSdapiV1InterruptPostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.InterruptapiSdapiV1InterruptPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/interrupt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterruptapiSdapiV1InterruptPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interruptapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> InterruptapiSdapiV1InterruptPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await InterruptapiSdapiV1InterruptPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Interruptapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> InterruptapiSdapiV1InterruptPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.InterruptapiSdapiV1InterruptPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/interrupt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterruptapiSdapiV1InterruptPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LambdaInternalPingGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = LambdaInternalPingGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> LambdaInternalPingGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LambdaInternalPingGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/internal/ping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LambdaInternalPingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LambdaInternalPingGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await LambdaInternalPingGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> LambdaInternalPingGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LambdaInternalPingGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/internal/ping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LambdaInternalPingGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LambdaInternalProfileStartupGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = LambdaInternalProfileStartupGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> LambdaInternalProfileStartupGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LambdaInternalProfileStartupGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/internal/profile-startup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LambdaInternalProfileStartupGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LambdaInternalProfileStartupGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await LambdaInternalProfileStartupGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> LambdaInternalProfileStartupGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LambdaInternalProfileStartupGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/internal/profile-startup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LambdaInternalProfileStartupGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LambdaInternalSysinfoDownloadGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = LambdaInternalSysinfoDownloadGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> LambdaInternalSysinfoDownloadGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LambdaInternalSysinfoDownloadGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/internal/sysinfo-download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LambdaInternalSysinfoDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LambdaInternalSysinfoDownloadGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await LambdaInternalSysinfoDownloadGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// &lt;Lambda&gt; 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> LambdaInternalSysinfoDownloadGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LambdaInternalSysinfoDownloadGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/internal/sysinfo-download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LambdaInternalSysinfoDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login Check 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LoginCheckLoginCheckGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = LoginCheckLoginCheckGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login Check 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> LoginCheckLoginCheckGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LoginCheckLoginCheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/login_check/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginCheckLoginCheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login Check 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LoginCheckLoginCheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await LoginCheckLoginCheckGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login Check 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> LoginCheckLoginCheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LoginCheckLoginCheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/login_check/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginCheckLoginCheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login Check 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LoginCheckLoginCheckGet_0(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = LoginCheckLoginCheckGet_0WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login Check 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> LoginCheckLoginCheckGet_0WithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LoginCheckLoginCheckGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/login_check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginCheckLoginCheckGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login Check 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LoginCheckLoginCheckGet_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await LoginCheckLoginCheckGet_0WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login Check 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> LoginCheckLoginCheckGet_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.LoginCheckLoginCheckGet_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/login_check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginCheckLoginCheckGet_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LoginLoginPost(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = LoginLoginPostWithHttpInfo(username, password, grantType, scope, clientId, clientSecret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> LoginLoginPostWithHttpInfo(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->LoginLoginPost");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->LoginLoginPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", SdWebUiApi.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("username", SdWebUiApi.Client.ClientUtils.ParameterToString(username)); // form parameter
            localVarRequestOptions.FormParameters.Add("password", SdWebUiApi.Client.ClientUtils.ParameterToString(password)); // form parameter
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", SdWebUiApi.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", SdWebUiApi.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", SdWebUiApi.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.LoginLoginPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/login/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginLoginPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LoginLoginPostAsync(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await LoginLoginPostWithHttpInfoAsync(username, password, grantType, scope, clientId, clientSecret, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> LoginLoginPostWithHttpInfoAsync(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->LoginLoginPost");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->LoginLoginPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", SdWebUiApi.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("username", SdWebUiApi.Client.ClientUtils.ParameterToString(username)); // form parameter
            localVarRequestOptions.FormParameters.Add("password", SdWebUiApi.Client.ClientUtils.ParameterToString(password)); // form parameter
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", SdWebUiApi.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", SdWebUiApi.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", SdWebUiApi.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.LoginLoginPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/login/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginLoginPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LoginLoginPost_0(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = LoginLoginPost_0WithHttpInfo(username, password, grantType, scope, clientId, clientSecret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> LoginLoginPost_0WithHttpInfo(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->LoginLoginPost_0");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->LoginLoginPost_0");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", SdWebUiApi.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("username", SdWebUiApi.Client.ClientUtils.ParameterToString(username)); // form parameter
            localVarRequestOptions.FormParameters.Add("password", SdWebUiApi.Client.ClientUtils.ParameterToString(password)); // form parameter
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", SdWebUiApi.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", SdWebUiApi.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", SdWebUiApi.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.LoginLoginPost_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginLoginPost_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LoginLoginPost_0Async(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await LoginLoginPost_0WithHttpInfoAsync(username, password, grantType, scope, clientId, clientSecret, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional, default to &quot;&quot;)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> LoginLoginPost_0WithHttpInfoAsync(string username, string password, string? grantType = default(string?), string? scope = default(string?), string? clientId = default(string?), string? clientSecret = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->LoginLoginPost_0");
            }

            // verify the required parameter 'password' is set
            if (password == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->LoginLoginPost_0");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", SdWebUiApi.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("username", SdWebUiApi.Client.ClientUtils.ParameterToString(username)); // form parameter
            localVarRequestOptions.FormParameters.Add("password", SdWebUiApi.Client.ClientUtils.ParameterToString(password)); // form parameter
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", SdWebUiApi.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", SdWebUiApi.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", SdWebUiApi.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.LoginLoginPost_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginLoginPost_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Main 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string MainGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = MainGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Main 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SdWebUiApi.Client.ApiResponse<string> MainGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.MainGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MainGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Main 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> MainGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = await MainGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Main 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<string>> MainGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.MainGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MainGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Main 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string MainHead(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = MainHeadWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Main 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SdWebUiApi.Client.ApiResponse<string> MainHeadWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.MainHead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Head<string>("/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MainHead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Main 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> MainHeadAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = await MainHeadWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Main 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<string>> MainHeadWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.MainHead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.HeadAsync<string>("/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MainHead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Model List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModelListControlnetModelListGet(bool? update = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ModelListControlnetModelListGetWithHttpInfo(update);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Model List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ModelListControlnetModelListGetWithHttpInfo(bool? update = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (update != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "update", update));
            }

            localVarRequestOptions.Operation = "DefaultApi.ModelListControlnetModelListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/controlnet/model_list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelListControlnetModelListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Model List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModelListControlnetModelListGetAsync(bool? update = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ModelListControlnetModelListGetWithHttpInfoAsync(update, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Model List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="update"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ModelListControlnetModelListGetWithHttpInfoAsync(bool? update = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (update != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "update", update));
            }

            localVarRequestOptions.Operation = "DefaultApi.ModelListControlnetModelListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/controlnet/model_list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelListControlnetModelListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Module List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasNames"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModuleListControlnetModuleListGet(bool? aliasNames = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ModuleListControlnetModuleListGetWithHttpInfo(aliasNames);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Module List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasNames"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ModuleListControlnetModuleListGetWithHttpInfo(bool? aliasNames = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aliasNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "alias_names", aliasNames));
            }

            localVarRequestOptions.Operation = "DefaultApi.ModuleListControlnetModuleListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/controlnet/module_list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModuleListControlnetModuleListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Module List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasNames"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModuleListControlnetModuleListGetAsync(bool? aliasNames = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ModuleListControlnetModuleListGetWithHttpInfoAsync(aliasNames, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Module List 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasNames"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ModuleListControlnetModuleListGetWithHttpInfoAsync(bool? aliasNames = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aliasNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "alias_names", aliasNames));
            }

            localVarRequestOptions.Operation = "DefaultApi.ModuleListControlnetModuleListGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/controlnet/module_list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModuleListControlnetModuleListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pnginfoapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pNGInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PNGInfoResponse</returns>
        public PNGInfoResponse PnginfoapiSdapiV1PngInfoPost(PNGInfoRequest pNGInfoRequest, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<PNGInfoResponse> localVarResponse = PnginfoapiSdapiV1PngInfoPostWithHttpInfo(pNGInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pnginfoapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pNGInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PNGInfoResponse</returns>
        public SdWebUiApi.Client.ApiResponse<PNGInfoResponse> PnginfoapiSdapiV1PngInfoPostWithHttpInfo(PNGInfoRequest pNGInfoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'pNGInfoRequest' is set
            if (pNGInfoRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'pNGInfoRequest' when calling DefaultApi->PnginfoapiSdapiV1PngInfoPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pNGInfoRequest;

            localVarRequestOptions.Operation = "DefaultApi.PnginfoapiSdapiV1PngInfoPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PNGInfoResponse>("/sdapi/v1/png-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PnginfoapiSdapiV1PngInfoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pnginfoapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pNGInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PNGInfoResponse</returns>
        public async System.Threading.Tasks.Task<PNGInfoResponse> PnginfoapiSdapiV1PngInfoPostAsync(PNGInfoRequest pNGInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<PNGInfoResponse> localVarResponse = await PnginfoapiSdapiV1PngInfoPostWithHttpInfoAsync(pNGInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pnginfoapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pNGInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PNGInfoResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<PNGInfoResponse>> PnginfoapiSdapiV1PngInfoPostWithHttpInfoAsync(PNGInfoRequest pNGInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pNGInfoRequest' is set
            if (pNGInfoRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'pNGInfoRequest' when calling DefaultApi->PnginfoapiSdapiV1PngInfoPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pNGInfoRequest;

            localVarRequestOptions.Operation = "DefaultApi.PnginfoapiSdapiV1PngInfoPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PNGInfoResponse>("/sdapi/v1/png-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PnginfoapiSdapiV1PngInfoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PredictApiApiNamePost(string apiName, PredictBody predictBody, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = PredictApiApiNamePostWithHttpInfo(apiName, predictBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> PredictApiApiNamePostWithHttpInfo(string apiName, PredictBody predictBody, int operationIndex = 0)
        {
            // verify the required parameter 'apiName' is set
            if (apiName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'apiName' when calling DefaultApi->PredictApiApiNamePost");
            }

            // verify the required parameter 'predictBody' is set
            if (predictBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'predictBody' when calling DefaultApi->PredictApiApiNamePost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_name", SdWebUiApi.Client.ClientUtils.ParameterToString(apiName)); // path parameter
            localVarRequestOptions.Data = predictBody;

            localVarRequestOptions.Operation = "DefaultApi.PredictApiApiNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/{api_name}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictApiApiNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PredictApiApiNamePostAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await PredictApiApiNamePostWithHttpInfoAsync(apiName, predictBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> PredictApiApiNamePostWithHttpInfoAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiName' is set
            if (apiName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'apiName' when calling DefaultApi->PredictApiApiNamePost");
            }

            // verify the required parameter 'predictBody' is set
            if (predictBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'predictBody' when calling DefaultApi->PredictApiApiNamePost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_name", SdWebUiApi.Client.ClientUtils.ParameterToString(apiName)); // path parameter
            localVarRequestOptions.Data = predictBody;

            localVarRequestOptions.Operation = "DefaultApi.PredictApiApiNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/{api_name}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictApiApiNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PredictApiApiNamePost_0(string apiName, PredictBody predictBody, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = PredictApiApiNamePost_0WithHttpInfo(apiName, predictBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> PredictApiApiNamePost_0WithHttpInfo(string apiName, PredictBody predictBody, int operationIndex = 0)
        {
            // verify the required parameter 'apiName' is set
            if (apiName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'apiName' when calling DefaultApi->PredictApiApiNamePost_0");
            }

            // verify the required parameter 'predictBody' is set
            if (predictBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'predictBody' when calling DefaultApi->PredictApiApiNamePost_0");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_name", SdWebUiApi.Client.ClientUtils.ParameterToString(apiName)); // path parameter
            localVarRequestOptions.Data = predictBody;

            localVarRequestOptions.Operation = "DefaultApi.PredictApiApiNamePost_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/{api_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictApiApiNamePost_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PredictApiApiNamePost_0Async(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await PredictApiApiNamePost_0WithHttpInfoAsync(apiName, predictBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> PredictApiApiNamePost_0WithHttpInfoAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiName' is set
            if (apiName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'apiName' when calling DefaultApi->PredictApiApiNamePost_0");
            }

            // verify the required parameter 'predictBody' is set
            if (predictBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'predictBody' when calling DefaultApi->PredictApiApiNamePost_0");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_name", SdWebUiApi.Client.ClientUtils.ParameterToString(apiName)); // path parameter
            localVarRequestOptions.Data = predictBody;

            localVarRequestOptions.Operation = "DefaultApi.PredictApiApiNamePost_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/{api_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictApiApiNamePost_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PredictRunApiNamePost(string apiName, PredictBody predictBody, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = PredictRunApiNamePostWithHttpInfo(apiName, predictBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> PredictRunApiNamePostWithHttpInfo(string apiName, PredictBody predictBody, int operationIndex = 0)
        {
            // verify the required parameter 'apiName' is set
            if (apiName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'apiName' when calling DefaultApi->PredictRunApiNamePost");
            }

            // verify the required parameter 'predictBody' is set
            if (predictBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'predictBody' when calling DefaultApi->PredictRunApiNamePost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_name", SdWebUiApi.Client.ClientUtils.ParameterToString(apiName)); // path parameter
            localVarRequestOptions.Data = predictBody;

            localVarRequestOptions.Operation = "DefaultApi.PredictRunApiNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/run/{api_name}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictRunApiNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PredictRunApiNamePostAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await PredictRunApiNamePostWithHttpInfoAsync(apiName, predictBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> PredictRunApiNamePostWithHttpInfoAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiName' is set
            if (apiName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'apiName' when calling DefaultApi->PredictRunApiNamePost");
            }

            // verify the required parameter 'predictBody' is set
            if (predictBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'predictBody' when calling DefaultApi->PredictRunApiNamePost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_name", SdWebUiApi.Client.ClientUtils.ParameterToString(apiName)); // path parameter
            localVarRequestOptions.Data = predictBody;

            localVarRequestOptions.Operation = "DefaultApi.PredictRunApiNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/run/{api_name}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictRunApiNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PredictRunApiNamePost_0(string apiName, PredictBody predictBody, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = PredictRunApiNamePost_0WithHttpInfo(apiName, predictBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> PredictRunApiNamePost_0WithHttpInfo(string apiName, PredictBody predictBody, int operationIndex = 0)
        {
            // verify the required parameter 'apiName' is set
            if (apiName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'apiName' when calling DefaultApi->PredictRunApiNamePost_0");
            }

            // verify the required parameter 'predictBody' is set
            if (predictBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'predictBody' when calling DefaultApi->PredictRunApiNamePost_0");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_name", SdWebUiApi.Client.ClientUtils.ParameterToString(apiName)); // path parameter
            localVarRequestOptions.Data = predictBody;

            localVarRequestOptions.Operation = "DefaultApi.PredictRunApiNamePost_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/run/{api_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictRunApiNamePost_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PredictRunApiNamePost_0Async(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await PredictRunApiNamePost_0WithHttpInfoAsync(apiName, predictBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Predict 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiName"></param>
        /// <param name="predictBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> PredictRunApiNamePost_0WithHttpInfoAsync(string apiName, PredictBody predictBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiName' is set
            if (apiName == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'apiName' when calling DefaultApi->PredictRunApiNamePost_0");
            }

            // verify the required parameter 'predictBody' is set
            if (predictBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'predictBody' when calling DefaultApi->PredictRunApiNamePost_0");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_name", SdWebUiApi.Client.ClientUtils.ParameterToString(apiName)); // path parameter
            localVarRequestOptions.Data = predictBody;

            localVarRequestOptions.Operation = "DefaultApi.PredictRunApiNamePost_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/run/{api_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictRunApiNamePost_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preprocess 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreprocessResponse</returns>
        public PreprocessResponse PreprocessSdapiV1PreprocessPost(Object body, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<PreprocessResponse> localVarResponse = PreprocessSdapiV1PreprocessPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preprocess 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreprocessResponse</returns>
        public SdWebUiApi.Client.ApiResponse<PreprocessResponse> PreprocessSdapiV1PreprocessPostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PreprocessSdapiV1PreprocessPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.PreprocessSdapiV1PreprocessPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PreprocessResponse>("/sdapi/v1/preprocess", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreprocessSdapiV1PreprocessPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preprocess 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreprocessResponse</returns>
        public async System.Threading.Tasks.Task<PreprocessResponse> PreprocessSdapiV1PreprocessPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<PreprocessResponse> localVarResponse = await PreprocessSdapiV1PreprocessPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preprocess 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<PreprocessResponse>> PreprocessSdapiV1PreprocessPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PreprocessSdapiV1PreprocessPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.PreprocessSdapiV1PreprocessPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PreprocessResponse>("/sdapi/v1/preprocess", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreprocessSdapiV1PreprocessPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Progressapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="progressRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModulesProgressProgressResponse</returns>
        public ModulesProgressProgressResponse ProgressapiInternalProgressPost(ProgressRequest progressRequest, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<ModulesProgressProgressResponse> localVarResponse = ProgressapiInternalProgressPostWithHttpInfo(progressRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Progressapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="progressRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModulesProgressProgressResponse</returns>
        public SdWebUiApi.Client.ApiResponse<ModulesProgressProgressResponse> ProgressapiInternalProgressPostWithHttpInfo(ProgressRequest progressRequest, int operationIndex = 0)
        {
            // verify the required parameter 'progressRequest' is set
            if (progressRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'progressRequest' when calling DefaultApi->ProgressapiInternalProgressPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = progressRequest;

            localVarRequestOptions.Operation = "DefaultApi.ProgressapiInternalProgressPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ModulesProgressProgressResponse>("/internal/progress", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProgressapiInternalProgressPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Progressapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="progressRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModulesProgressProgressResponse</returns>
        public async System.Threading.Tasks.Task<ModulesProgressProgressResponse> ProgressapiInternalProgressPostAsync(ProgressRequest progressRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<ModulesProgressProgressResponse> localVarResponse = await ProgressapiInternalProgressPostWithHttpInfoAsync(progressRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Progressapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="progressRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModulesProgressProgressResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<ModulesProgressProgressResponse>> ProgressapiInternalProgressPostWithHttpInfoAsync(ProgressRequest progressRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'progressRequest' is set
            if (progressRequest == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'progressRequest' when calling DefaultApi->ProgressapiInternalProgressPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = progressRequest;

            localVarRequestOptions.Operation = "DefaultApi.ProgressapiInternalProgressPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModulesProgressProgressResponse>("/internal/progress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProgressapiInternalProgressPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Progressapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skipCurrentImage"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModulesApiModelsProgressResponse</returns>
        public ModulesApiModelsProgressResponse ProgressapiSdapiV1ProgressGet(bool? skipCurrentImage = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<ModulesApiModelsProgressResponse> localVarResponse = ProgressapiSdapiV1ProgressGetWithHttpInfo(skipCurrentImage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Progressapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skipCurrentImage"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModulesApiModelsProgressResponse</returns>
        public SdWebUiApi.Client.ApiResponse<ModulesApiModelsProgressResponse> ProgressapiSdapiV1ProgressGetWithHttpInfo(bool? skipCurrentImage = default(bool?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (skipCurrentImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "skip_current_image", skipCurrentImage));
            }

            localVarRequestOptions.Operation = "DefaultApi.ProgressapiSdapiV1ProgressGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ModulesApiModelsProgressResponse>("/sdapi/v1/progress", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProgressapiSdapiV1ProgressGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Progressapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skipCurrentImage"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModulesApiModelsProgressResponse</returns>
        public async System.Threading.Tasks.Task<ModulesApiModelsProgressResponse> ProgressapiSdapiV1ProgressGetAsync(bool? skipCurrentImage = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<ModulesApiModelsProgressResponse> localVarResponse = await ProgressapiSdapiV1ProgressGetWithHttpInfoAsync(skipCurrentImage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Progressapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skipCurrentImage"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModulesApiModelsProgressResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<ModulesApiModelsProgressResponse>> ProgressapiSdapiV1ProgressGetWithHttpInfoAsync(bool? skipCurrentImage = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (skipCurrentImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(SdWebUiApi.Client.ClientUtils.ParameterToMultiMap("", "skip_current_image", skipCurrentImage));
            }

            localVarRequestOptions.Operation = "DefaultApi.ProgressapiSdapiV1ProgressGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModulesApiModelsProgressResponse>("/sdapi/v1/progress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProgressapiSdapiV1ProgressGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Quicksettings Hint 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;QuicksettingsHint&gt;</returns>
        public List<QuicksettingsHint> QuicksettingsHintInternalQuicksettingsHintGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<List<QuicksettingsHint>> localVarResponse = QuicksettingsHintInternalQuicksettingsHintGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quicksettings Hint 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;QuicksettingsHint&gt;</returns>
        public SdWebUiApi.Client.ApiResponse<List<QuicksettingsHint>> QuicksettingsHintInternalQuicksettingsHintGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.QuicksettingsHintInternalQuicksettingsHintGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<QuicksettingsHint>>("/internal/quicksettings-hint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QuicksettingsHintInternalQuicksettingsHintGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Quicksettings Hint 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;QuicksettingsHint&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuicksettingsHint>> QuicksettingsHintInternalQuicksettingsHintGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<List<QuicksettingsHint>> localVarResponse = await QuicksettingsHintInternalQuicksettingsHintGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quicksettings Hint 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;QuicksettingsHint&gt;)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<List<QuicksettingsHint>>> QuicksettingsHintInternalQuicksettingsHintGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.QuicksettingsHintInternalQuicksettingsHintGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<QuicksettingsHint>>("/internal/quicksettings-hint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QuicksettingsHintInternalQuicksettingsHintGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Checkpoints 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RefreshCheckpointsSdapiV1RefreshCheckpointsPost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Checkpoints 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.RefreshCheckpointsSdapiV1RefreshCheckpointsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/refresh-checkpoints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshCheckpointsSdapiV1RefreshCheckpointsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Checkpoints 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RefreshCheckpointsSdapiV1RefreshCheckpointsPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Checkpoints 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> RefreshCheckpointsSdapiV1RefreshCheckpointsPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.RefreshCheckpointsSdapiV1RefreshCheckpointsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/refresh-checkpoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshCheckpointsSdapiV1RefreshCheckpointsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Loras 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RefreshLorasSdapiV1RefreshLorasPost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = RefreshLorasSdapiV1RefreshLorasPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Loras 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> RefreshLorasSdapiV1RefreshLorasPostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.RefreshLorasSdapiV1RefreshLorasPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/refresh-loras", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshLorasSdapiV1RefreshLorasPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Loras 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RefreshLorasSdapiV1RefreshLorasPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await RefreshLorasSdapiV1RefreshLorasPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Loras 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> RefreshLorasSdapiV1RefreshLorasPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.RefreshLorasSdapiV1RefreshLorasPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/refresh-loras", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshLorasSdapiV1RefreshLorasPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Vae 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RefreshVaeSdapiV1RefreshVaePost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = RefreshVaeSdapiV1RefreshVaePostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Vae 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> RefreshVaeSdapiV1RefreshVaePostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.RefreshVaeSdapiV1RefreshVaePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/refresh-vae", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshVaeSdapiV1RefreshVaePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Vae 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RefreshVaeSdapiV1RefreshVaePostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await RefreshVaeSdapiV1RefreshVaePostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Vae 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> RefreshVaeSdapiV1RefreshVaePostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.RefreshVaeSdapiV1RefreshVaePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/refresh-vae", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshVaeSdapiV1RefreshVaePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reloadapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ReloadapiSdapiV1ReloadCheckpointPost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ReloadapiSdapiV1ReloadCheckpointPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reloadapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ReloadapiSdapiV1ReloadCheckpointPostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ReloadapiSdapiV1ReloadCheckpointPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/reload-checkpoint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReloadapiSdapiV1ReloadCheckpointPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reloadapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReloadapiSdapiV1ReloadCheckpointPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ReloadapiSdapiV1ReloadCheckpointPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reloadapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ReloadapiSdapiV1ReloadCheckpointPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ReloadapiSdapiV1ReloadCheckpointPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/reload-checkpoint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReloadapiSdapiV1ReloadCheckpointPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rembg Remove 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRembgRemoveRembgPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RembgRemoveRembgPost(BodyRembgRemoveRembgPost? bodyRembgRemoveRembgPost = default(BodyRembgRemoveRembgPost?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = RembgRemoveRembgPostWithHttpInfo(bodyRembgRemoveRembgPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rembg Remove 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRembgRemoveRembgPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> RembgRemoveRembgPostWithHttpInfo(BodyRembgRemoveRembgPost? bodyRembgRemoveRembgPost = default(BodyRembgRemoveRembgPost?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyRembgRemoveRembgPost;

            localVarRequestOptions.Operation = "DefaultApi.RembgRemoveRembgPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rembg", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RembgRemoveRembgPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rembg Remove 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRembgRemoveRembgPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RembgRemoveRembgPostAsync(BodyRembgRemoveRembgPost? bodyRembgRemoveRembgPost = default(BodyRembgRemoveRembgPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await RembgRemoveRembgPostWithHttpInfoAsync(bodyRembgRemoveRembgPost, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rembg Remove 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRembgRemoveRembgPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> RembgRemoveRembgPostWithHttpInfoAsync(BodyRembgRemoveRembgPost? bodyRembgRemoveRembgPost = default(BodyRembgRemoveRembgPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bodyRembgRemoveRembgPost;

            localVarRequestOptions.Operation = "DefaultApi.RembgRemoveRembgPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rembg", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RembgRemoveRembgPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Render Openpose Json 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poseData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RenderOpenposeJsonControlnetRenderOpenposeJsonPost(List<PoseData>? poseData = default(List<PoseData>?), int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = RenderOpenposeJsonControlnetRenderOpenposeJsonPostWithHttpInfo(poseData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Render Openpose Json 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poseData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> RenderOpenposeJsonControlnetRenderOpenposeJsonPostWithHttpInfo(List<PoseData>? poseData = default(List<PoseData>?), int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = poseData;

            localVarRequestOptions.Operation = "DefaultApi.RenderOpenposeJsonControlnetRenderOpenposeJsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/controlnet/render_openpose_json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenderOpenposeJsonControlnetRenderOpenposeJsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Render Openpose Json 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poseData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RenderOpenposeJsonControlnetRenderOpenposeJsonPostAsync(List<PoseData>? poseData = default(List<PoseData>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await RenderOpenposeJsonControlnetRenderOpenposeJsonPostWithHttpInfoAsync(poseData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Render Openpose Json 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poseData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> RenderOpenposeJsonControlnetRenderOpenposeJsonPostWithHttpInfoAsync(List<PoseData>? poseData = default(List<PoseData>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = poseData;

            localVarRequestOptions.Operation = "DefaultApi.RenderOpenposeJsonControlnetRenderOpenposeJsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/controlnet/render_openpose_json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenderOpenposeJsonControlnetRenderOpenposeJsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Iterator 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ResetIteratorResetPost(ResetBody resetBody, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ResetIteratorResetPostWithHttpInfo(resetBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Iterator 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ResetIteratorResetPostWithHttpInfo(ResetBody resetBody, int operationIndex = 0)
        {
            // verify the required parameter 'resetBody' is set
            if (resetBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'resetBody' when calling DefaultApi->ResetIteratorResetPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resetBody;

            localVarRequestOptions.Operation = "DefaultApi.ResetIteratorResetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/reset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetIteratorResetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Iterator 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ResetIteratorResetPostAsync(ResetBody resetBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ResetIteratorResetPostWithHttpInfoAsync(resetBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Iterator 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ResetIteratorResetPostWithHttpInfoAsync(ResetBody resetBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resetBody' is set
            if (resetBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'resetBody' when calling DefaultApi->ResetIteratorResetPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resetBody;

            localVarRequestOptions.Operation = "DefaultApi.ResetIteratorResetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetIteratorResetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Iterator 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ResetIteratorResetPost_0(ResetBody resetBody, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ResetIteratorResetPost_0WithHttpInfo(resetBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Iterator 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ResetIteratorResetPost_0WithHttpInfo(ResetBody resetBody, int operationIndex = 0)
        {
            // verify the required parameter 'resetBody' is set
            if (resetBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'resetBody' when calling DefaultApi->ResetIteratorResetPost_0");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resetBody;

            localVarRequestOptions.Operation = "DefaultApi.ResetIteratorResetPost_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/reset/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetIteratorResetPost_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset Iterator 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ResetIteratorResetPost_0Async(ResetBody resetBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ResetIteratorResetPost_0WithHttpInfoAsync(resetBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Iterator 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ResetIteratorResetPost_0WithHttpInfoAsync(ResetBody resetBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resetBody' is set
            if (resetBody == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'resetBody' when calling DefaultApi->ResetIteratorResetPost_0");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resetBody;

            localVarRequestOptions.Operation = "DefaultApi.ResetIteratorResetPost_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/reset/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetIteratorResetPost_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverse Proxy 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ReverseProxyProxyUrlPathGet(string urlPath, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ReverseProxyProxyUrlPathGetWithHttpInfo(urlPath);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse Proxy 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ReverseProxyProxyUrlPathGetWithHttpInfo(string urlPath, int operationIndex = 0)
        {
            // verify the required parameter 'urlPath' is set
            if (urlPath == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'urlPath' when calling DefaultApi->ReverseProxyProxyUrlPathGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("url_path", SdWebUiApi.Client.ClientUtils.ParameterToString(urlPath)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ReverseProxyProxyUrlPathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/proxy={url_path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReverseProxyProxyUrlPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverse Proxy 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReverseProxyProxyUrlPathGetAsync(string urlPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ReverseProxyProxyUrlPathGetWithHttpInfoAsync(urlPath, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse Proxy 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ReverseProxyProxyUrlPathGetWithHttpInfoAsync(string urlPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlPath' is set
            if (urlPath == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'urlPath' when calling DefaultApi->ReverseProxyProxyUrlPathGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("url_path", SdWebUiApi.Client.ClientUtils.ParameterToString(urlPath)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ReverseProxyProxyUrlPathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/proxy={url_path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReverseProxyProxyUrlPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverse Proxy 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ReverseProxyProxyUrlPathHead(string urlPath, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = ReverseProxyProxyUrlPathHeadWithHttpInfo(urlPath);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse Proxy 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> ReverseProxyProxyUrlPathHeadWithHttpInfo(string urlPath, int operationIndex = 0)
        {
            // verify the required parameter 'urlPath' is set
            if (urlPath == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'urlPath' when calling DefaultApi->ReverseProxyProxyUrlPathHead");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("url_path", SdWebUiApi.Client.ClientUtils.ParameterToString(urlPath)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ReverseProxyProxyUrlPathHead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Head<Object>("/proxy={url_path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReverseProxyProxyUrlPathHead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverse Proxy 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReverseProxyProxyUrlPathHeadAsync(string urlPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await ReverseProxyProxyUrlPathHeadWithHttpInfoAsync(urlPath, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse Proxy 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlPath"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> ReverseProxyProxyUrlPathHeadWithHttpInfoAsync(string urlPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlPath' is set
            if (urlPath == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'urlPath' when calling DefaultApi->ReverseProxyProxyUrlPathHead");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("url_path", SdWebUiApi.Client.ClientUtils.ParameterToString(urlPath)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ReverseProxyProxyUrlPathHead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.HeadAsync<Object>("/proxy={url_path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReverseProxyProxyUrlPathHead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Robots Txt 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string RobotsTxtRobotsTxtGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = RobotsTxtRobotsTxtGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Robots Txt 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SdWebUiApi.Client.ApiResponse<string> RobotsTxtRobotsTxtGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.RobotsTxtRobotsTxtGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/robots.txt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RobotsTxtRobotsTxtGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Robots Txt 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RobotsTxtRobotsTxtGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = await RobotsTxtRobotsTxtGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Robots Txt 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<string>> RobotsTxtRobotsTxtGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.RobotsTxtRobotsTxtGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/robots.txt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RobotsTxtRobotsTxtGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SetConfigSdapiV1OptionsPost(Object body, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = SetConfigSdapiV1OptionsPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> SetConfigSdapiV1OptionsPostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SetConfigSdapiV1OptionsPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.SetConfigSdapiV1OptionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConfigSdapiV1OptionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetConfigSdapiV1OptionsPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await SetConfigSdapiV1OptionsPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Config 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> SetConfigSdapiV1OptionsPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SetConfigSdapiV1OptionsPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.SetConfigSdapiV1OptionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConfigSdapiV1OptionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Settings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SettingsControlnetSettingsGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = SettingsControlnetSettingsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Settings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> SettingsControlnetSettingsGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.SettingsControlnetSettingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/controlnet/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettingsControlnetSettingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Settings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SettingsControlnetSettingsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await SettingsControlnetSettingsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Settings 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> SettingsControlnetSettingsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.SettingsControlnetSettingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/controlnet/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettingsControlnetSettingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Skip 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SkipSdapiV1SkipPost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = SkipSdapiV1SkipPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Skip 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> SkipSdapiV1SkipPostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.SkipSdapiV1SkipPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/skip", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SkipSdapiV1SkipPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Skip 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SkipSdapiV1SkipPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await SkipSdapiV1SkipPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Skip 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> SkipSdapiV1SkipPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.SkipSdapiV1SkipPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/skip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SkipSdapiV1SkipPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Startup Events 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object StartupEventsStartupEventsGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = StartupEventsStartupEventsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Startup Events 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> StartupEventsStartupEventsGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.StartupEventsStartupEventsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/startup-events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartupEventsStartupEventsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Startup Events 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> StartupEventsStartupEventsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await StartupEventsStartupEventsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Startup Events 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> StartupEventsStartupEventsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.StartupEventsStartupEventsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/startup-events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartupEventsStartupEventsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Static Resource 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object StaticResourceStaticPathGet(string path, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = StaticResourceStaticPathGetWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Static Resource 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> StaticResourceStaticPathGetWithHttpInfo(string path, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'path' when calling DefaultApi->StaticResourceStaticPathGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", SdWebUiApi.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.StaticResourceStaticPathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/static/{path}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaticResourceStaticPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Static Resource 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> StaticResourceStaticPathGetAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await StaticResourceStaticPathGetWithHttpInfoAsync(path, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Static Resource 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> StaticResourceStaticPathGetWithHttpInfoAsync(string path, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'path' when calling DefaultApi->StaticResourceStaticPathGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", SdWebUiApi.Client.ClientUtils.ParameterToString(path)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.StaticResourceStaticPathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/static/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaticResourceStaticPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionHash"></param>
        /// <param name="run"></param>
        /// <param name="componentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object StreamStreamSessionHashRunComponentIdGet(string sessionHash, int run, int componentId, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = StreamStreamSessionHashRunComponentIdGetWithHttpInfo(sessionHash, run, componentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionHash"></param>
        /// <param name="run"></param>
        /// <param name="componentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> StreamStreamSessionHashRunComponentIdGetWithHttpInfo(string sessionHash, int run, int componentId, int operationIndex = 0)
        {
            // verify the required parameter 'sessionHash' is set
            if (sessionHash == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'sessionHash' when calling DefaultApi->StreamStreamSessionHashRunComponentIdGet");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("session_hash", SdWebUiApi.Client.ClientUtils.ParameterToString(sessionHash)); // path parameter
            localVarRequestOptions.PathParameters.Add("run", SdWebUiApi.Client.ClientUtils.ParameterToString(run)); // path parameter
            localVarRequestOptions.PathParameters.Add("component_id", SdWebUiApi.Client.ClientUtils.ParameterToString(componentId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.StreamStreamSessionHashRunComponentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/stream/{session_hash}/{run}/{component_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamStreamSessionHashRunComponentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionHash"></param>
        /// <param name="run"></param>
        /// <param name="componentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> StreamStreamSessionHashRunComponentIdGetAsync(string sessionHash, int run, int componentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await StreamStreamSessionHashRunComponentIdGetWithHttpInfoAsync(sessionHash, run, componentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionHash"></param>
        /// <param name="run"></param>
        /// <param name="componentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> StreamStreamSessionHashRunComponentIdGetWithHttpInfoAsync(string sessionHash, int run, int componentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sessionHash' is set
            if (sessionHash == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'sessionHash' when calling DefaultApi->StreamStreamSessionHashRunComponentIdGet");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("session_hash", SdWebUiApi.Client.ClientUtils.ParameterToString(sessionHash)); // path parameter
            localVarRequestOptions.PathParameters.Add("run", SdWebUiApi.Client.ClientUtils.ParameterToString(run)); // path parameter
            localVarRequestOptions.PathParameters.Add("component_id", SdWebUiApi.Client.ClientUtils.ParameterToString(componentId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.StreamStreamSessionHashRunComponentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/stream/{session_hash}/{run}/{component_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamStreamSessionHashRunComponentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Text2Imgapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingTxt2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextToImageResponse</returns>
        public TextToImageResponse Text2imgapiSdapiV1Txt2imgPost(StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<TextToImageResponse> localVarResponse = Text2imgapiSdapiV1Txt2imgPostWithHttpInfo(stableDiffusionProcessingTxt2Img);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Text2Imgapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingTxt2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextToImageResponse</returns>
        public SdWebUiApi.Client.ApiResponse<TextToImageResponse> Text2imgapiSdapiV1Txt2imgPostWithHttpInfo(StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img, int operationIndex = 0)
        {
            // verify the required parameter 'stableDiffusionProcessingTxt2Img' is set
            if (stableDiffusionProcessingTxt2Img == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'stableDiffusionProcessingTxt2Img' when calling DefaultApi->Text2imgapiSdapiV1Txt2imgPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = stableDiffusionProcessingTxt2Img;

            localVarRequestOptions.Operation = "DefaultApi.Text2imgapiSdapiV1Txt2imgPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TextToImageResponse>("/sdapi/v1/txt2img", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Text2imgapiSdapiV1Txt2imgPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Text2Imgapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingTxt2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextToImageResponse</returns>
        public async System.Threading.Tasks.Task<TextToImageResponse> Text2imgapiSdapiV1Txt2imgPostAsync(StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<TextToImageResponse> localVarResponse = await Text2imgapiSdapiV1Txt2imgPostWithHttpInfoAsync(stableDiffusionProcessingTxt2Img, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Text2Imgapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stableDiffusionProcessingTxt2Img"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextToImageResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<TextToImageResponse>> Text2imgapiSdapiV1Txt2imgPostWithHttpInfoAsync(StableDiffusionProcessingTxt2Img stableDiffusionProcessingTxt2Img, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stableDiffusionProcessingTxt2Img' is set
            if (stableDiffusionProcessingTxt2Img == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'stableDiffusionProcessingTxt2Img' when calling DefaultApi->Text2imgapiSdapiV1Txt2imgPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = stableDiffusionProcessingTxt2Img;

            localVarRequestOptions.Operation = "DefaultApi.Text2imgapiSdapiV1Txt2imgPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TextToImageResponse>("/sdapi/v1/txt2img", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Text2imgapiSdapiV1Txt2imgPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Theme Css 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ThemeCssThemeCssGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = ThemeCssThemeCssGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Theme Css 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SdWebUiApi.Client.ApiResponse<string> ThemeCssThemeCssGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ThemeCssThemeCssGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/theme.css", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThemeCssThemeCssGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Theme Css 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ThemeCssThemeCssGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<string> localVarResponse = await ThemeCssThemeCssGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Theme Css 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<string>> ThemeCssThemeCssGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ThemeCssThemeCssGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/theme.css", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThemeCssThemeCssGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Train Embedding 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrainResponse</returns>
        public TrainResponse TrainEmbeddingSdapiV1TrainEmbeddingPost(Object body, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<TrainResponse> localVarResponse = TrainEmbeddingSdapiV1TrainEmbeddingPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Train Embedding 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrainResponse</returns>
        public SdWebUiApi.Client.ApiResponse<TrainResponse> TrainEmbeddingSdapiV1TrainEmbeddingPostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->TrainEmbeddingSdapiV1TrainEmbeddingPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.TrainEmbeddingSdapiV1TrainEmbeddingPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TrainResponse>("/sdapi/v1/train/embedding", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrainEmbeddingSdapiV1TrainEmbeddingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Train Embedding 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrainResponse</returns>
        public async System.Threading.Tasks.Task<TrainResponse> TrainEmbeddingSdapiV1TrainEmbeddingPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<TrainResponse> localVarResponse = await TrainEmbeddingSdapiV1TrainEmbeddingPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Train Embedding 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrainResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<TrainResponse>> TrainEmbeddingSdapiV1TrainEmbeddingPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->TrainEmbeddingSdapiV1TrainEmbeddingPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.TrainEmbeddingSdapiV1TrainEmbeddingPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TrainResponse>("/sdapi/v1/train/embedding", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrainEmbeddingSdapiV1TrainEmbeddingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Train Hypernetwork 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrainResponse</returns>
        public TrainResponse TrainHypernetworkSdapiV1TrainHypernetworkPost(Object body, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<TrainResponse> localVarResponse = TrainHypernetworkSdapiV1TrainHypernetworkPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Train Hypernetwork 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrainResponse</returns>
        public SdWebUiApi.Client.ApiResponse<TrainResponse> TrainHypernetworkSdapiV1TrainHypernetworkPostWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->TrainHypernetworkSdapiV1TrainHypernetworkPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.TrainHypernetworkSdapiV1TrainHypernetworkPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TrainResponse>("/sdapi/v1/train/hypernetwork", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrainHypernetworkSdapiV1TrainHypernetworkPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Train Hypernetwork 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrainResponse</returns>
        public async System.Threading.Tasks.Task<TrainResponse> TrainHypernetworkSdapiV1TrainHypernetworkPostAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<TrainResponse> localVarResponse = await TrainHypernetworkSdapiV1TrainHypernetworkPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Train Hypernetwork 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrainResponse)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<TrainResponse>> TrainHypernetworkSdapiV1TrainHypernetworkPostWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'body' when calling DefaultApi->TrainHypernetworkSdapiV1TrainHypernetworkPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.TrainHypernetworkSdapiV1TrainHypernetworkPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TrainResponse>("/sdapi/v1/train/hypernetwork", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrainHypernetworkSdapiV1TrainHypernetworkPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unloadapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UnloadapiSdapiV1UnloadCheckpointPost(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = UnloadapiSdapiV1UnloadCheckpointPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unloadapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> UnloadapiSdapiV1UnloadCheckpointPostWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.UnloadapiSdapiV1UnloadCheckpointPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sdapi/v1/unload-checkpoint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnloadapiSdapiV1UnloadCheckpointPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unloadapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UnloadapiSdapiV1UnloadCheckpointPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await UnloadapiSdapiV1UnloadCheckpointPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unloadapi 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> UnloadapiSdapiV1UnloadCheckpointPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.UnloadapiSdapiV1UnloadCheckpointPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sdapi/v1/unload-checkpoint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnloadapiSdapiV1UnloadCheckpointPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UploadFileUploadPost(List<System.IO.Stream> files, int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = UploadFileUploadPostWithHttpInfo(files);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> UploadFileUploadPostWithHttpInfo(List<System.IO.Stream> files, int operationIndex = 0)
        {
            // verify the required parameter 'files' is set
            if (files == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'files' when calling DefaultApi->UploadFileUploadPost");
            }

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            foreach (var file in files)
            {
                localVarRequestOptions.FileParameters.Add("files", file);
            }

            localVarRequestOptions.Operation = "DefaultApi.UploadFileUploadPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFileUploadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UploadFileUploadPostAsync(List<System.IO.Stream> files, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await UploadFileUploadPostWithHttpInfoAsync(files, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> UploadFileUploadPostWithHttpInfoAsync(List<System.IO.Stream> files, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'files' is set
            if (files == null)
            {
                throw new SdWebUiApi.Client.ApiException(400, "Missing required parameter 'files' when calling DefaultApi->UploadFileUploadPost");
            }


            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            foreach (var file in files)
            {
                localVarRequestOptions.FileParameters.Add("files", file);
            }

            localVarRequestOptions.Operation = "DefaultApi.UploadFileUploadPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFileUploadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object VersionControlnetVersionGet(int operationIndex = 0)
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = VersionControlnetVersionGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public SdWebUiApi.Client.ApiResponse<Object> VersionControlnetVersionGetWithHttpInfo(int operationIndex = 0)
        {
            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.VersionControlnetVersionGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/controlnet/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VersionControlnetVersionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Version 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VersionControlnetVersionGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SdWebUiApi.Client.ApiResponse<Object> localVarResponse = await VersionControlnetVersionGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Version 
        /// </summary>
        /// <exception cref="SdWebUiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SdWebUiApi.Client.ApiResponse<Object>> VersionControlnetVersionGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SdWebUiApi.Client.RequestOptions localVarRequestOptions = new SdWebUiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SdWebUiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SdWebUiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.VersionControlnetVersionGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/controlnet/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VersionControlnetVersionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
