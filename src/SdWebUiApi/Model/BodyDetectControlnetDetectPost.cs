/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SdWebUpApi.Client.OpenAPIDateConverter;

namespace SdWebUpApi.Model
{
    /// <summary>
    /// BodyDetectControlnetDetectPost
    /// </summary>
    [DataContract(Name = "Body_detect_controlnet_detect_post")]
    public partial class BodyDetectControlnetDetectPost : IEquatable<BodyDetectControlnetDetectPost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BodyDetectControlnetDetectPost" /> class.
        /// </summary>
        /// <param name="controlnetModule">controlnetModule (default to &quot;none&quot;).</param>
        /// <param name="controlnetInputImages">controlnetInputImages.</param>
        /// <param name="controlnetProcessorRes">controlnetProcessorRes (default to 512).</param>
        /// <param name="controlnetThresholdA">controlnetThresholdA (default to 64M).</param>
        /// <param name="controlnetThresholdB">controlnetThresholdB (default to 64M).</param>
        public BodyDetectControlnetDetectPost(string controlnetModule = @"none", List<string> controlnetInputImages = default(List<string>), int controlnetProcessorRes = 512, decimal controlnetThresholdA = 64M, decimal controlnetThresholdB = 64M)
        {
            // use default value if no "controlnetModule" provided
            this.ControlnetModule = controlnetModule ?? @"none";
            this.ControlnetInputImages = controlnetInputImages;
            this.ControlnetProcessorRes = controlnetProcessorRes;
            this.ControlnetThresholdA = controlnetThresholdA;
            this.ControlnetThresholdB = controlnetThresholdB;
        }

        /// <summary>
        /// Gets or Sets ControlnetModule
        /// </summary>
        [DataMember(Name = "controlnet_module", EmitDefaultValue = false)]
        public string ControlnetModule { get; set; }

        /// <summary>
        /// Gets or Sets ControlnetInputImages
        /// </summary>
        [DataMember(Name = "controlnet_input_images", EmitDefaultValue = false)]
        public List<string> ControlnetInputImages { get; set; }

        /// <summary>
        /// Gets or Sets ControlnetProcessorRes
        /// </summary>
        [DataMember(Name = "controlnet_processor_res", EmitDefaultValue = false)]
        public int ControlnetProcessorRes { get; set; }

        /// <summary>
        /// Gets or Sets ControlnetThresholdA
        /// </summary>
        [DataMember(Name = "controlnet_threshold_a", EmitDefaultValue = false)]
        public decimal ControlnetThresholdA { get; set; }

        /// <summary>
        /// Gets or Sets ControlnetThresholdB
        /// </summary>
        [DataMember(Name = "controlnet_threshold_b", EmitDefaultValue = false)]
        public decimal ControlnetThresholdB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BodyDetectControlnetDetectPost {\n");
            sb.Append("  ControlnetModule: ").Append(ControlnetModule).Append("\n");
            sb.Append("  ControlnetInputImages: ").Append(ControlnetInputImages).Append("\n");
            sb.Append("  ControlnetProcessorRes: ").Append(ControlnetProcessorRes).Append("\n");
            sb.Append("  ControlnetThresholdA: ").Append(ControlnetThresholdA).Append("\n");
            sb.Append("  ControlnetThresholdB: ").Append(ControlnetThresholdB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BodyDetectControlnetDetectPost);
        }

        /// <summary>
        /// Returns true if BodyDetectControlnetDetectPost instances are equal
        /// </summary>
        /// <param name="input">Instance of BodyDetectControlnetDetectPost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BodyDetectControlnetDetectPost input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ControlnetModule == input.ControlnetModule ||
                    (this.ControlnetModule != null &&
                    this.ControlnetModule.Equals(input.ControlnetModule))
                ) && 
                (
                    this.ControlnetInputImages == input.ControlnetInputImages ||
                    this.ControlnetInputImages != null &&
                    input.ControlnetInputImages != null &&
                    this.ControlnetInputImages.SequenceEqual(input.ControlnetInputImages)
                ) && 
                (
                    this.ControlnetProcessorRes == input.ControlnetProcessorRes ||
                    this.ControlnetProcessorRes.Equals(input.ControlnetProcessorRes)
                ) && 
                (
                    this.ControlnetThresholdA == input.ControlnetThresholdA ||
                    this.ControlnetThresholdA.Equals(input.ControlnetThresholdA)
                ) && 
                (
                    this.ControlnetThresholdB == input.ControlnetThresholdB ||
                    this.ControlnetThresholdB.Equals(input.ControlnetThresholdB)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ControlnetModule != null)
                {
                    hashCode = (hashCode * 59) + this.ControlnetModule.GetHashCode();
                }
                if (this.ControlnetInputImages != null)
                {
                    hashCode = (hashCode * 59) + this.ControlnetInputImages.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ControlnetProcessorRes.GetHashCode();
                hashCode = (hashCode * 59) + this.ControlnetThresholdA.GetHashCode();
                hashCode = (hashCode * 59) + this.ControlnetThresholdB.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
