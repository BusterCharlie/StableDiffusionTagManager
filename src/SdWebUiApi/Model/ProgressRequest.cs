/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SdWebUpApi.Client.OpenAPIDateConverter;

namespace SdWebUpApi.Model
{
    /// <summary>
    /// ProgressRequest
    /// </summary>
    [DataContract(Name = "ProgressRequest")]
    public partial class ProgressRequest : IEquatable<ProgressRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgressRequest" /> class.
        /// </summary>
        /// <param name="idTask">id of the task to get progress for.</param>
        /// <param name="idLivePreview">id of last received last preview image (default to -1).</param>
        public ProgressRequest(string idTask = default(string), int idLivePreview = -1)
        {
            this.IdTask = idTask;
            this.IdLivePreview = idLivePreview;
        }

        /// <summary>
        /// id of the task to get progress for
        /// </summary>
        /// <value>id of the task to get progress for</value>
        [DataMember(Name = "id_task", EmitDefaultValue = false)]
        public string IdTask { get; set; }

        /// <summary>
        /// id of last received last preview image
        /// </summary>
        /// <value>id of last received last preview image</value>
        [DataMember(Name = "id_live_preview", EmitDefaultValue = false)]
        public int IdLivePreview { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProgressRequest {\n");
            sb.Append("  IdTask: ").Append(IdTask).Append("\n");
            sb.Append("  IdLivePreview: ").Append(IdLivePreview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProgressRequest);
        }

        /// <summary>
        /// Returns true if ProgressRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProgressRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProgressRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdTask == input.IdTask ||
                    (this.IdTask != null &&
                    this.IdTask.Equals(input.IdTask))
                ) && 
                (
                    this.IdLivePreview == input.IdLivePreview ||
                    this.IdLivePreview.Equals(input.IdLivePreview)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdTask != null)
                {
                    hashCode = (hashCode * 59) + this.IdTask.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IdLivePreview.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
