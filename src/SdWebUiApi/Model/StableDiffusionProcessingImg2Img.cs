/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SdWebUpApi.Client.OpenAPIDateConverter;

namespace SdWebUpApi.Model
{
    /// <summary>
    /// StableDiffusionProcessingImg2Img
    /// </summary>
    [DataContract(Name = "StableDiffusionProcessingImg2Img")]
    public partial class StableDiffusionProcessingImg2Img : IEquatable<StableDiffusionProcessingImg2Img>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StableDiffusionProcessingImg2Img" /> class.
        /// </summary>
        /// <param name="initImages">initImages.</param>
        /// <param name="resizeMode">resizeMode (default to 0).</param>
        /// <param name="denoisingStrength">denoisingStrength (default to 0.75M).</param>
        /// <param name="imageCfgScale">imageCfgScale.</param>
        /// <param name="mask">mask.</param>
        /// <param name="maskBlur">maskBlur.</param>
        /// <param name="maskBlurX">maskBlurX (default to 4).</param>
        /// <param name="maskBlurY">maskBlurY (default to 4).</param>
        /// <param name="inpaintingFill">inpaintingFill (default to 0).</param>
        /// <param name="inpaintFullRes">inpaintFullRes (default to true).</param>
        /// <param name="inpaintFullResPadding">inpaintFullResPadding (default to 0).</param>
        /// <param name="inpaintingMaskInvert">inpaintingMaskInvert (default to 0).</param>
        /// <param name="initialNoiseMultiplier">initialNoiseMultiplier.</param>
        /// <param name="prompt">prompt (default to &quot;&quot;).</param>
        /// <param name="styles">styles.</param>
        /// <param name="seed">seed (default to -1).</param>
        /// <param name="subseed">subseed (default to -1).</param>
        /// <param name="subseedStrength">subseedStrength (default to 0M).</param>
        /// <param name="seedResizeFromH">seedResizeFromH (default to -1).</param>
        /// <param name="seedResizeFromW">seedResizeFromW (default to -1).</param>
        /// <param name="samplerName">samplerName.</param>
        /// <param name="batchSize">batchSize (default to 1).</param>
        /// <param name="nIter">nIter (default to 1).</param>
        /// <param name="steps">steps (default to 50).</param>
        /// <param name="cfgScale">cfgScale (default to 7.0M).</param>
        /// <param name="width">width (default to 512).</param>
        /// <param name="height">height (default to 512).</param>
        /// <param name="restoreFaces">restoreFaces (default to false).</param>
        /// <param name="tiling">tiling (default to false).</param>
        /// <param name="doNotSaveSamples">doNotSaveSamples (default to false).</param>
        /// <param name="doNotSaveGrid">doNotSaveGrid (default to false).</param>
        /// <param name="negativePrompt">negativePrompt.</param>
        /// <param name="eta">eta.</param>
        /// <param name="sMinUncond">sMinUncond (default to 0.0M).</param>
        /// <param name="sChurn">sChurn (default to 0.0M).</param>
        /// <param name="sTmax">sTmax.</param>
        /// <param name="sTmin">sTmin (default to 0.0M).</param>
        /// <param name="sNoise">sNoise (default to 1.0M).</param>
        /// <param name="overrideSettings">overrideSettings.</param>
        /// <param name="overrideSettingsRestoreAfterwards">overrideSettingsRestoreAfterwards (default to true).</param>
        /// <param name="scriptArgs">scriptArgs.</param>
        /// <param name="samplerIndex">samplerIndex (default to &quot;Euler&quot;).</param>
        /// <param name="includeInitImages">includeInitImages (default to false).</param>
        /// <param name="scriptName">scriptName.</param>
        /// <param name="sendImages">sendImages (default to true).</param>
        /// <param name="saveImages">saveImages (default to false).</param>
        /// <param name="alwaysonScripts">alwaysonScripts.</param>
        public StableDiffusionProcessingImg2Img(List<Object> initImages = default(List<Object>), int resizeMode = 0, decimal denoisingStrength = 0.75M, decimal imageCfgScale = default(decimal), string mask = default(string), int maskBlur = default(int), int maskBlurX = 4, int maskBlurY = 4, int inpaintingFill = 0, bool inpaintFullRes = true, int inpaintFullResPadding = 0, int inpaintingMaskInvert = 0, decimal initialNoiseMultiplier = default(decimal), string prompt = @"", List<string> styles = default(List<string>), int seed = -1, int subseed = -1, decimal subseedStrength = 0M, int seedResizeFromH = -1, int seedResizeFromW = -1, string samplerName = default(string), int batchSize = 1, int nIter = 1, int steps = 50, decimal cfgScale = 7.0M, int width = 512, int height = 512, bool restoreFaces = false, bool tiling = false, bool doNotSaveSamples = false, bool doNotSaveGrid = false, string negativePrompt = default(string), decimal eta = default(decimal), decimal sMinUncond = 0.0M, decimal sChurn = 0.0M, decimal sTmax = default(decimal), decimal sTmin = 0.0M, decimal sNoise = 1.0M, Object overrideSettings = default(Object), bool overrideSettingsRestoreAfterwards = true, List<Object> scriptArgs = default(List<Object>), string samplerIndex = @"Euler", bool includeInitImages = false, string scriptName = default(string), bool sendImages = true, bool saveImages = false, Object alwaysonScripts = default(Object))
        {
            this.InitImages = initImages;
            this.ResizeMode = resizeMode;
            this.DenoisingStrength = denoisingStrength;
            this.ImageCfgScale = imageCfgScale;
            this.Mask = mask;
            this.MaskBlur = maskBlur;
            this.MaskBlurX = maskBlurX;
            this.MaskBlurY = maskBlurY;
            this.InpaintingFill = inpaintingFill;
            this.InpaintFullRes = inpaintFullRes;
            this.InpaintFullResPadding = inpaintFullResPadding;
            this.InpaintingMaskInvert = inpaintingMaskInvert;
            this.InitialNoiseMultiplier = initialNoiseMultiplier;
            // use default value if no "prompt" provided
            this.Prompt = prompt ?? @"";
            this.Styles = styles;
            this.Seed = seed;
            this.Subseed = subseed;
            this.SubseedStrength = subseedStrength;
            this.SeedResizeFromH = seedResizeFromH;
            this.SeedResizeFromW = seedResizeFromW;
            this.SamplerName = samplerName;
            this.BatchSize = batchSize;
            this.NIter = nIter;
            this.Steps = steps;
            this.CfgScale = cfgScale;
            this.Width = width;
            this.Height = height;
            this.RestoreFaces = restoreFaces;
            this.Tiling = tiling;
            this.DoNotSaveSamples = doNotSaveSamples;
            this.DoNotSaveGrid = doNotSaveGrid;
            this.NegativePrompt = negativePrompt;
            this.Eta = eta;
            this.SMinUncond = sMinUncond;
            this.SChurn = sChurn;
            this.STmax = sTmax;
            this.STmin = sTmin;
            this.SNoise = sNoise;
            this.OverrideSettings = overrideSettings;
            this.OverrideSettingsRestoreAfterwards = overrideSettingsRestoreAfterwards;
            this.ScriptArgs = scriptArgs;
            // use default value if no "samplerIndex" provided
            this.SamplerIndex = samplerIndex ?? @"Euler";
            this.IncludeInitImages = includeInitImages;
            this.ScriptName = scriptName;
            this.SendImages = sendImages;
            this.SaveImages = saveImages;
            this.AlwaysonScripts = alwaysonScripts;
        }

        /// <summary>
        /// Gets or Sets InitImages
        /// </summary>
        [DataMember(Name = "init_images", EmitDefaultValue = false)]
        public List<Object> InitImages { get; set; }

        /// <summary>
        /// Gets or Sets ResizeMode
        /// </summary>
        [DataMember(Name = "resize_mode", EmitDefaultValue = false)]
        public int ResizeMode { get; set; }

        /// <summary>
        /// Gets or Sets DenoisingStrength
        /// </summary>
        [DataMember(Name = "denoising_strength", EmitDefaultValue = false)]
        public decimal DenoisingStrength { get; set; }

        /// <summary>
        /// Gets or Sets ImageCfgScale
        /// </summary>
        [DataMember(Name = "image_cfg_scale", EmitDefaultValue = false)]
        public decimal ImageCfgScale { get; set; }

        /// <summary>
        /// Gets or Sets Mask
        /// </summary>
        [DataMember(Name = "mask", EmitDefaultValue = false)]
        public string Mask { get; set; }

        /// <summary>
        /// Gets or Sets MaskBlur
        /// </summary>
        [DataMember(Name = "mask_blur", EmitDefaultValue = false)]
        public int MaskBlur { get; set; }

        /// <summary>
        /// Gets or Sets MaskBlurX
        /// </summary>
        [DataMember(Name = "mask_blur_x", EmitDefaultValue = false)]
        public int MaskBlurX { get; set; }

        /// <summary>
        /// Gets or Sets MaskBlurY
        /// </summary>
        [DataMember(Name = "mask_blur_y", EmitDefaultValue = false)]
        public int MaskBlurY { get; set; }

        /// <summary>
        /// Gets or Sets InpaintingFill
        /// </summary>
        [DataMember(Name = "inpainting_fill", EmitDefaultValue = false)]
        public int InpaintingFill { get; set; }

        /// <summary>
        /// Gets or Sets InpaintFullRes
        /// </summary>
        [DataMember(Name = "inpaint_full_res", EmitDefaultValue = true)]
        public bool InpaintFullRes { get; set; }

        /// <summary>
        /// Gets or Sets InpaintFullResPadding
        /// </summary>
        [DataMember(Name = "inpaint_full_res_padding", EmitDefaultValue = false)]
        public int InpaintFullResPadding { get; set; }

        /// <summary>
        /// Gets or Sets InpaintingMaskInvert
        /// </summary>
        [DataMember(Name = "inpainting_mask_invert", EmitDefaultValue = false)]
        public int InpaintingMaskInvert { get; set; }

        /// <summary>
        /// Gets or Sets InitialNoiseMultiplier
        /// </summary>
        [DataMember(Name = "initial_noise_multiplier", EmitDefaultValue = false)]
        public decimal InitialNoiseMultiplier { get; set; }

        /// <summary>
        /// Gets or Sets Prompt
        /// </summary>
        [DataMember(Name = "prompt", EmitDefaultValue = false)]
        public string Prompt { get; set; }

        /// <summary>
        /// Gets or Sets Styles
        /// </summary>
        [DataMember(Name = "styles", EmitDefaultValue = false)]
        public List<string> Styles { get; set; }

        /// <summary>
        /// Gets or Sets Seed
        /// </summary>
        [DataMember(Name = "seed", EmitDefaultValue = false)]
        public int Seed { get; set; }

        /// <summary>
        /// Gets or Sets Subseed
        /// </summary>
        [DataMember(Name = "subseed", EmitDefaultValue = false)]
        public int Subseed { get; set; }

        /// <summary>
        /// Gets or Sets SubseedStrength
        /// </summary>
        [DataMember(Name = "subseed_strength", EmitDefaultValue = false)]
        public decimal SubseedStrength { get; set; }

        /// <summary>
        /// Gets or Sets SeedResizeFromH
        /// </summary>
        [DataMember(Name = "seed_resize_from_h", EmitDefaultValue = false)]
        public int SeedResizeFromH { get; set; }

        /// <summary>
        /// Gets or Sets SeedResizeFromW
        /// </summary>
        [DataMember(Name = "seed_resize_from_w", EmitDefaultValue = false)]
        public int SeedResizeFromW { get; set; }

        /// <summary>
        /// Gets or Sets SamplerName
        /// </summary>
        [DataMember(Name = "sampler_name", EmitDefaultValue = false)]
        public string SamplerName { get; set; }

        /// <summary>
        /// Gets or Sets BatchSize
        /// </summary>
        [DataMember(Name = "batch_size", EmitDefaultValue = false)]
        public int BatchSize { get; set; }

        /// <summary>
        /// Gets or Sets NIter
        /// </summary>
        [DataMember(Name = "n_iter", EmitDefaultValue = false)]
        public int NIter { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name = "steps", EmitDefaultValue = false)]
        public int Steps { get; set; }

        /// <summary>
        /// Gets or Sets CfgScale
        /// </summary>
        [DataMember(Name = "cfg_scale", EmitDefaultValue = false)]
        public decimal CfgScale { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets RestoreFaces
        /// </summary>
        [DataMember(Name = "restore_faces", EmitDefaultValue = true)]
        public bool RestoreFaces { get; set; }

        /// <summary>
        /// Gets or Sets Tiling
        /// </summary>
        [DataMember(Name = "tiling", EmitDefaultValue = true)]
        public bool Tiling { get; set; }

        /// <summary>
        /// Gets or Sets DoNotSaveSamples
        /// </summary>
        [DataMember(Name = "do_not_save_samples", EmitDefaultValue = true)]
        public bool DoNotSaveSamples { get; set; }

        /// <summary>
        /// Gets or Sets DoNotSaveGrid
        /// </summary>
        [DataMember(Name = "do_not_save_grid", EmitDefaultValue = true)]
        public bool DoNotSaveGrid { get; set; }

        /// <summary>
        /// Gets or Sets NegativePrompt
        /// </summary>
        [DataMember(Name = "negative_prompt", EmitDefaultValue = false)]
        public string NegativePrompt { get; set; }

        /// <summary>
        /// Gets or Sets Eta
        /// </summary>
        [DataMember(Name = "eta", EmitDefaultValue = false)]
        public decimal Eta { get; set; }

        /// <summary>
        /// Gets or Sets SMinUncond
        /// </summary>
        [DataMember(Name = "s_min_uncond", EmitDefaultValue = false)]
        public decimal SMinUncond { get; set; }

        /// <summary>
        /// Gets or Sets SChurn
        /// </summary>
        [DataMember(Name = "s_churn", EmitDefaultValue = false)]
        public decimal SChurn { get; set; }

        /// <summary>
        /// Gets or Sets STmax
        /// </summary>
        [DataMember(Name = "s_tmax", EmitDefaultValue = false)]
        public decimal STmax { get; set; }

        /// <summary>
        /// Gets or Sets STmin
        /// </summary>
        [DataMember(Name = "s_tmin", EmitDefaultValue = false)]
        public decimal STmin { get; set; }

        /// <summary>
        /// Gets or Sets SNoise
        /// </summary>
        [DataMember(Name = "s_noise", EmitDefaultValue = false)]
        public decimal SNoise { get; set; }

        /// <summary>
        /// Gets or Sets OverrideSettings
        /// </summary>
        [DataMember(Name = "override_settings", EmitDefaultValue = false)]
        public Object OverrideSettings { get; set; }

        /// <summary>
        /// Gets or Sets OverrideSettingsRestoreAfterwards
        /// </summary>
        [DataMember(Name = "override_settings_restore_afterwards", EmitDefaultValue = true)]
        public bool OverrideSettingsRestoreAfterwards { get; set; }

        /// <summary>
        /// Gets or Sets ScriptArgs
        /// </summary>
        [DataMember(Name = "script_args", EmitDefaultValue = false)]
        public List<Object> ScriptArgs { get; set; }

        /// <summary>
        /// Gets or Sets SamplerIndex
        /// </summary>
        [DataMember(Name = "sampler_index", EmitDefaultValue = false)]
        public string SamplerIndex { get; set; }

        /// <summary>
        /// Gets or Sets IncludeInitImages
        /// </summary>
        [DataMember(Name = "include_init_images", EmitDefaultValue = true)]
        public bool IncludeInitImages { get; set; }

        /// <summary>
        /// Gets or Sets ScriptName
        /// </summary>
        [DataMember(Name = "script_name", EmitDefaultValue = false)]
        public string ScriptName { get; set; }

        /// <summary>
        /// Gets or Sets SendImages
        /// </summary>
        [DataMember(Name = "send_images", EmitDefaultValue = true)]
        public bool SendImages { get; set; }

        /// <summary>
        /// Gets or Sets SaveImages
        /// </summary>
        [DataMember(Name = "save_images", EmitDefaultValue = true)]
        public bool SaveImages { get; set; }

        /// <summary>
        /// Gets or Sets AlwaysonScripts
        /// </summary>
        [DataMember(Name = "alwayson_scripts", EmitDefaultValue = false)]
        public Object AlwaysonScripts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StableDiffusionProcessingImg2Img {\n");
            sb.Append("  InitImages: ").Append(InitImages).Append("\n");
            sb.Append("  ResizeMode: ").Append(ResizeMode).Append("\n");
            sb.Append("  DenoisingStrength: ").Append(DenoisingStrength).Append("\n");
            sb.Append("  ImageCfgScale: ").Append(ImageCfgScale).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  MaskBlur: ").Append(MaskBlur).Append("\n");
            sb.Append("  MaskBlurX: ").Append(MaskBlurX).Append("\n");
            sb.Append("  MaskBlurY: ").Append(MaskBlurY).Append("\n");
            sb.Append("  InpaintingFill: ").Append(InpaintingFill).Append("\n");
            sb.Append("  InpaintFullRes: ").Append(InpaintFullRes).Append("\n");
            sb.Append("  InpaintFullResPadding: ").Append(InpaintFullResPadding).Append("\n");
            sb.Append("  InpaintingMaskInvert: ").Append(InpaintingMaskInvert).Append("\n");
            sb.Append("  InitialNoiseMultiplier: ").Append(InitialNoiseMultiplier).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Styles: ").Append(Styles).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Subseed: ").Append(Subseed).Append("\n");
            sb.Append("  SubseedStrength: ").Append(SubseedStrength).Append("\n");
            sb.Append("  SeedResizeFromH: ").Append(SeedResizeFromH).Append("\n");
            sb.Append("  SeedResizeFromW: ").Append(SeedResizeFromW).Append("\n");
            sb.Append("  SamplerName: ").Append(SamplerName).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  NIter: ").Append(NIter).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  CfgScale: ").Append(CfgScale).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  RestoreFaces: ").Append(RestoreFaces).Append("\n");
            sb.Append("  Tiling: ").Append(Tiling).Append("\n");
            sb.Append("  DoNotSaveSamples: ").Append(DoNotSaveSamples).Append("\n");
            sb.Append("  DoNotSaveGrid: ").Append(DoNotSaveGrid).Append("\n");
            sb.Append("  NegativePrompt: ").Append(NegativePrompt).Append("\n");
            sb.Append("  Eta: ").Append(Eta).Append("\n");
            sb.Append("  SMinUncond: ").Append(SMinUncond).Append("\n");
            sb.Append("  SChurn: ").Append(SChurn).Append("\n");
            sb.Append("  STmax: ").Append(STmax).Append("\n");
            sb.Append("  STmin: ").Append(STmin).Append("\n");
            sb.Append("  SNoise: ").Append(SNoise).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  OverrideSettingsRestoreAfterwards: ").Append(OverrideSettingsRestoreAfterwards).Append("\n");
            sb.Append("  ScriptArgs: ").Append(ScriptArgs).Append("\n");
            sb.Append("  SamplerIndex: ").Append(SamplerIndex).Append("\n");
            sb.Append("  IncludeInitImages: ").Append(IncludeInitImages).Append("\n");
            sb.Append("  ScriptName: ").Append(ScriptName).Append("\n");
            sb.Append("  SendImages: ").Append(SendImages).Append("\n");
            sb.Append("  SaveImages: ").Append(SaveImages).Append("\n");
            sb.Append("  AlwaysonScripts: ").Append(AlwaysonScripts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StableDiffusionProcessingImg2Img);
        }

        /// <summary>
        /// Returns true if StableDiffusionProcessingImg2Img instances are equal
        /// </summary>
        /// <param name="input">Instance of StableDiffusionProcessingImg2Img to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StableDiffusionProcessingImg2Img input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InitImages == input.InitImages ||
                    this.InitImages != null &&
                    input.InitImages != null &&
                    this.InitImages.SequenceEqual(input.InitImages)
                ) && 
                (
                    this.ResizeMode == input.ResizeMode ||
                    this.ResizeMode.Equals(input.ResizeMode)
                ) && 
                (
                    this.DenoisingStrength == input.DenoisingStrength ||
                    this.DenoisingStrength.Equals(input.DenoisingStrength)
                ) && 
                (
                    this.ImageCfgScale == input.ImageCfgScale ||
                    this.ImageCfgScale.Equals(input.ImageCfgScale)
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.MaskBlur == input.MaskBlur ||
                    this.MaskBlur.Equals(input.MaskBlur)
                ) && 
                (
                    this.MaskBlurX == input.MaskBlurX ||
                    this.MaskBlurX.Equals(input.MaskBlurX)
                ) && 
                (
                    this.MaskBlurY == input.MaskBlurY ||
                    this.MaskBlurY.Equals(input.MaskBlurY)
                ) && 
                (
                    this.InpaintingFill == input.InpaintingFill ||
                    this.InpaintingFill.Equals(input.InpaintingFill)
                ) && 
                (
                    this.InpaintFullRes == input.InpaintFullRes ||
                    this.InpaintFullRes.Equals(input.InpaintFullRes)
                ) && 
                (
                    this.InpaintFullResPadding == input.InpaintFullResPadding ||
                    this.InpaintFullResPadding.Equals(input.InpaintFullResPadding)
                ) && 
                (
                    this.InpaintingMaskInvert == input.InpaintingMaskInvert ||
                    this.InpaintingMaskInvert.Equals(input.InpaintingMaskInvert)
                ) && 
                (
                    this.InitialNoiseMultiplier == input.InitialNoiseMultiplier ||
                    this.InitialNoiseMultiplier.Equals(input.InitialNoiseMultiplier)
                ) && 
                (
                    this.Prompt == input.Prompt ||
                    (this.Prompt != null &&
                    this.Prompt.Equals(input.Prompt))
                ) && 
                (
                    this.Styles == input.Styles ||
                    this.Styles != null &&
                    input.Styles != null &&
                    this.Styles.SequenceEqual(input.Styles)
                ) && 
                (
                    this.Seed == input.Seed ||
                    this.Seed.Equals(input.Seed)
                ) && 
                (
                    this.Subseed == input.Subseed ||
                    this.Subseed.Equals(input.Subseed)
                ) && 
                (
                    this.SubseedStrength == input.SubseedStrength ||
                    this.SubseedStrength.Equals(input.SubseedStrength)
                ) && 
                (
                    this.SeedResizeFromH == input.SeedResizeFromH ||
                    this.SeedResizeFromH.Equals(input.SeedResizeFromH)
                ) && 
                (
                    this.SeedResizeFromW == input.SeedResizeFromW ||
                    this.SeedResizeFromW.Equals(input.SeedResizeFromW)
                ) && 
                (
                    this.SamplerName == input.SamplerName ||
                    (this.SamplerName != null &&
                    this.SamplerName.Equals(input.SamplerName))
                ) && 
                (
                    this.BatchSize == input.BatchSize ||
                    this.BatchSize.Equals(input.BatchSize)
                ) && 
                (
                    this.NIter == input.NIter ||
                    this.NIter.Equals(input.NIter)
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps.Equals(input.Steps)
                ) && 
                (
                    this.CfgScale == input.CfgScale ||
                    this.CfgScale.Equals(input.CfgScale)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.RestoreFaces == input.RestoreFaces ||
                    this.RestoreFaces.Equals(input.RestoreFaces)
                ) && 
                (
                    this.Tiling == input.Tiling ||
                    this.Tiling.Equals(input.Tiling)
                ) && 
                (
                    this.DoNotSaveSamples == input.DoNotSaveSamples ||
                    this.DoNotSaveSamples.Equals(input.DoNotSaveSamples)
                ) && 
                (
                    this.DoNotSaveGrid == input.DoNotSaveGrid ||
                    this.DoNotSaveGrid.Equals(input.DoNotSaveGrid)
                ) && 
                (
                    this.NegativePrompt == input.NegativePrompt ||
                    (this.NegativePrompt != null &&
                    this.NegativePrompt.Equals(input.NegativePrompt))
                ) && 
                (
                    this.Eta == input.Eta ||
                    this.Eta.Equals(input.Eta)
                ) && 
                (
                    this.SMinUncond == input.SMinUncond ||
                    this.SMinUncond.Equals(input.SMinUncond)
                ) && 
                (
                    this.SChurn == input.SChurn ||
                    this.SChurn.Equals(input.SChurn)
                ) && 
                (
                    this.STmax == input.STmax ||
                    this.STmax.Equals(input.STmax)
                ) && 
                (
                    this.STmin == input.STmin ||
                    this.STmin.Equals(input.STmin)
                ) && 
                (
                    this.SNoise == input.SNoise ||
                    this.SNoise.Equals(input.SNoise)
                ) && 
                (
                    this.OverrideSettings == input.OverrideSettings ||
                    (this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(input.OverrideSettings))
                ) && 
                (
                    this.OverrideSettingsRestoreAfterwards == input.OverrideSettingsRestoreAfterwards ||
                    this.OverrideSettingsRestoreAfterwards.Equals(input.OverrideSettingsRestoreAfterwards)
                ) && 
                (
                    this.ScriptArgs == input.ScriptArgs ||
                    this.ScriptArgs != null &&
                    input.ScriptArgs != null &&
                    this.ScriptArgs.SequenceEqual(input.ScriptArgs)
                ) && 
                (
                    this.SamplerIndex == input.SamplerIndex ||
                    (this.SamplerIndex != null &&
                    this.SamplerIndex.Equals(input.SamplerIndex))
                ) && 
                (
                    this.IncludeInitImages == input.IncludeInitImages ||
                    this.IncludeInitImages.Equals(input.IncludeInitImages)
                ) && 
                (
                    this.ScriptName == input.ScriptName ||
                    (this.ScriptName != null &&
                    this.ScriptName.Equals(input.ScriptName))
                ) && 
                (
                    this.SendImages == input.SendImages ||
                    this.SendImages.Equals(input.SendImages)
                ) && 
                (
                    this.SaveImages == input.SaveImages ||
                    this.SaveImages.Equals(input.SaveImages)
                ) && 
                (
                    this.AlwaysonScripts == input.AlwaysonScripts ||
                    (this.AlwaysonScripts != null &&
                    this.AlwaysonScripts.Equals(input.AlwaysonScripts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InitImages != null)
                {
                    hashCode = (hashCode * 59) + this.InitImages.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResizeMode.GetHashCode();
                hashCode = (hashCode * 59) + this.DenoisingStrength.GetHashCode();
                hashCode = (hashCode * 59) + this.ImageCfgScale.GetHashCode();
                if (this.Mask != null)
                {
                    hashCode = (hashCode * 59) + this.Mask.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaskBlur.GetHashCode();
                hashCode = (hashCode * 59) + this.MaskBlurX.GetHashCode();
                hashCode = (hashCode * 59) + this.MaskBlurY.GetHashCode();
                hashCode = (hashCode * 59) + this.InpaintingFill.GetHashCode();
                hashCode = (hashCode * 59) + this.InpaintFullRes.GetHashCode();
                hashCode = (hashCode * 59) + this.InpaintFullResPadding.GetHashCode();
                hashCode = (hashCode * 59) + this.InpaintingMaskInvert.GetHashCode();
                hashCode = (hashCode * 59) + this.InitialNoiseMultiplier.GetHashCode();
                if (this.Prompt != null)
                {
                    hashCode = (hashCode * 59) + this.Prompt.GetHashCode();
                }
                if (this.Styles != null)
                {
                    hashCode = (hashCode * 59) + this.Styles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                hashCode = (hashCode * 59) + this.Subseed.GetHashCode();
                hashCode = (hashCode * 59) + this.SubseedStrength.GetHashCode();
                hashCode = (hashCode * 59) + this.SeedResizeFromH.GetHashCode();
                hashCode = (hashCode * 59) + this.SeedResizeFromW.GetHashCode();
                if (this.SamplerName != null)
                {
                    hashCode = (hashCode * 59) + this.SamplerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BatchSize.GetHashCode();
                hashCode = (hashCode * 59) + this.NIter.GetHashCode();
                hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                hashCode = (hashCode * 59) + this.CfgScale.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.RestoreFaces.GetHashCode();
                hashCode = (hashCode * 59) + this.Tiling.GetHashCode();
                hashCode = (hashCode * 59) + this.DoNotSaveSamples.GetHashCode();
                hashCode = (hashCode * 59) + this.DoNotSaveGrid.GetHashCode();
                if (this.NegativePrompt != null)
                {
                    hashCode = (hashCode * 59) + this.NegativePrompt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Eta.GetHashCode();
                hashCode = (hashCode * 59) + this.SMinUncond.GetHashCode();
                hashCode = (hashCode * 59) + this.SChurn.GetHashCode();
                hashCode = (hashCode * 59) + this.STmax.GetHashCode();
                hashCode = (hashCode * 59) + this.STmin.GetHashCode();
                hashCode = (hashCode * 59) + this.SNoise.GetHashCode();
                if (this.OverrideSettings != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OverrideSettingsRestoreAfterwards.GetHashCode();
                if (this.ScriptArgs != null)
                {
                    hashCode = (hashCode * 59) + this.ScriptArgs.GetHashCode();
                }
                if (this.SamplerIndex != null)
                {
                    hashCode = (hashCode * 59) + this.SamplerIndex.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeInitImages.GetHashCode();
                if (this.ScriptName != null)
                {
                    hashCode = (hashCode * 59) + this.ScriptName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SendImages.GetHashCode();
                hashCode = (hashCode * 59) + this.SaveImages.GetHashCode();
                if (this.AlwaysonScripts != null)
                {
                    hashCode = (hashCode * 59) + this.AlwaysonScripts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
