/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SdWebUpApi.Client.OpenAPIDateConverter;

namespace SdWebUpApi.Model
{
    /// <summary>
    /// ModulesProgressProgressResponse
    /// </summary>
    [DataContract(Name = "modules__progress__ProgressResponse")]
    public partial class ModulesProgressProgressResponse : IEquatable<ModulesProgressProgressResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModulesProgressProgressResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModulesProgressProgressResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModulesProgressProgressResponse" /> class.
        /// </summary>
        /// <param name="active">active (required).</param>
        /// <param name="queued">queued (required).</param>
        /// <param name="completed">completed (required).</param>
        /// <param name="progress">The progress with a range of 0 to 1.</param>
        /// <param name="eta">eta.</param>
        /// <param name="livePreview">Current live preview; a data: uri.</param>
        /// <param name="idLivePreview">Send this together with next request to prevent receiving same image.</param>
        /// <param name="textinfo">Info text used by WebUI..</param>
        public ModulesProgressProgressResponse(bool active = default(bool), bool queued = default(bool), bool completed = default(bool), decimal progress = default(decimal), decimal eta = default(decimal), string livePreview = default(string), int idLivePreview = default(int), string textinfo = default(string))
        {
            this.Active = active;
            this.Queued = queued;
            this.Completed = completed;
            this.Progress = progress;
            this.Eta = eta;
            this.LivePreview = livePreview;
            this.IdLivePreview = idLivePreview;
            this.Textinfo = textinfo;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Queued
        /// </summary>
        [DataMember(Name = "queued", IsRequired = true, EmitDefaultValue = true)]
        public bool Queued { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name = "completed", IsRequired = true, EmitDefaultValue = true)]
        public bool Completed { get; set; }

        /// <summary>
        /// The progress with a range of 0 to 1
        /// </summary>
        /// <value>The progress with a range of 0 to 1</value>
        [DataMember(Name = "progress", EmitDefaultValue = false)]
        public decimal Progress { get; set; }

        /// <summary>
        /// Gets or Sets Eta
        /// </summary>
        [DataMember(Name = "eta", EmitDefaultValue = false)]
        public decimal Eta { get; set; }

        /// <summary>
        /// Current live preview; a data: uri
        /// </summary>
        /// <value>Current live preview; a data: uri</value>
        [DataMember(Name = "live_preview", EmitDefaultValue = false)]
        public string LivePreview { get; set; }

        /// <summary>
        /// Send this together with next request to prevent receiving same image
        /// </summary>
        /// <value>Send this together with next request to prevent receiving same image</value>
        [DataMember(Name = "id_live_preview", EmitDefaultValue = false)]
        public int IdLivePreview { get; set; }

        /// <summary>
        /// Info text used by WebUI.
        /// </summary>
        /// <value>Info text used by WebUI.</value>
        [DataMember(Name = "textinfo", EmitDefaultValue = false)]
        public string Textinfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModulesProgressProgressResponse {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Eta: ").Append(Eta).Append("\n");
            sb.Append("  LivePreview: ").Append(LivePreview).Append("\n");
            sb.Append("  IdLivePreview: ").Append(IdLivePreview).Append("\n");
            sb.Append("  Textinfo: ").Append(Textinfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModulesProgressProgressResponse);
        }

        /// <summary>
        /// Returns true if ModulesProgressProgressResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ModulesProgressProgressResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModulesProgressProgressResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Queued == input.Queued ||
                    this.Queued.Equals(input.Queued)
                ) && 
                (
                    this.Completed == input.Completed ||
                    this.Completed.Equals(input.Completed)
                ) && 
                (
                    this.Progress == input.Progress ||
                    this.Progress.Equals(input.Progress)
                ) && 
                (
                    this.Eta == input.Eta ||
                    this.Eta.Equals(input.Eta)
                ) && 
                (
                    this.LivePreview == input.LivePreview ||
                    (this.LivePreview != null &&
                    this.LivePreview.Equals(input.LivePreview))
                ) && 
                (
                    this.IdLivePreview == input.IdLivePreview ||
                    this.IdLivePreview.Equals(input.IdLivePreview)
                ) && 
                (
                    this.Textinfo == input.Textinfo ||
                    (this.Textinfo != null &&
                    this.Textinfo.Equals(input.Textinfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.Queued.GetHashCode();
                hashCode = (hashCode * 59) + this.Completed.GetHashCode();
                hashCode = (hashCode * 59) + this.Progress.GetHashCode();
                hashCode = (hashCode * 59) + this.Eta.GetHashCode();
                if (this.LivePreview != null)
                {
                    hashCode = (hashCode * 59) + this.LivePreview.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IdLivePreview.GetHashCode();
                if (this.Textinfo != null)
                {
                    hashCode = (hashCode * 59) + this.Textinfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
