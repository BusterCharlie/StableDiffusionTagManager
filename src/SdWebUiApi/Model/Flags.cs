/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SdWebUpApi.Client.OpenAPIDateConverter;

namespace SdWebUpApi.Model
{
    /// <summary>
    /// Flags
    /// </summary>
    [DataContract(Name = "Flags")]
    public partial class Flags : IEquatable<Flags>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Flags" /> class.
        /// </summary>
        /// <param name="f">&#x3D;&#x3D;SUPPRESS&#x3D;&#x3D; (default to false).</param>
        /// <param name="updateAllExtensions">launch.py argument: download updates for all extensions when starting the program (default to false).</param>
        /// <param name="skipPythonVersionCheck">launch.py argument: do not check python version (default to false).</param>
        /// <param name="skipTorchCudaTest">launch.py argument: do not check if CUDA is able to work properly (default to false).</param>
        /// <param name="reinstallXformers">launch.py argument: install the appropriate version of xformers even if you have some version already installed (default to false).</param>
        /// <param name="reinstallTorch">launch.py argument: install the appropriate version of torch even if you have some version already installed (default to false).</param>
        /// <param name="updateCheck">launch.py argument: check for updates at startup (default to false).</param>
        /// <param name="testServer">launch.py argument: configure server for testing (default to false).</param>
        /// <param name="skipPrepareEnvironment">launch.py argument: skip all environment preparation (default to false).</param>
        /// <param name="skipInstall">launch.py argument: skip installation of packages (default to false).</param>
        /// <param name="doNotDownloadClip">do not download CLIP model even if it&#39;s not included in the checkpoint (default to false).</param>
        /// <param name="dataDir">base path where all user data is stored (default to &quot;C:\stable\stable-diffusion-webui&quot;).</param>
        /// <param name="config">path to config which constructs model (default to &quot;C:\stable\stable-diffusion-webui\configs\v1-inference.yaml&quot;).</param>
        /// <param name="ckpt">path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded (default to &quot;C:\stable\stable-diffusion-webui\model.ckpt&quot;).</param>
        /// <param name="ckptDir">Path to directory with stable diffusion checkpoints.</param>
        /// <param name="vaeDir">Path to directory with VAE files.</param>
        /// <param name="gfpganDir">GFPGAN directory (default to &quot;./GFPGAN&quot;).</param>
        /// <param name="gfpganModel">GFPGAN model file name.</param>
        /// <param name="noHalf">do not switch the model to 16-bit floats (default to false).</param>
        /// <param name="noHalfVae">do not switch the VAE model to 16-bit floats (default to false).</param>
        /// <param name="noProgressbarHiding">do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser) (default to false).</param>
        /// <param name="maxBatchCount">maximum batch count value for the UI (default to 16).</param>
        /// <param name="embeddingsDir">embeddings directory for textual inversion (default: embeddings) (default to &quot;C:\stable\stable-diffusion-webui\embeddings&quot;).</param>
        /// <param name="textualInversionTemplatesDir">directory with textual inversion templates (default to &quot;C:\stable\stable-diffusion-webui\textual_inversion_templates&quot;).</param>
        /// <param name="hypernetworkDir">hypernetwork directory (default to &quot;C:\stable\stable-diffusion-webui\models\hypernetworks&quot;).</param>
        /// <param name="localizationsDir">localizations directory (default to &quot;C:\stable\stable-diffusion-webui\localizations&quot;).</param>
        /// <param name="allowCode">allow custom script execution from webui (default to false).</param>
        /// <param name="medvram">enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage (default to false).</param>
        /// <param name="lowvram">enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage (default to false).</param>
        /// <param name="lowram">load stable diffusion checkpoint weights to VRAM instead of RAM (default to false).</param>
        /// <param name="alwaysBatchCondUncond">disables cond/uncond batching that is enabled to save memory with - -medvram or - -lowvram (default to false).</param>
        /// <param name="unloadGfpgan">does not do anything. (default to false).</param>
        /// <param name="precision">evaluate at this precision (default to &quot;autocast&quot;).</param>
        /// <param name="upcastSampling">upcast sampling. No effect with - -no-half. Usually produces similar results to - -no-half with better performance while using less memory. (default to false).</param>
        /// <param name="share">use share&#x3D;True for gradio and make the UI accessible through their site (default to false).</param>
        /// <param name="ngrok">ngrok authtoken, alternative to gradio - -share.</param>
        /// <param name="ngrokRegion">does not do anything. (default to &quot;&quot;).</param>
        /// <param name="ngrokOptions">The options to pass to ngrok in JSON format, e.g.: &#39;{\&quot;authtoken_from_env\&quot;:true, \&quot;basic_auth\&quot;:\&quot;user:password\&quot;, \&quot;oauth_provider\&quot;:\&quot;google\&quot;, \&quot;oauth_allow_emails\&quot;:\&quot;user@asdf.com\&quot;}&#39;.</param>
        /// <param name="enableInsecureExtensionAccess">enable extensions tab regardless of other options (default to false).</param>
        /// <param name="codeformerModelsPath">Path to directory with codeformer model file(s). (default to &quot;C:\stable\stable-diffusion-webui\models\Codeformer&quot;).</param>
        /// <param name="gfpganModelsPath">Path to directory with GFPGAN model file(s). (default to &quot;C:\stable\stable-diffusion-webui\models\GFPGAN&quot;).</param>
        /// <param name="esrganModelsPath">Path to directory with ESRGAN model file(s). (default to &quot;C:\stable\stable-diffusion-webui\models\ESRGAN&quot;).</param>
        /// <param name="bsrganModelsPath">Path to directory with BSRGAN model file(s). (default to &quot;C:\stable\stable-diffusion-webui\models\BSRGAN&quot;).</param>
        /// <param name="realesrganModelsPath">Path to directory with RealESRGAN model file(s). (default to &quot;C:\stable\stable-diffusion-webui\models\RealESRGAN&quot;).</param>
        /// <param name="clipModelsPath">Path to directory with CLIP model file(s)..</param>
        /// <param name="xformers">enable xformers for cross attention layers (default to false).</param>
        /// <param name="forceEnableXformers">enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work (default to false).</param>
        /// <param name="xformersFlashAttention">enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only) (default to false).</param>
        /// <param name="deepdanbooru">does not do anything (default to false).</param>
        /// <param name="optSplitAttention">prefer Doggettx&#39;s cross-attention layer optimization for automatic choice of optimization (default to false).</param>
        /// <param name="optSubQuadAttention">prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization (default to false).</param>
        /// <param name="subQuadQChunkSize">query chunk size for the sub-quadratic cross-attention layer optimization to use (default to 1024).</param>
        /// <param name="subQuadKvChunkSize">kv chunk size for the sub-quadratic cross-attention layer optimization to use.</param>
        /// <param name="subQuadChunkThreshold">the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking.</param>
        /// <param name="optSplitAttentionInvokeai">prefer InvokeAI&#39;s cross-attention layer optimization for automatic choice of optimization (default to false).</param>
        /// <param name="optSplitAttentionV1">prefer older version of split attention optimization for automatic choice of optimization (default to false).</param>
        /// <param name="optSdpAttention">prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.* (default to false).</param>
        /// <param name="optSdpNoMemAttention">prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.* (default to false).</param>
        /// <param name="disableOptSplitAttention">prefer no cross-attention layer optimization for automatic choice of optimization (default to false).</param>
        /// <param name="disableNanCheck">do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI (default to false).</param>
        /// <param name="useCpu">use CPU as torch device for specified modules.</param>
        /// <param name="listen">launch gradio with 0.0.0.0 as server name, allowing to respond to network requests (default to false).</param>
        /// <param name="port">launch gradio with given server port, you need root/admin rights for ports &lt; 1024, defaults to 7860 if available.</param>
        /// <param name="showNegativePrompt">does not do anything (default to false).</param>
        /// <param name="uiConfigFile">filename to use for ui configuration (default to &quot;C:\stable\stable-diffusion-webui\ui-config.json&quot;).</param>
        /// <param name="hideUiDirConfig">hide directory configuration from webui (default to false).</param>
        /// <param name="freezeSettings">disable editing settings (default to false).</param>
        /// <param name="uiSettingsFile">filename to use for ui settings (default to &quot;C:\stable\stable-diffusion-webui\config.json&quot;).</param>
        /// <param name="gradioDebug">launch gradio with - -debug option (default to false).</param>
        /// <param name="gradioAuth">set gradio authentication like \&quot;username:password\&quot;; or comma-delimit multiple like \&quot;u1:p1,u2:p2,u3:p3\&quot;.</param>
        /// <param name="gradioAuthPath">set gradio authentication file path ex. \&quot;/path/to/auth/file\&quot; same auth format as - -gradio-auth.</param>
        /// <param name="gradioImg2imgTool">does not do anything.</param>
        /// <param name="gradioInpaintTool">does not do anything.</param>
        /// <param name="gradioAllowedPath">add path to gradio&#39;s allowed_paths, make it possible to serve files from it.</param>
        /// <param name="optChannelslast">change memory type for stable diffusion to channels last (default to false).</param>
        /// <param name="stylesFile">filename to use for styles (default to &quot;C:\stable\stable-diffusion-webui\styles.csv&quot;).</param>
        /// <param name="autolaunch">open the webui URL in the system&#39;s default browser upon launch (default to false).</param>
        /// <param name="theme">launches the UI with light or dark theme.</param>
        /// <param name="useTextboxSeed">use textbox for seeds in UI (no up/down, but possible to input long seeds) (default to false).</param>
        /// <param name="disableConsoleProgressbars">do not output progressbars to console (default to false).</param>
        /// <param name="enableConsolePrompts">print prompts to console when generating with txt2img and img2img (default to false).</param>
        /// <param name="vaePath">Checkpoint to use as VAE; setting this argument disables all settings related to VAE.</param>
        /// <param name="disableSafeUnpickle">disable checking pytorch models for malicious code (default to false).</param>
        /// <param name="api">use api&#x3D;True to launch the API together with the webui (use - -nowebui instead for only the API) (default to false).</param>
        /// <param name="apiAuth">Set authentication for API like \&quot;username:password\&quot;; or comma-delimit multiple like \&quot;u1:p1,u2:p2,u3:p3\&quot;.</param>
        /// <param name="apiLog">use api-log&#x3D;True to enable logging of all API requests (default to false).</param>
        /// <param name="nowebui">use api&#x3D;True to launch the API instead of the webui (default to false).</param>
        /// <param name="uiDebugMode">Don&#39;t load model to quickly launch UI (default to false).</param>
        /// <param name="deviceId">Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES&#x3D;0,1,etc might be needed before).</param>
        /// <param name="administrator">Administrator rights (default to false).</param>
        /// <param name="corsAllowOrigins">Allowed CORS origin(s) in the form of a comma-separated list (no spaces).</param>
        /// <param name="corsAllowOriginsRegex">Allowed CORS origin(s) in the form of a single regular expression.</param>
        /// <param name="tlsKeyfile">Partially enables TLS, requires - -tls-certfile to fully function.</param>
        /// <param name="tlsCertfile">Partially enables TLS, requires - -tls-keyfile to fully function.</param>
        /// <param name="disableTlsVerify">When passed, enables the use of self-signed certificates..</param>
        /// <param name="serverName">Sets hostname of server.</param>
        /// <param name="gradioQueue">does not do anything (default to true).</param>
        /// <param name="noGradioQueue">Disables gradio queue; causes the webpage to use http requests instead of websockets; was the defaul in earlier versions (default to false).</param>
        /// <param name="skipVersionCheck">Do not check versions of torch and xformers (default to false).</param>
        /// <param name="noHashing">disable sha256 hashing of checkpoints to help loading performance (default to false).</param>
        /// <param name="noDownloadSdModel">don&#39;t download SD1.5 model even if no model is found in - -ckpt-dir (default to false).</param>
        /// <param name="subpath">customize the subpath for gradio, use with reverse proxy.</param>
        /// <param name="addStopRoute">add /_stop route to stop server (default to false).</param>
        /// <param name="apiServerStop">enable server stop/restart/kill via api (default to false).</param>
        /// <param name="timeoutKeepAlive">set timeout_keep_alive for uvicorn (default to 30).</param>
        /// <param name="addnetMaxModelCount">The maximum number of additional network model can be used. (default to 5).</param>
        /// <param name="controlnetDir">Path to directory with ControlNet models.</param>
        /// <param name="controlnetAnnotatorModelsPath">Path to directory with annotator model directories.</param>
        /// <param name="noHalfControlnet">do not switch the ControlNet models to 16-bit floats (only needed without - -no-half).</param>
        /// <param name="controlnetPreprocessorCacheSize">Cache size for controlnet preprocessor results (default to 16).</param>
        /// <param name="controlnetLoglevel">Set the log level (DEBUG, INFO, WARNING, ERROR, CRITICAL) (default to &quot;INFO&quot;).</param>
        /// <param name="ldsrModelsPath">Path to directory with LDSR model file(s). (default to &quot;C:\stable\stable-diffusion-webui\models\LDSR&quot;).</param>
        /// <param name="loraDir">Path to directory with Lora networks. (default to &quot;C:\stable\stable-diffusion-webui\models\Lora&quot;).</param>
        /// <param name="lycoDirBackcompat">Path to directory with LyCORIS networks (for backawards compatibility; can also use - -lyco-dir). (default to &quot;C:\stable\stable-diffusion-webui\models\LyCORIS&quot;).</param>
        /// <param name="scunetModelsPath">Path to directory with ScuNET model file(s). (default to &quot;C:\stable\stable-diffusion-webui\models\ScuNET&quot;).</param>
        /// <param name="swinirModelsPath">Path to directory with SwinIR model file(s). (default to &quot;C:\stable\stable-diffusion-webui\models\SwinIR&quot;).</param>
        public Flags(bool f = false, bool updateAllExtensions = false, bool skipPythonVersionCheck = false, bool skipTorchCudaTest = false, bool reinstallXformers = false, bool reinstallTorch = false, bool updateCheck = false, bool testServer = false, bool skipPrepareEnvironment = false, bool skipInstall = false, bool doNotDownloadClip = false, string dataDir = @"C:\stable\stable-diffusion-webui", string config = @"C:\stable\stable-diffusion-webui\configs\v1-inference.yaml", string ckpt = @"C:\stable\stable-diffusion-webui\model.ckpt", string ckptDir = default(string), string vaeDir = default(string), string gfpganDir = @"./GFPGAN", string gfpganModel = default(string), bool noHalf = false, bool noHalfVae = false, bool noProgressbarHiding = false, int maxBatchCount = 16, string embeddingsDir = @"C:\stable\stable-diffusion-webui\embeddings", string textualInversionTemplatesDir = @"C:\stable\stable-diffusion-webui\textual_inversion_templates", string hypernetworkDir = @"C:\stable\stable-diffusion-webui\models\hypernetworks", string localizationsDir = @"C:\stable\stable-diffusion-webui\localizations", bool allowCode = false, bool medvram = false, bool lowvram = false, bool lowram = false, bool alwaysBatchCondUncond = false, bool unloadGfpgan = false, string precision = @"autocast", bool upcastSampling = false, bool share = false, string ngrok = default(string), string ngrokRegion = @"", Object ngrokOptions = default(Object), bool enableInsecureExtensionAccess = false, string codeformerModelsPath = @"C:\stable\stable-diffusion-webui\models\Codeformer", string gfpganModelsPath = @"C:\stable\stable-diffusion-webui\models\GFPGAN", string esrganModelsPath = @"C:\stable\stable-diffusion-webui\models\ESRGAN", string bsrganModelsPath = @"C:\stable\stable-diffusion-webui\models\BSRGAN", string realesrganModelsPath = @"C:\stable\stable-diffusion-webui\models\RealESRGAN", string clipModelsPath = default(string), bool xformers = false, bool forceEnableXformers = false, bool xformersFlashAttention = false, bool deepdanbooru = false, bool optSplitAttention = false, bool optSubQuadAttention = false, int subQuadQChunkSize = 1024, string subQuadKvChunkSize = default(string), string subQuadChunkThreshold = default(string), bool optSplitAttentionInvokeai = false, bool optSplitAttentionV1 = false, bool optSdpAttention = false, bool optSdpNoMemAttention = false, bool disableOptSplitAttention = false, bool disableNanCheck = false, List<Object> useCpu = default(List<Object>), bool listen = false, string port = default(string), bool showNegativePrompt = false, string uiConfigFile = @"C:\stable\stable-diffusion-webui\ui-config.json", bool hideUiDirConfig = false, bool freezeSettings = false, string uiSettingsFile = @"C:\stable\stable-diffusion-webui\config.json", bool gradioDebug = false, string gradioAuth = default(string), string gradioAuthPath = default(string), string gradioImg2imgTool = default(string), string gradioInpaintTool = default(string), string gradioAllowedPath = default(string), bool optChannelslast = false, string stylesFile = @"C:\stable\stable-diffusion-webui\styles.csv", bool autolaunch = false, string theme = default(string), bool useTextboxSeed = false, bool disableConsoleProgressbars = false, bool enableConsolePrompts = false, string vaePath = default(string), bool disableSafeUnpickle = false, bool api = false, string apiAuth = default(string), bool apiLog = false, bool nowebui = false, bool uiDebugMode = false, string deviceId = default(string), bool administrator = false, string corsAllowOrigins = default(string), string corsAllowOriginsRegex = default(string), string tlsKeyfile = default(string), string tlsCertfile = default(string), string disableTlsVerify = default(string), string serverName = default(string), bool gradioQueue = true, bool noGradioQueue = false, bool skipVersionCheck = false, bool noHashing = false, bool noDownloadSdModel = false, string subpath = default(string), bool addStopRoute = false, bool apiServerStop = false, int timeoutKeepAlive = 30, int addnetMaxModelCount = 5, string controlnetDir = default(string), string controlnetAnnotatorModelsPath = default(string), string noHalfControlnet = default(string), int controlnetPreprocessorCacheSize = 16, string controlnetLoglevel = @"INFO", string ldsrModelsPath = @"C:\stable\stable-diffusion-webui\models\LDSR", string loraDir = @"C:\stable\stable-diffusion-webui\models\Lora", string lycoDirBackcompat = @"C:\stable\stable-diffusion-webui\models\LyCORIS", string scunetModelsPath = @"C:\stable\stable-diffusion-webui\models\ScuNET", string swinirModelsPath = @"C:\stable\stable-diffusion-webui\models\SwinIR")
        {
            this.F = f;
            this.UpdateAllExtensions = updateAllExtensions;
            this.SkipPythonVersionCheck = skipPythonVersionCheck;
            this.SkipTorchCudaTest = skipTorchCudaTest;
            this.ReinstallXformers = reinstallXformers;
            this.ReinstallTorch = reinstallTorch;
            this.UpdateCheck = updateCheck;
            this.TestServer = testServer;
            this.SkipPrepareEnvironment = skipPrepareEnvironment;
            this.SkipInstall = skipInstall;
            this.DoNotDownloadClip = doNotDownloadClip;
            // use default value if no "dataDir" provided
            this.DataDir = dataDir ?? @"C:\stable\stable-diffusion-webui";
            // use default value if no "config" provided
            this.Config = config ?? @"C:\stable\stable-diffusion-webui\configs\v1-inference.yaml";
            // use default value if no "ckpt" provided
            this.Ckpt = ckpt ?? @"C:\stable\stable-diffusion-webui\model.ckpt";
            this.CkptDir = ckptDir;
            this.VaeDir = vaeDir;
            // use default value if no "gfpganDir" provided
            this.GfpganDir = gfpganDir ?? @"./GFPGAN";
            this.GfpganModel = gfpganModel;
            this.NoHalf = noHalf;
            this.NoHalfVae = noHalfVae;
            this.NoProgressbarHiding = noProgressbarHiding;
            this.MaxBatchCount = maxBatchCount;
            // use default value if no "embeddingsDir" provided
            this.EmbeddingsDir = embeddingsDir ?? @"C:\stable\stable-diffusion-webui\embeddings";
            // use default value if no "textualInversionTemplatesDir" provided
            this.TextualInversionTemplatesDir = textualInversionTemplatesDir ?? @"C:\stable\stable-diffusion-webui\textual_inversion_templates";
            // use default value if no "hypernetworkDir" provided
            this.HypernetworkDir = hypernetworkDir ?? @"C:\stable\stable-diffusion-webui\models\hypernetworks";
            // use default value if no "localizationsDir" provided
            this.LocalizationsDir = localizationsDir ?? @"C:\stable\stable-diffusion-webui\localizations";
            this.AllowCode = allowCode;
            this.Medvram = medvram;
            this.Lowvram = lowvram;
            this.Lowram = lowram;
            this.AlwaysBatchCondUncond = alwaysBatchCondUncond;
            this.UnloadGfpgan = unloadGfpgan;
            // use default value if no "precision" provided
            this.Precision = precision ?? @"autocast";
            this.UpcastSampling = upcastSampling;
            this.Share = share;
            this.Ngrok = ngrok;
            // use default value if no "ngrokRegion" provided
            this.NgrokRegion = ngrokRegion ?? @"";
            this.NgrokOptions = ngrokOptions;
            this.EnableInsecureExtensionAccess = enableInsecureExtensionAccess;
            // use default value if no "codeformerModelsPath" provided
            this.CodeformerModelsPath = codeformerModelsPath ?? @"C:\stable\stable-diffusion-webui\models\Codeformer";
            // use default value if no "gfpganModelsPath" provided
            this.GfpganModelsPath = gfpganModelsPath ?? @"C:\stable\stable-diffusion-webui\models\GFPGAN";
            // use default value if no "esrganModelsPath" provided
            this.EsrganModelsPath = esrganModelsPath ?? @"C:\stable\stable-diffusion-webui\models\ESRGAN";
            // use default value if no "bsrganModelsPath" provided
            this.BsrganModelsPath = bsrganModelsPath ?? @"C:\stable\stable-diffusion-webui\models\BSRGAN";
            // use default value if no "realesrganModelsPath" provided
            this.RealesrganModelsPath = realesrganModelsPath ?? @"C:\stable\stable-diffusion-webui\models\RealESRGAN";
            this.ClipModelsPath = clipModelsPath;
            this.Xformers = xformers;
            this.ForceEnableXformers = forceEnableXformers;
            this.XformersFlashAttention = xformersFlashAttention;
            this.Deepdanbooru = deepdanbooru;
            this.OptSplitAttention = optSplitAttention;
            this.OptSubQuadAttention = optSubQuadAttention;
            this.SubQuadQChunkSize = subQuadQChunkSize;
            this.SubQuadKvChunkSize = subQuadKvChunkSize;
            this.SubQuadChunkThreshold = subQuadChunkThreshold;
            this.OptSplitAttentionInvokeai = optSplitAttentionInvokeai;
            this.OptSplitAttentionV1 = optSplitAttentionV1;
            this.OptSdpAttention = optSdpAttention;
            this.OptSdpNoMemAttention = optSdpNoMemAttention;
            this.DisableOptSplitAttention = disableOptSplitAttention;
            this.DisableNanCheck = disableNanCheck;
            this.UseCpu = useCpu;
            this.Listen = listen;
            this.Port = port;
            this.ShowNegativePrompt = showNegativePrompt;
            // use default value if no "uiConfigFile" provided
            this.UiConfigFile = uiConfigFile ?? @"C:\stable\stable-diffusion-webui\ui-config.json";
            this.HideUiDirConfig = hideUiDirConfig;
            this.FreezeSettings = freezeSettings;
            // use default value if no "uiSettingsFile" provided
            this.UiSettingsFile = uiSettingsFile ?? @"C:\stable\stable-diffusion-webui\config.json";
            this.GradioDebug = gradioDebug;
            this.GradioAuth = gradioAuth;
            this.GradioAuthPath = gradioAuthPath;
            this.GradioImg2imgTool = gradioImg2imgTool;
            this.GradioInpaintTool = gradioInpaintTool;
            this.GradioAllowedPath = gradioAllowedPath;
            this.OptChannelslast = optChannelslast;
            // use default value if no "stylesFile" provided
            this.StylesFile = stylesFile ?? @"C:\stable\stable-diffusion-webui\styles.csv";
            this.Autolaunch = autolaunch;
            this.Theme = theme;
            this.UseTextboxSeed = useTextboxSeed;
            this.DisableConsoleProgressbars = disableConsoleProgressbars;
            this.EnableConsolePrompts = enableConsolePrompts;
            this.VaePath = vaePath;
            this.DisableSafeUnpickle = disableSafeUnpickle;
            this.Api = api;
            this.ApiAuth = apiAuth;
            this.ApiLog = apiLog;
            this.Nowebui = nowebui;
            this.UiDebugMode = uiDebugMode;
            this.DeviceId = deviceId;
            this.Administrator = administrator;
            this.CorsAllowOrigins = corsAllowOrigins;
            this.CorsAllowOriginsRegex = corsAllowOriginsRegex;
            this.TlsKeyfile = tlsKeyfile;
            this.TlsCertfile = tlsCertfile;
            this.DisableTlsVerify = disableTlsVerify;
            this.ServerName = serverName;
            this.GradioQueue = gradioQueue;
            this.NoGradioQueue = noGradioQueue;
            this.SkipVersionCheck = skipVersionCheck;
            this.NoHashing = noHashing;
            this.NoDownloadSdModel = noDownloadSdModel;
            this.Subpath = subpath;
            this.AddStopRoute = addStopRoute;
            this.ApiServerStop = apiServerStop;
            this.TimeoutKeepAlive = timeoutKeepAlive;
            this.AddnetMaxModelCount = addnetMaxModelCount;
            this.ControlnetDir = controlnetDir;
            this.ControlnetAnnotatorModelsPath = controlnetAnnotatorModelsPath;
            this.NoHalfControlnet = noHalfControlnet;
            this.ControlnetPreprocessorCacheSize = controlnetPreprocessorCacheSize;
            // use default value if no "controlnetLoglevel" provided
            this.ControlnetLoglevel = controlnetLoglevel ?? @"INFO";
            // use default value if no "ldsrModelsPath" provided
            this.LdsrModelsPath = ldsrModelsPath ?? @"C:\stable\stable-diffusion-webui\models\LDSR";
            // use default value if no "loraDir" provided
            this.LoraDir = loraDir ?? @"C:\stable\stable-diffusion-webui\models\Lora";
            // use default value if no "lycoDirBackcompat" provided
            this.LycoDirBackcompat = lycoDirBackcompat ?? @"C:\stable\stable-diffusion-webui\models\LyCORIS";
            // use default value if no "scunetModelsPath" provided
            this.ScunetModelsPath = scunetModelsPath ?? @"C:\stable\stable-diffusion-webui\models\ScuNET";
            // use default value if no "swinirModelsPath" provided
            this.SwinirModelsPath = swinirModelsPath ?? @"C:\stable\stable-diffusion-webui\models\SwinIR";
        }

        /// <summary>
        /// &#x3D;&#x3D;SUPPRESS&#x3D;&#x3D;
        /// </summary>
        /// <value>&#x3D;&#x3D;SUPPRESS&#x3D;&#x3D;</value>
        [DataMember(Name = "f", EmitDefaultValue = true)]
        public bool F { get; set; }

        /// <summary>
        /// launch.py argument: download updates for all extensions when starting the program
        /// </summary>
        /// <value>launch.py argument: download updates for all extensions when starting the program</value>
        [DataMember(Name = "update_all_extensions", EmitDefaultValue = true)]
        public bool UpdateAllExtensions { get; set; }

        /// <summary>
        /// launch.py argument: do not check python version
        /// </summary>
        /// <value>launch.py argument: do not check python version</value>
        [DataMember(Name = "skip_python_version_check", EmitDefaultValue = true)]
        public bool SkipPythonVersionCheck { get; set; }

        /// <summary>
        /// launch.py argument: do not check if CUDA is able to work properly
        /// </summary>
        /// <value>launch.py argument: do not check if CUDA is able to work properly</value>
        [DataMember(Name = "skip_torch_cuda_test", EmitDefaultValue = true)]
        public bool SkipTorchCudaTest { get; set; }

        /// <summary>
        /// launch.py argument: install the appropriate version of xformers even if you have some version already installed
        /// </summary>
        /// <value>launch.py argument: install the appropriate version of xformers even if you have some version already installed</value>
        [DataMember(Name = "reinstall_xformers", EmitDefaultValue = true)]
        public bool ReinstallXformers { get; set; }

        /// <summary>
        /// launch.py argument: install the appropriate version of torch even if you have some version already installed
        /// </summary>
        /// <value>launch.py argument: install the appropriate version of torch even if you have some version already installed</value>
        [DataMember(Name = "reinstall_torch", EmitDefaultValue = true)]
        public bool ReinstallTorch { get; set; }

        /// <summary>
        /// launch.py argument: check for updates at startup
        /// </summary>
        /// <value>launch.py argument: check for updates at startup</value>
        [DataMember(Name = "update_check", EmitDefaultValue = true)]
        public bool UpdateCheck { get; set; }

        /// <summary>
        /// launch.py argument: configure server for testing
        /// </summary>
        /// <value>launch.py argument: configure server for testing</value>
        [DataMember(Name = "test_server", EmitDefaultValue = true)]
        public bool TestServer { get; set; }

        /// <summary>
        /// launch.py argument: skip all environment preparation
        /// </summary>
        /// <value>launch.py argument: skip all environment preparation</value>
        [DataMember(Name = "skip_prepare_environment", EmitDefaultValue = true)]
        public bool SkipPrepareEnvironment { get; set; }

        /// <summary>
        /// launch.py argument: skip installation of packages
        /// </summary>
        /// <value>launch.py argument: skip installation of packages</value>
        [DataMember(Name = "skip_install", EmitDefaultValue = true)]
        public bool SkipInstall { get; set; }

        /// <summary>
        /// do not download CLIP model even if it&#39;s not included in the checkpoint
        /// </summary>
        /// <value>do not download CLIP model even if it&#39;s not included in the checkpoint</value>
        [DataMember(Name = "do_not_download_clip", EmitDefaultValue = true)]
        public bool DoNotDownloadClip { get; set; }

        /// <summary>
        /// base path where all user data is stored
        /// </summary>
        /// <value>base path where all user data is stored</value>
        [DataMember(Name = "data_dir", EmitDefaultValue = false)]
        public string DataDir { get; set; }

        /// <summary>
        /// path to config which constructs model
        /// </summary>
        /// <value>path to config which constructs model</value>
        [DataMember(Name = "config", EmitDefaultValue = false)]
        public string Config { get; set; }

        /// <summary>
        /// path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded
        /// </summary>
        /// <value>path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded</value>
        [DataMember(Name = "ckpt", EmitDefaultValue = false)]
        public string Ckpt { get; set; }

        /// <summary>
        /// Path to directory with stable diffusion checkpoints
        /// </summary>
        /// <value>Path to directory with stable diffusion checkpoints</value>
        [DataMember(Name = "ckpt_dir", EmitDefaultValue = false)]
        public string CkptDir { get; set; }

        /// <summary>
        /// Path to directory with VAE files
        /// </summary>
        /// <value>Path to directory with VAE files</value>
        [DataMember(Name = "vae_dir", EmitDefaultValue = false)]
        public string VaeDir { get; set; }

        /// <summary>
        /// GFPGAN directory
        /// </summary>
        /// <value>GFPGAN directory</value>
        [DataMember(Name = "gfpgan_dir", EmitDefaultValue = false)]
        public string GfpganDir { get; set; }

        /// <summary>
        /// GFPGAN model file name
        /// </summary>
        /// <value>GFPGAN model file name</value>
        [DataMember(Name = "gfpgan_model", EmitDefaultValue = false)]
        public string GfpganModel { get; set; }

        /// <summary>
        /// do not switch the model to 16-bit floats
        /// </summary>
        /// <value>do not switch the model to 16-bit floats</value>
        [DataMember(Name = "no_half", EmitDefaultValue = true)]
        public bool NoHalf { get; set; }

        /// <summary>
        /// do not switch the VAE model to 16-bit floats
        /// </summary>
        /// <value>do not switch the VAE model to 16-bit floats</value>
        [DataMember(Name = "no_half_vae", EmitDefaultValue = true)]
        public bool NoHalfVae { get; set; }

        /// <summary>
        /// do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser)
        /// </summary>
        /// <value>do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser)</value>
        [DataMember(Name = "no_progressbar_hiding", EmitDefaultValue = true)]
        public bool NoProgressbarHiding { get; set; }

        /// <summary>
        /// maximum batch count value for the UI
        /// </summary>
        /// <value>maximum batch count value for the UI</value>
        [DataMember(Name = "max_batch_count", EmitDefaultValue = false)]
        public int MaxBatchCount { get; set; }

        /// <summary>
        /// embeddings directory for textual inversion (default: embeddings)
        /// </summary>
        /// <value>embeddings directory for textual inversion (default: embeddings)</value>
        [DataMember(Name = "embeddings_dir", EmitDefaultValue = false)]
        public string EmbeddingsDir { get; set; }

        /// <summary>
        /// directory with textual inversion templates
        /// </summary>
        /// <value>directory with textual inversion templates</value>
        [DataMember(Name = "textual_inversion_templates_dir", EmitDefaultValue = false)]
        public string TextualInversionTemplatesDir { get; set; }

        /// <summary>
        /// hypernetwork directory
        /// </summary>
        /// <value>hypernetwork directory</value>
        [DataMember(Name = "hypernetwork_dir", EmitDefaultValue = false)]
        public string HypernetworkDir { get; set; }

        /// <summary>
        /// localizations directory
        /// </summary>
        /// <value>localizations directory</value>
        [DataMember(Name = "localizations_dir", EmitDefaultValue = false)]
        public string LocalizationsDir { get; set; }

        /// <summary>
        /// allow custom script execution from webui
        /// </summary>
        /// <value>allow custom script execution from webui</value>
        [DataMember(Name = "allow_code", EmitDefaultValue = true)]
        public bool AllowCode { get; set; }

        /// <summary>
        /// enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage
        /// </summary>
        /// <value>enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage</value>
        [DataMember(Name = "medvram", EmitDefaultValue = true)]
        public bool Medvram { get; set; }

        /// <summary>
        /// enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage
        /// </summary>
        /// <value>enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage</value>
        [DataMember(Name = "lowvram", EmitDefaultValue = true)]
        public bool Lowvram { get; set; }

        /// <summary>
        /// load stable diffusion checkpoint weights to VRAM instead of RAM
        /// </summary>
        /// <value>load stable diffusion checkpoint weights to VRAM instead of RAM</value>
        [DataMember(Name = "lowram", EmitDefaultValue = true)]
        public bool Lowram { get; set; }

        /// <summary>
        /// disables cond/uncond batching that is enabled to save memory with - -medvram or - -lowvram
        /// </summary>
        /// <value>disables cond/uncond batching that is enabled to save memory with - -medvram or - -lowvram</value>
        [DataMember(Name = "always_batch_cond_uncond", EmitDefaultValue = true)]
        public bool AlwaysBatchCondUncond { get; set; }

        /// <summary>
        /// does not do anything.
        /// </summary>
        /// <value>does not do anything.</value>
        [DataMember(Name = "unload_gfpgan", EmitDefaultValue = true)]
        public bool UnloadGfpgan { get; set; }

        /// <summary>
        /// evaluate at this precision
        /// </summary>
        /// <value>evaluate at this precision</value>
        [DataMember(Name = "precision", EmitDefaultValue = false)]
        public string Precision { get; set; }

        /// <summary>
        /// upcast sampling. No effect with - -no-half. Usually produces similar results to - -no-half with better performance while using less memory.
        /// </summary>
        /// <value>upcast sampling. No effect with - -no-half. Usually produces similar results to - -no-half with better performance while using less memory.</value>
        [DataMember(Name = "upcast_sampling", EmitDefaultValue = true)]
        public bool UpcastSampling { get; set; }

        /// <summary>
        /// use share&#x3D;True for gradio and make the UI accessible through their site
        /// </summary>
        /// <value>use share&#x3D;True for gradio and make the UI accessible through their site</value>
        [DataMember(Name = "share", EmitDefaultValue = true)]
        public bool Share { get; set; }

        /// <summary>
        /// ngrok authtoken, alternative to gradio - -share
        /// </summary>
        /// <value>ngrok authtoken, alternative to gradio - -share</value>
        [DataMember(Name = "ngrok", EmitDefaultValue = false)]
        public string Ngrok { get; set; }

        /// <summary>
        /// does not do anything.
        /// </summary>
        /// <value>does not do anything.</value>
        [DataMember(Name = "ngrok_region", EmitDefaultValue = false)]
        public string NgrokRegion { get; set; }

        /// <summary>
        /// The options to pass to ngrok in JSON format, e.g.: &#39;{\&quot;authtoken_from_env\&quot;:true, \&quot;basic_auth\&quot;:\&quot;user:password\&quot;, \&quot;oauth_provider\&quot;:\&quot;google\&quot;, \&quot;oauth_allow_emails\&quot;:\&quot;user@asdf.com\&quot;}&#39;
        /// </summary>
        /// <value>The options to pass to ngrok in JSON format, e.g.: &#39;{\&quot;authtoken_from_env\&quot;:true, \&quot;basic_auth\&quot;:\&quot;user:password\&quot;, \&quot;oauth_provider\&quot;:\&quot;google\&quot;, \&quot;oauth_allow_emails\&quot;:\&quot;user@asdf.com\&quot;}&#39;</value>
        [DataMember(Name = "ngrok_options", EmitDefaultValue = false)]
        public Object NgrokOptions { get; set; }

        /// <summary>
        /// enable extensions tab regardless of other options
        /// </summary>
        /// <value>enable extensions tab regardless of other options</value>
        [DataMember(Name = "enable_insecure_extension_access", EmitDefaultValue = true)]
        public bool EnableInsecureExtensionAccess { get; set; }

        /// <summary>
        /// Path to directory with codeformer model file(s).
        /// </summary>
        /// <value>Path to directory with codeformer model file(s).</value>
        [DataMember(Name = "codeformer_models_path", EmitDefaultValue = false)]
        public string CodeformerModelsPath { get; set; }

        /// <summary>
        /// Path to directory with GFPGAN model file(s).
        /// </summary>
        /// <value>Path to directory with GFPGAN model file(s).</value>
        [DataMember(Name = "gfpgan_models_path", EmitDefaultValue = false)]
        public string GfpganModelsPath { get; set; }

        /// <summary>
        /// Path to directory with ESRGAN model file(s).
        /// </summary>
        /// <value>Path to directory with ESRGAN model file(s).</value>
        [DataMember(Name = "esrgan_models_path", EmitDefaultValue = false)]
        public string EsrganModelsPath { get; set; }

        /// <summary>
        /// Path to directory with BSRGAN model file(s).
        /// </summary>
        /// <value>Path to directory with BSRGAN model file(s).</value>
        [DataMember(Name = "bsrgan_models_path", EmitDefaultValue = false)]
        public string BsrganModelsPath { get; set; }

        /// <summary>
        /// Path to directory with RealESRGAN model file(s).
        /// </summary>
        /// <value>Path to directory with RealESRGAN model file(s).</value>
        [DataMember(Name = "realesrgan_models_path", EmitDefaultValue = false)]
        public string RealesrganModelsPath { get; set; }

        /// <summary>
        /// Path to directory with CLIP model file(s).
        /// </summary>
        /// <value>Path to directory with CLIP model file(s).</value>
        [DataMember(Name = "clip_models_path", EmitDefaultValue = false)]
        public string ClipModelsPath { get; set; }

        /// <summary>
        /// enable xformers for cross attention layers
        /// </summary>
        /// <value>enable xformers for cross attention layers</value>
        [DataMember(Name = "xformers", EmitDefaultValue = true)]
        public bool Xformers { get; set; }

        /// <summary>
        /// enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work
        /// </summary>
        /// <value>enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work</value>
        [DataMember(Name = "force_enable_xformers", EmitDefaultValue = true)]
        public bool ForceEnableXformers { get; set; }

        /// <summary>
        /// enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only)
        /// </summary>
        /// <value>enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only)</value>
        [DataMember(Name = "xformers_flash_attention", EmitDefaultValue = true)]
        public bool XformersFlashAttention { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        /// <value>does not do anything</value>
        [DataMember(Name = "deepdanbooru", EmitDefaultValue = true)]
        public bool Deepdanbooru { get; set; }

        /// <summary>
        /// prefer Doggettx&#39;s cross-attention layer optimization for automatic choice of optimization
        /// </summary>
        /// <value>prefer Doggettx&#39;s cross-attention layer optimization for automatic choice of optimization</value>
        [DataMember(Name = "opt_split_attention", EmitDefaultValue = true)]
        public bool OptSplitAttention { get; set; }

        /// <summary>
        /// prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization
        /// </summary>
        /// <value>prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization</value>
        [DataMember(Name = "opt_sub_quad_attention", EmitDefaultValue = true)]
        public bool OptSubQuadAttention { get; set; }

        /// <summary>
        /// query chunk size for the sub-quadratic cross-attention layer optimization to use
        /// </summary>
        /// <value>query chunk size for the sub-quadratic cross-attention layer optimization to use</value>
        [DataMember(Name = "sub_quad_q_chunk_size", EmitDefaultValue = false)]
        public int SubQuadQChunkSize { get; set; }

        /// <summary>
        /// kv chunk size for the sub-quadratic cross-attention layer optimization to use
        /// </summary>
        /// <value>kv chunk size for the sub-quadratic cross-attention layer optimization to use</value>
        [DataMember(Name = "sub_quad_kv_chunk_size", EmitDefaultValue = false)]
        public string SubQuadKvChunkSize { get; set; }

        /// <summary>
        /// the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking
        /// </summary>
        /// <value>the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking</value>
        [DataMember(Name = "sub_quad_chunk_threshold", EmitDefaultValue = false)]
        public string SubQuadChunkThreshold { get; set; }

        /// <summary>
        /// prefer InvokeAI&#39;s cross-attention layer optimization for automatic choice of optimization
        /// </summary>
        /// <value>prefer InvokeAI&#39;s cross-attention layer optimization for automatic choice of optimization</value>
        [DataMember(Name = "opt_split_attention_invokeai", EmitDefaultValue = true)]
        public bool OptSplitAttentionInvokeai { get; set; }

        /// <summary>
        /// prefer older version of split attention optimization for automatic choice of optimization
        /// </summary>
        /// <value>prefer older version of split attention optimization for automatic choice of optimization</value>
        [DataMember(Name = "opt_split_attention_v1", EmitDefaultValue = true)]
        public bool OptSplitAttentionV1 { get; set; }

        /// <summary>
        /// prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.*
        /// </summary>
        /// <value>prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.*</value>
        [DataMember(Name = "opt_sdp_attention", EmitDefaultValue = true)]
        public bool OptSdpAttention { get; set; }

        /// <summary>
        /// prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.*
        /// </summary>
        /// <value>prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.*</value>
        [DataMember(Name = "opt_sdp_no_mem_attention", EmitDefaultValue = true)]
        public bool OptSdpNoMemAttention { get; set; }

        /// <summary>
        /// prefer no cross-attention layer optimization for automatic choice of optimization
        /// </summary>
        /// <value>prefer no cross-attention layer optimization for automatic choice of optimization</value>
        [DataMember(Name = "disable_opt_split_attention", EmitDefaultValue = true)]
        public bool DisableOptSplitAttention { get; set; }

        /// <summary>
        /// do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI
        /// </summary>
        /// <value>do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI</value>
        [DataMember(Name = "disable_nan_check", EmitDefaultValue = true)]
        public bool DisableNanCheck { get; set; }

        /// <summary>
        /// use CPU as torch device for specified modules
        /// </summary>
        /// <value>use CPU as torch device for specified modules</value>
        [DataMember(Name = "use_cpu", EmitDefaultValue = false)]
        public List<Object> UseCpu { get; set; }

        /// <summary>
        /// launch gradio with 0.0.0.0 as server name, allowing to respond to network requests
        /// </summary>
        /// <value>launch gradio with 0.0.0.0 as server name, allowing to respond to network requests</value>
        [DataMember(Name = "listen", EmitDefaultValue = true)]
        public bool Listen { get; set; }

        /// <summary>
        /// launch gradio with given server port, you need root/admin rights for ports &lt; 1024, defaults to 7860 if available
        /// </summary>
        /// <value>launch gradio with given server port, you need root/admin rights for ports &lt; 1024, defaults to 7860 if available</value>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public string Port { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        /// <value>does not do anything</value>
        [DataMember(Name = "show_negative_prompt", EmitDefaultValue = true)]
        public bool ShowNegativePrompt { get; set; }

        /// <summary>
        /// filename to use for ui configuration
        /// </summary>
        /// <value>filename to use for ui configuration</value>
        [DataMember(Name = "ui_config_file", EmitDefaultValue = false)]
        public string UiConfigFile { get; set; }

        /// <summary>
        /// hide directory configuration from webui
        /// </summary>
        /// <value>hide directory configuration from webui</value>
        [DataMember(Name = "hide_ui_dir_config", EmitDefaultValue = true)]
        public bool HideUiDirConfig { get; set; }

        /// <summary>
        /// disable editing settings
        /// </summary>
        /// <value>disable editing settings</value>
        [DataMember(Name = "freeze_settings", EmitDefaultValue = true)]
        public bool FreezeSettings { get; set; }

        /// <summary>
        /// filename to use for ui settings
        /// </summary>
        /// <value>filename to use for ui settings</value>
        [DataMember(Name = "ui_settings_file", EmitDefaultValue = false)]
        public string UiSettingsFile { get; set; }

        /// <summary>
        /// launch gradio with - -debug option
        /// </summary>
        /// <value>launch gradio with - -debug option</value>
        [DataMember(Name = "gradio_debug", EmitDefaultValue = true)]
        public bool GradioDebug { get; set; }

        /// <summary>
        /// set gradio authentication like \&quot;username:password\&quot;; or comma-delimit multiple like \&quot;u1:p1,u2:p2,u3:p3\&quot;
        /// </summary>
        /// <value>set gradio authentication like \&quot;username:password\&quot;; or comma-delimit multiple like \&quot;u1:p1,u2:p2,u3:p3\&quot;</value>
        [DataMember(Name = "gradio_auth", EmitDefaultValue = false)]
        public string GradioAuth { get; set; }

        /// <summary>
        /// set gradio authentication file path ex. \&quot;/path/to/auth/file\&quot; same auth format as - -gradio-auth
        /// </summary>
        /// <value>set gradio authentication file path ex. \&quot;/path/to/auth/file\&quot; same auth format as - -gradio-auth</value>
        [DataMember(Name = "gradio_auth_path", EmitDefaultValue = false)]
        public string GradioAuthPath { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        /// <value>does not do anything</value>
        [DataMember(Name = "gradio_img2img_tool", EmitDefaultValue = false)]
        public string GradioImg2imgTool { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        /// <value>does not do anything</value>
        [DataMember(Name = "gradio_inpaint_tool", EmitDefaultValue = false)]
        public string GradioInpaintTool { get; set; }

        /// <summary>
        /// add path to gradio&#39;s allowed_paths, make it possible to serve files from it
        /// </summary>
        /// <value>add path to gradio&#39;s allowed_paths, make it possible to serve files from it</value>
        [DataMember(Name = "gradio_allowed_path", EmitDefaultValue = false)]
        public string GradioAllowedPath { get; set; }

        /// <summary>
        /// change memory type for stable diffusion to channels last
        /// </summary>
        /// <value>change memory type for stable diffusion to channels last</value>
        [DataMember(Name = "opt_channelslast", EmitDefaultValue = true)]
        public bool OptChannelslast { get; set; }

        /// <summary>
        /// filename to use for styles
        /// </summary>
        /// <value>filename to use for styles</value>
        [DataMember(Name = "styles_file", EmitDefaultValue = false)]
        public string StylesFile { get; set; }

        /// <summary>
        /// open the webui URL in the system&#39;s default browser upon launch
        /// </summary>
        /// <value>open the webui URL in the system&#39;s default browser upon launch</value>
        [DataMember(Name = "autolaunch", EmitDefaultValue = true)]
        public bool Autolaunch { get; set; }

        /// <summary>
        /// launches the UI with light or dark theme
        /// </summary>
        /// <value>launches the UI with light or dark theme</value>
        [DataMember(Name = "theme", EmitDefaultValue = false)]
        public string Theme { get; set; }

        /// <summary>
        /// use textbox for seeds in UI (no up/down, but possible to input long seeds)
        /// </summary>
        /// <value>use textbox for seeds in UI (no up/down, but possible to input long seeds)</value>
        [DataMember(Name = "use_textbox_seed", EmitDefaultValue = true)]
        public bool UseTextboxSeed { get; set; }

        /// <summary>
        /// do not output progressbars to console
        /// </summary>
        /// <value>do not output progressbars to console</value>
        [DataMember(Name = "disable_console_progressbars", EmitDefaultValue = true)]
        public bool DisableConsoleProgressbars { get; set; }

        /// <summary>
        /// print prompts to console when generating with txt2img and img2img
        /// </summary>
        /// <value>print prompts to console when generating with txt2img and img2img</value>
        [DataMember(Name = "enable_console_prompts", EmitDefaultValue = true)]
        public bool EnableConsolePrompts { get; set; }

        /// <summary>
        /// Checkpoint to use as VAE; setting this argument disables all settings related to VAE
        /// </summary>
        /// <value>Checkpoint to use as VAE; setting this argument disables all settings related to VAE</value>
        [DataMember(Name = "vae_path", EmitDefaultValue = false)]
        public string VaePath { get; set; }

        /// <summary>
        /// disable checking pytorch models for malicious code
        /// </summary>
        /// <value>disable checking pytorch models for malicious code</value>
        [DataMember(Name = "disable_safe_unpickle", EmitDefaultValue = true)]
        public bool DisableSafeUnpickle { get; set; }

        /// <summary>
        /// use api&#x3D;True to launch the API together with the webui (use - -nowebui instead for only the API)
        /// </summary>
        /// <value>use api&#x3D;True to launch the API together with the webui (use - -nowebui instead for only the API)</value>
        [DataMember(Name = "api", EmitDefaultValue = true)]
        public bool Api { get; set; }

        /// <summary>
        /// Set authentication for API like \&quot;username:password\&quot;; or comma-delimit multiple like \&quot;u1:p1,u2:p2,u3:p3\&quot;
        /// </summary>
        /// <value>Set authentication for API like \&quot;username:password\&quot;; or comma-delimit multiple like \&quot;u1:p1,u2:p2,u3:p3\&quot;</value>
        [DataMember(Name = "api_auth", EmitDefaultValue = false)]
        public string ApiAuth { get; set; }

        /// <summary>
        /// use api-log&#x3D;True to enable logging of all API requests
        /// </summary>
        /// <value>use api-log&#x3D;True to enable logging of all API requests</value>
        [DataMember(Name = "api_log", EmitDefaultValue = true)]
        public bool ApiLog { get; set; }

        /// <summary>
        /// use api&#x3D;True to launch the API instead of the webui
        /// </summary>
        /// <value>use api&#x3D;True to launch the API instead of the webui</value>
        [DataMember(Name = "nowebui", EmitDefaultValue = true)]
        public bool Nowebui { get; set; }

        /// <summary>
        /// Don&#39;t load model to quickly launch UI
        /// </summary>
        /// <value>Don&#39;t load model to quickly launch UI</value>
        [DataMember(Name = "ui_debug_mode", EmitDefaultValue = true)]
        public bool UiDebugMode { get; set; }

        /// <summary>
        /// Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES&#x3D;0,1,etc might be needed before)
        /// </summary>
        /// <value>Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES&#x3D;0,1,etc might be needed before)</value>
        [DataMember(Name = "device_id", EmitDefaultValue = false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Administrator rights
        /// </summary>
        /// <value>Administrator rights</value>
        [DataMember(Name = "administrator", EmitDefaultValue = true)]
        public bool Administrator { get; set; }

        /// <summary>
        /// Allowed CORS origin(s) in the form of a comma-separated list (no spaces)
        /// </summary>
        /// <value>Allowed CORS origin(s) in the form of a comma-separated list (no spaces)</value>
        [DataMember(Name = "cors_allow_origins", EmitDefaultValue = false)]
        public string CorsAllowOrigins { get; set; }

        /// <summary>
        /// Allowed CORS origin(s) in the form of a single regular expression
        /// </summary>
        /// <value>Allowed CORS origin(s) in the form of a single regular expression</value>
        [DataMember(Name = "cors_allow_origins_regex", EmitDefaultValue = false)]
        public string CorsAllowOriginsRegex { get; set; }

        /// <summary>
        /// Partially enables TLS, requires - -tls-certfile to fully function
        /// </summary>
        /// <value>Partially enables TLS, requires - -tls-certfile to fully function</value>
        [DataMember(Name = "tls_keyfile", EmitDefaultValue = false)]
        public string TlsKeyfile { get; set; }

        /// <summary>
        /// Partially enables TLS, requires - -tls-keyfile to fully function
        /// </summary>
        /// <value>Partially enables TLS, requires - -tls-keyfile to fully function</value>
        [DataMember(Name = "tls_certfile", EmitDefaultValue = false)]
        public string TlsCertfile { get; set; }

        /// <summary>
        /// When passed, enables the use of self-signed certificates.
        /// </summary>
        /// <value>When passed, enables the use of self-signed certificates.</value>
        [DataMember(Name = "disable_tls_verify", EmitDefaultValue = false)]
        public string DisableTlsVerify { get; set; }

        /// <summary>
        /// Sets hostname of server
        /// </summary>
        /// <value>Sets hostname of server</value>
        [DataMember(Name = "server_name", EmitDefaultValue = false)]
        public string ServerName { get; set; }

        /// <summary>
        /// does not do anything
        /// </summary>
        /// <value>does not do anything</value>
        [DataMember(Name = "gradio_queue", EmitDefaultValue = true)]
        public bool GradioQueue { get; set; }

        /// <summary>
        /// Disables gradio queue; causes the webpage to use http requests instead of websockets; was the defaul in earlier versions
        /// </summary>
        /// <value>Disables gradio queue; causes the webpage to use http requests instead of websockets; was the defaul in earlier versions</value>
        [DataMember(Name = "no_gradio_queue", EmitDefaultValue = true)]
        public bool NoGradioQueue { get; set; }

        /// <summary>
        /// Do not check versions of torch and xformers
        /// </summary>
        /// <value>Do not check versions of torch and xformers</value>
        [DataMember(Name = "skip_version_check", EmitDefaultValue = true)]
        public bool SkipVersionCheck { get; set; }

        /// <summary>
        /// disable sha256 hashing of checkpoints to help loading performance
        /// </summary>
        /// <value>disable sha256 hashing of checkpoints to help loading performance</value>
        [DataMember(Name = "no_hashing", EmitDefaultValue = true)]
        public bool NoHashing { get; set; }

        /// <summary>
        /// don&#39;t download SD1.5 model even if no model is found in - -ckpt-dir
        /// </summary>
        /// <value>don&#39;t download SD1.5 model even if no model is found in - -ckpt-dir</value>
        [DataMember(Name = "no_download_sd_model", EmitDefaultValue = true)]
        public bool NoDownloadSdModel { get; set; }

        /// <summary>
        /// customize the subpath for gradio, use with reverse proxy
        /// </summary>
        /// <value>customize the subpath for gradio, use with reverse proxy</value>
        [DataMember(Name = "subpath", EmitDefaultValue = false)]
        public string Subpath { get; set; }

        /// <summary>
        /// add /_stop route to stop server
        /// </summary>
        /// <value>add /_stop route to stop server</value>
        [DataMember(Name = "add_stop_route", EmitDefaultValue = true)]
        public bool AddStopRoute { get; set; }

        /// <summary>
        /// enable server stop/restart/kill via api
        /// </summary>
        /// <value>enable server stop/restart/kill via api</value>
        [DataMember(Name = "api_server_stop", EmitDefaultValue = true)]
        public bool ApiServerStop { get; set; }

        /// <summary>
        /// set timeout_keep_alive for uvicorn
        /// </summary>
        /// <value>set timeout_keep_alive for uvicorn</value>
        [DataMember(Name = "timeout_keep_alive", EmitDefaultValue = false)]
        public int TimeoutKeepAlive { get; set; }

        /// <summary>
        /// The maximum number of additional network model can be used.
        /// </summary>
        /// <value>The maximum number of additional network model can be used.</value>
        [DataMember(Name = "addnet_max_model_count", EmitDefaultValue = false)]
        public int AddnetMaxModelCount { get; set; }

        /// <summary>
        /// Path to directory with ControlNet models
        /// </summary>
        /// <value>Path to directory with ControlNet models</value>
        [DataMember(Name = "controlnet_dir", EmitDefaultValue = false)]
        public string ControlnetDir { get; set; }

        /// <summary>
        /// Path to directory with annotator model directories
        /// </summary>
        /// <value>Path to directory with annotator model directories</value>
        [DataMember(Name = "controlnet_annotator_models_path", EmitDefaultValue = false)]
        public string ControlnetAnnotatorModelsPath { get; set; }

        /// <summary>
        /// do not switch the ControlNet models to 16-bit floats (only needed without - -no-half)
        /// </summary>
        /// <value>do not switch the ControlNet models to 16-bit floats (only needed without - -no-half)</value>
        [DataMember(Name = "no_half_controlnet", EmitDefaultValue = false)]
        public string NoHalfControlnet { get; set; }

        /// <summary>
        /// Cache size for controlnet preprocessor results
        /// </summary>
        /// <value>Cache size for controlnet preprocessor results</value>
        [DataMember(Name = "controlnet_preprocessor_cache_size", EmitDefaultValue = false)]
        public int ControlnetPreprocessorCacheSize { get; set; }

        /// <summary>
        /// Set the log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        /// </summary>
        /// <value>Set the log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</value>
        [DataMember(Name = "controlnet_loglevel", EmitDefaultValue = false)]
        public string ControlnetLoglevel { get; set; }

        /// <summary>
        /// Path to directory with LDSR model file(s).
        /// </summary>
        /// <value>Path to directory with LDSR model file(s).</value>
        [DataMember(Name = "ldsr_models_path", EmitDefaultValue = false)]
        public string LdsrModelsPath { get; set; }

        /// <summary>
        /// Path to directory with Lora networks.
        /// </summary>
        /// <value>Path to directory with Lora networks.</value>
        [DataMember(Name = "lora_dir", EmitDefaultValue = false)]
        public string LoraDir { get; set; }

        /// <summary>
        /// Path to directory with LyCORIS networks (for backawards compatibility; can also use - -lyco-dir).
        /// </summary>
        /// <value>Path to directory with LyCORIS networks (for backawards compatibility; can also use - -lyco-dir).</value>
        [DataMember(Name = "lyco_dir_backcompat", EmitDefaultValue = false)]
        public string LycoDirBackcompat { get; set; }

        /// <summary>
        /// Path to directory with ScuNET model file(s).
        /// </summary>
        /// <value>Path to directory with ScuNET model file(s).</value>
        [DataMember(Name = "scunet_models_path", EmitDefaultValue = false)]
        public string ScunetModelsPath { get; set; }

        /// <summary>
        /// Path to directory with SwinIR model file(s).
        /// </summary>
        /// <value>Path to directory with SwinIR model file(s).</value>
        [DataMember(Name = "swinir_models_path", EmitDefaultValue = false)]
        public string SwinirModelsPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Flags {\n");
            sb.Append("  F: ").Append(F).Append("\n");
            sb.Append("  UpdateAllExtensions: ").Append(UpdateAllExtensions).Append("\n");
            sb.Append("  SkipPythonVersionCheck: ").Append(SkipPythonVersionCheck).Append("\n");
            sb.Append("  SkipTorchCudaTest: ").Append(SkipTorchCudaTest).Append("\n");
            sb.Append("  ReinstallXformers: ").Append(ReinstallXformers).Append("\n");
            sb.Append("  ReinstallTorch: ").Append(ReinstallTorch).Append("\n");
            sb.Append("  UpdateCheck: ").Append(UpdateCheck).Append("\n");
            sb.Append("  TestServer: ").Append(TestServer).Append("\n");
            sb.Append("  SkipPrepareEnvironment: ").Append(SkipPrepareEnvironment).Append("\n");
            sb.Append("  SkipInstall: ").Append(SkipInstall).Append("\n");
            sb.Append("  DoNotDownloadClip: ").Append(DoNotDownloadClip).Append("\n");
            sb.Append("  DataDir: ").Append(DataDir).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Ckpt: ").Append(Ckpt).Append("\n");
            sb.Append("  CkptDir: ").Append(CkptDir).Append("\n");
            sb.Append("  VaeDir: ").Append(VaeDir).Append("\n");
            sb.Append("  GfpganDir: ").Append(GfpganDir).Append("\n");
            sb.Append("  GfpganModel: ").Append(GfpganModel).Append("\n");
            sb.Append("  NoHalf: ").Append(NoHalf).Append("\n");
            sb.Append("  NoHalfVae: ").Append(NoHalfVae).Append("\n");
            sb.Append("  NoProgressbarHiding: ").Append(NoProgressbarHiding).Append("\n");
            sb.Append("  MaxBatchCount: ").Append(MaxBatchCount).Append("\n");
            sb.Append("  EmbeddingsDir: ").Append(EmbeddingsDir).Append("\n");
            sb.Append("  TextualInversionTemplatesDir: ").Append(TextualInversionTemplatesDir).Append("\n");
            sb.Append("  HypernetworkDir: ").Append(HypernetworkDir).Append("\n");
            sb.Append("  LocalizationsDir: ").Append(LocalizationsDir).Append("\n");
            sb.Append("  AllowCode: ").Append(AllowCode).Append("\n");
            sb.Append("  Medvram: ").Append(Medvram).Append("\n");
            sb.Append("  Lowvram: ").Append(Lowvram).Append("\n");
            sb.Append("  Lowram: ").Append(Lowram).Append("\n");
            sb.Append("  AlwaysBatchCondUncond: ").Append(AlwaysBatchCondUncond).Append("\n");
            sb.Append("  UnloadGfpgan: ").Append(UnloadGfpgan).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  UpcastSampling: ").Append(UpcastSampling).Append("\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  Ngrok: ").Append(Ngrok).Append("\n");
            sb.Append("  NgrokRegion: ").Append(NgrokRegion).Append("\n");
            sb.Append("  NgrokOptions: ").Append(NgrokOptions).Append("\n");
            sb.Append("  EnableInsecureExtensionAccess: ").Append(EnableInsecureExtensionAccess).Append("\n");
            sb.Append("  CodeformerModelsPath: ").Append(CodeformerModelsPath).Append("\n");
            sb.Append("  GfpganModelsPath: ").Append(GfpganModelsPath).Append("\n");
            sb.Append("  EsrganModelsPath: ").Append(EsrganModelsPath).Append("\n");
            sb.Append("  BsrganModelsPath: ").Append(BsrganModelsPath).Append("\n");
            sb.Append("  RealesrganModelsPath: ").Append(RealesrganModelsPath).Append("\n");
            sb.Append("  ClipModelsPath: ").Append(ClipModelsPath).Append("\n");
            sb.Append("  Xformers: ").Append(Xformers).Append("\n");
            sb.Append("  ForceEnableXformers: ").Append(ForceEnableXformers).Append("\n");
            sb.Append("  XformersFlashAttention: ").Append(XformersFlashAttention).Append("\n");
            sb.Append("  Deepdanbooru: ").Append(Deepdanbooru).Append("\n");
            sb.Append("  OptSplitAttention: ").Append(OptSplitAttention).Append("\n");
            sb.Append("  OptSubQuadAttention: ").Append(OptSubQuadAttention).Append("\n");
            sb.Append("  SubQuadQChunkSize: ").Append(SubQuadQChunkSize).Append("\n");
            sb.Append("  SubQuadKvChunkSize: ").Append(SubQuadKvChunkSize).Append("\n");
            sb.Append("  SubQuadChunkThreshold: ").Append(SubQuadChunkThreshold).Append("\n");
            sb.Append("  OptSplitAttentionInvokeai: ").Append(OptSplitAttentionInvokeai).Append("\n");
            sb.Append("  OptSplitAttentionV1: ").Append(OptSplitAttentionV1).Append("\n");
            sb.Append("  OptSdpAttention: ").Append(OptSdpAttention).Append("\n");
            sb.Append("  OptSdpNoMemAttention: ").Append(OptSdpNoMemAttention).Append("\n");
            sb.Append("  DisableOptSplitAttention: ").Append(DisableOptSplitAttention).Append("\n");
            sb.Append("  DisableNanCheck: ").Append(DisableNanCheck).Append("\n");
            sb.Append("  UseCpu: ").Append(UseCpu).Append("\n");
            sb.Append("  Listen: ").Append(Listen).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ShowNegativePrompt: ").Append(ShowNegativePrompt).Append("\n");
            sb.Append("  UiConfigFile: ").Append(UiConfigFile).Append("\n");
            sb.Append("  HideUiDirConfig: ").Append(HideUiDirConfig).Append("\n");
            sb.Append("  FreezeSettings: ").Append(FreezeSettings).Append("\n");
            sb.Append("  UiSettingsFile: ").Append(UiSettingsFile).Append("\n");
            sb.Append("  GradioDebug: ").Append(GradioDebug).Append("\n");
            sb.Append("  GradioAuth: ").Append(GradioAuth).Append("\n");
            sb.Append("  GradioAuthPath: ").Append(GradioAuthPath).Append("\n");
            sb.Append("  GradioImg2imgTool: ").Append(GradioImg2imgTool).Append("\n");
            sb.Append("  GradioInpaintTool: ").Append(GradioInpaintTool).Append("\n");
            sb.Append("  GradioAllowedPath: ").Append(GradioAllowedPath).Append("\n");
            sb.Append("  OptChannelslast: ").Append(OptChannelslast).Append("\n");
            sb.Append("  StylesFile: ").Append(StylesFile).Append("\n");
            sb.Append("  Autolaunch: ").Append(Autolaunch).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  UseTextboxSeed: ").Append(UseTextboxSeed).Append("\n");
            sb.Append("  DisableConsoleProgressbars: ").Append(DisableConsoleProgressbars).Append("\n");
            sb.Append("  EnableConsolePrompts: ").Append(EnableConsolePrompts).Append("\n");
            sb.Append("  VaePath: ").Append(VaePath).Append("\n");
            sb.Append("  DisableSafeUnpickle: ").Append(DisableSafeUnpickle).Append("\n");
            sb.Append("  Api: ").Append(Api).Append("\n");
            sb.Append("  ApiAuth: ").Append(ApiAuth).Append("\n");
            sb.Append("  ApiLog: ").Append(ApiLog).Append("\n");
            sb.Append("  Nowebui: ").Append(Nowebui).Append("\n");
            sb.Append("  UiDebugMode: ").Append(UiDebugMode).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  Administrator: ").Append(Administrator).Append("\n");
            sb.Append("  CorsAllowOrigins: ").Append(CorsAllowOrigins).Append("\n");
            sb.Append("  CorsAllowOriginsRegex: ").Append(CorsAllowOriginsRegex).Append("\n");
            sb.Append("  TlsKeyfile: ").Append(TlsKeyfile).Append("\n");
            sb.Append("  TlsCertfile: ").Append(TlsCertfile).Append("\n");
            sb.Append("  DisableTlsVerify: ").Append(DisableTlsVerify).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  GradioQueue: ").Append(GradioQueue).Append("\n");
            sb.Append("  NoGradioQueue: ").Append(NoGradioQueue).Append("\n");
            sb.Append("  SkipVersionCheck: ").Append(SkipVersionCheck).Append("\n");
            sb.Append("  NoHashing: ").Append(NoHashing).Append("\n");
            sb.Append("  NoDownloadSdModel: ").Append(NoDownloadSdModel).Append("\n");
            sb.Append("  Subpath: ").Append(Subpath).Append("\n");
            sb.Append("  AddStopRoute: ").Append(AddStopRoute).Append("\n");
            sb.Append("  ApiServerStop: ").Append(ApiServerStop).Append("\n");
            sb.Append("  TimeoutKeepAlive: ").Append(TimeoutKeepAlive).Append("\n");
            sb.Append("  AddnetMaxModelCount: ").Append(AddnetMaxModelCount).Append("\n");
            sb.Append("  ControlnetDir: ").Append(ControlnetDir).Append("\n");
            sb.Append("  ControlnetAnnotatorModelsPath: ").Append(ControlnetAnnotatorModelsPath).Append("\n");
            sb.Append("  NoHalfControlnet: ").Append(NoHalfControlnet).Append("\n");
            sb.Append("  ControlnetPreprocessorCacheSize: ").Append(ControlnetPreprocessorCacheSize).Append("\n");
            sb.Append("  ControlnetLoglevel: ").Append(ControlnetLoglevel).Append("\n");
            sb.Append("  LdsrModelsPath: ").Append(LdsrModelsPath).Append("\n");
            sb.Append("  LoraDir: ").Append(LoraDir).Append("\n");
            sb.Append("  LycoDirBackcompat: ").Append(LycoDirBackcompat).Append("\n");
            sb.Append("  ScunetModelsPath: ").Append(ScunetModelsPath).Append("\n");
            sb.Append("  SwinirModelsPath: ").Append(SwinirModelsPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Flags);
        }

        /// <summary>
        /// Returns true if Flags instances are equal
        /// </summary>
        /// <param name="input">Instance of Flags to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Flags input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.F == input.F ||
                    this.F.Equals(input.F)
                ) && 
                (
                    this.UpdateAllExtensions == input.UpdateAllExtensions ||
                    this.UpdateAllExtensions.Equals(input.UpdateAllExtensions)
                ) && 
                (
                    this.SkipPythonVersionCheck == input.SkipPythonVersionCheck ||
                    this.SkipPythonVersionCheck.Equals(input.SkipPythonVersionCheck)
                ) && 
                (
                    this.SkipTorchCudaTest == input.SkipTorchCudaTest ||
                    this.SkipTorchCudaTest.Equals(input.SkipTorchCudaTest)
                ) && 
                (
                    this.ReinstallXformers == input.ReinstallXformers ||
                    this.ReinstallXformers.Equals(input.ReinstallXformers)
                ) && 
                (
                    this.ReinstallTorch == input.ReinstallTorch ||
                    this.ReinstallTorch.Equals(input.ReinstallTorch)
                ) && 
                (
                    this.UpdateCheck == input.UpdateCheck ||
                    this.UpdateCheck.Equals(input.UpdateCheck)
                ) && 
                (
                    this.TestServer == input.TestServer ||
                    this.TestServer.Equals(input.TestServer)
                ) && 
                (
                    this.SkipPrepareEnvironment == input.SkipPrepareEnvironment ||
                    this.SkipPrepareEnvironment.Equals(input.SkipPrepareEnvironment)
                ) && 
                (
                    this.SkipInstall == input.SkipInstall ||
                    this.SkipInstall.Equals(input.SkipInstall)
                ) && 
                (
                    this.DoNotDownloadClip == input.DoNotDownloadClip ||
                    this.DoNotDownloadClip.Equals(input.DoNotDownloadClip)
                ) && 
                (
                    this.DataDir == input.DataDir ||
                    (this.DataDir != null &&
                    this.DataDir.Equals(input.DataDir))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.Ckpt == input.Ckpt ||
                    (this.Ckpt != null &&
                    this.Ckpt.Equals(input.Ckpt))
                ) && 
                (
                    this.CkptDir == input.CkptDir ||
                    (this.CkptDir != null &&
                    this.CkptDir.Equals(input.CkptDir))
                ) && 
                (
                    this.VaeDir == input.VaeDir ||
                    (this.VaeDir != null &&
                    this.VaeDir.Equals(input.VaeDir))
                ) && 
                (
                    this.GfpganDir == input.GfpganDir ||
                    (this.GfpganDir != null &&
                    this.GfpganDir.Equals(input.GfpganDir))
                ) && 
                (
                    this.GfpganModel == input.GfpganModel ||
                    (this.GfpganModel != null &&
                    this.GfpganModel.Equals(input.GfpganModel))
                ) && 
                (
                    this.NoHalf == input.NoHalf ||
                    this.NoHalf.Equals(input.NoHalf)
                ) && 
                (
                    this.NoHalfVae == input.NoHalfVae ||
                    this.NoHalfVae.Equals(input.NoHalfVae)
                ) && 
                (
                    this.NoProgressbarHiding == input.NoProgressbarHiding ||
                    this.NoProgressbarHiding.Equals(input.NoProgressbarHiding)
                ) && 
                (
                    this.MaxBatchCount == input.MaxBatchCount ||
                    this.MaxBatchCount.Equals(input.MaxBatchCount)
                ) && 
                (
                    this.EmbeddingsDir == input.EmbeddingsDir ||
                    (this.EmbeddingsDir != null &&
                    this.EmbeddingsDir.Equals(input.EmbeddingsDir))
                ) && 
                (
                    this.TextualInversionTemplatesDir == input.TextualInversionTemplatesDir ||
                    (this.TextualInversionTemplatesDir != null &&
                    this.TextualInversionTemplatesDir.Equals(input.TextualInversionTemplatesDir))
                ) && 
                (
                    this.HypernetworkDir == input.HypernetworkDir ||
                    (this.HypernetworkDir != null &&
                    this.HypernetworkDir.Equals(input.HypernetworkDir))
                ) && 
                (
                    this.LocalizationsDir == input.LocalizationsDir ||
                    (this.LocalizationsDir != null &&
                    this.LocalizationsDir.Equals(input.LocalizationsDir))
                ) && 
                (
                    this.AllowCode == input.AllowCode ||
                    this.AllowCode.Equals(input.AllowCode)
                ) && 
                (
                    this.Medvram == input.Medvram ||
                    this.Medvram.Equals(input.Medvram)
                ) && 
                (
                    this.Lowvram == input.Lowvram ||
                    this.Lowvram.Equals(input.Lowvram)
                ) && 
                (
                    this.Lowram == input.Lowram ||
                    this.Lowram.Equals(input.Lowram)
                ) && 
                (
                    this.AlwaysBatchCondUncond == input.AlwaysBatchCondUncond ||
                    this.AlwaysBatchCondUncond.Equals(input.AlwaysBatchCondUncond)
                ) && 
                (
                    this.UnloadGfpgan == input.UnloadGfpgan ||
                    this.UnloadGfpgan.Equals(input.UnloadGfpgan)
                ) && 
                (
                    this.Precision == input.Precision ||
                    (this.Precision != null &&
                    this.Precision.Equals(input.Precision))
                ) && 
                (
                    this.UpcastSampling == input.UpcastSampling ||
                    this.UpcastSampling.Equals(input.UpcastSampling)
                ) && 
                (
                    this.Share == input.Share ||
                    this.Share.Equals(input.Share)
                ) && 
                (
                    this.Ngrok == input.Ngrok ||
                    (this.Ngrok != null &&
                    this.Ngrok.Equals(input.Ngrok))
                ) && 
                (
                    this.NgrokRegion == input.NgrokRegion ||
                    (this.NgrokRegion != null &&
                    this.NgrokRegion.Equals(input.NgrokRegion))
                ) && 
                (
                    this.NgrokOptions == input.NgrokOptions ||
                    (this.NgrokOptions != null &&
                    this.NgrokOptions.Equals(input.NgrokOptions))
                ) && 
                (
                    this.EnableInsecureExtensionAccess == input.EnableInsecureExtensionAccess ||
                    this.EnableInsecureExtensionAccess.Equals(input.EnableInsecureExtensionAccess)
                ) && 
                (
                    this.CodeformerModelsPath == input.CodeformerModelsPath ||
                    (this.CodeformerModelsPath != null &&
                    this.CodeformerModelsPath.Equals(input.CodeformerModelsPath))
                ) && 
                (
                    this.GfpganModelsPath == input.GfpganModelsPath ||
                    (this.GfpganModelsPath != null &&
                    this.GfpganModelsPath.Equals(input.GfpganModelsPath))
                ) && 
                (
                    this.EsrganModelsPath == input.EsrganModelsPath ||
                    (this.EsrganModelsPath != null &&
                    this.EsrganModelsPath.Equals(input.EsrganModelsPath))
                ) && 
                (
                    this.BsrganModelsPath == input.BsrganModelsPath ||
                    (this.BsrganModelsPath != null &&
                    this.BsrganModelsPath.Equals(input.BsrganModelsPath))
                ) && 
                (
                    this.RealesrganModelsPath == input.RealesrganModelsPath ||
                    (this.RealesrganModelsPath != null &&
                    this.RealesrganModelsPath.Equals(input.RealesrganModelsPath))
                ) && 
                (
                    this.ClipModelsPath == input.ClipModelsPath ||
                    (this.ClipModelsPath != null &&
                    this.ClipModelsPath.Equals(input.ClipModelsPath))
                ) && 
                (
                    this.Xformers == input.Xformers ||
                    this.Xformers.Equals(input.Xformers)
                ) && 
                (
                    this.ForceEnableXformers == input.ForceEnableXformers ||
                    this.ForceEnableXformers.Equals(input.ForceEnableXformers)
                ) && 
                (
                    this.XformersFlashAttention == input.XformersFlashAttention ||
                    this.XformersFlashAttention.Equals(input.XformersFlashAttention)
                ) && 
                (
                    this.Deepdanbooru == input.Deepdanbooru ||
                    this.Deepdanbooru.Equals(input.Deepdanbooru)
                ) && 
                (
                    this.OptSplitAttention == input.OptSplitAttention ||
                    this.OptSplitAttention.Equals(input.OptSplitAttention)
                ) && 
                (
                    this.OptSubQuadAttention == input.OptSubQuadAttention ||
                    this.OptSubQuadAttention.Equals(input.OptSubQuadAttention)
                ) && 
                (
                    this.SubQuadQChunkSize == input.SubQuadQChunkSize ||
                    this.SubQuadQChunkSize.Equals(input.SubQuadQChunkSize)
                ) && 
                (
                    this.SubQuadKvChunkSize == input.SubQuadKvChunkSize ||
                    (this.SubQuadKvChunkSize != null &&
                    this.SubQuadKvChunkSize.Equals(input.SubQuadKvChunkSize))
                ) && 
                (
                    this.SubQuadChunkThreshold == input.SubQuadChunkThreshold ||
                    (this.SubQuadChunkThreshold != null &&
                    this.SubQuadChunkThreshold.Equals(input.SubQuadChunkThreshold))
                ) && 
                (
                    this.OptSplitAttentionInvokeai == input.OptSplitAttentionInvokeai ||
                    this.OptSplitAttentionInvokeai.Equals(input.OptSplitAttentionInvokeai)
                ) && 
                (
                    this.OptSplitAttentionV1 == input.OptSplitAttentionV1 ||
                    this.OptSplitAttentionV1.Equals(input.OptSplitAttentionV1)
                ) && 
                (
                    this.OptSdpAttention == input.OptSdpAttention ||
                    this.OptSdpAttention.Equals(input.OptSdpAttention)
                ) && 
                (
                    this.OptSdpNoMemAttention == input.OptSdpNoMemAttention ||
                    this.OptSdpNoMemAttention.Equals(input.OptSdpNoMemAttention)
                ) && 
                (
                    this.DisableOptSplitAttention == input.DisableOptSplitAttention ||
                    this.DisableOptSplitAttention.Equals(input.DisableOptSplitAttention)
                ) && 
                (
                    this.DisableNanCheck == input.DisableNanCheck ||
                    this.DisableNanCheck.Equals(input.DisableNanCheck)
                ) && 
                (
                    this.UseCpu == input.UseCpu ||
                    this.UseCpu != null &&
                    input.UseCpu != null &&
                    this.UseCpu.SequenceEqual(input.UseCpu)
                ) && 
                (
                    this.Listen == input.Listen ||
                    this.Listen.Equals(input.Listen)
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.ShowNegativePrompt == input.ShowNegativePrompt ||
                    this.ShowNegativePrompt.Equals(input.ShowNegativePrompt)
                ) && 
                (
                    this.UiConfigFile == input.UiConfigFile ||
                    (this.UiConfigFile != null &&
                    this.UiConfigFile.Equals(input.UiConfigFile))
                ) && 
                (
                    this.HideUiDirConfig == input.HideUiDirConfig ||
                    this.HideUiDirConfig.Equals(input.HideUiDirConfig)
                ) && 
                (
                    this.FreezeSettings == input.FreezeSettings ||
                    this.FreezeSettings.Equals(input.FreezeSettings)
                ) && 
                (
                    this.UiSettingsFile == input.UiSettingsFile ||
                    (this.UiSettingsFile != null &&
                    this.UiSettingsFile.Equals(input.UiSettingsFile))
                ) && 
                (
                    this.GradioDebug == input.GradioDebug ||
                    this.GradioDebug.Equals(input.GradioDebug)
                ) && 
                (
                    this.GradioAuth == input.GradioAuth ||
                    (this.GradioAuth != null &&
                    this.GradioAuth.Equals(input.GradioAuth))
                ) && 
                (
                    this.GradioAuthPath == input.GradioAuthPath ||
                    (this.GradioAuthPath != null &&
                    this.GradioAuthPath.Equals(input.GradioAuthPath))
                ) && 
                (
                    this.GradioImg2imgTool == input.GradioImg2imgTool ||
                    (this.GradioImg2imgTool != null &&
                    this.GradioImg2imgTool.Equals(input.GradioImg2imgTool))
                ) && 
                (
                    this.GradioInpaintTool == input.GradioInpaintTool ||
                    (this.GradioInpaintTool != null &&
                    this.GradioInpaintTool.Equals(input.GradioInpaintTool))
                ) && 
                (
                    this.GradioAllowedPath == input.GradioAllowedPath ||
                    (this.GradioAllowedPath != null &&
                    this.GradioAllowedPath.Equals(input.GradioAllowedPath))
                ) && 
                (
                    this.OptChannelslast == input.OptChannelslast ||
                    this.OptChannelslast.Equals(input.OptChannelslast)
                ) && 
                (
                    this.StylesFile == input.StylesFile ||
                    (this.StylesFile != null &&
                    this.StylesFile.Equals(input.StylesFile))
                ) && 
                (
                    this.Autolaunch == input.Autolaunch ||
                    this.Autolaunch.Equals(input.Autolaunch)
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                ) && 
                (
                    this.UseTextboxSeed == input.UseTextboxSeed ||
                    this.UseTextboxSeed.Equals(input.UseTextboxSeed)
                ) && 
                (
                    this.DisableConsoleProgressbars == input.DisableConsoleProgressbars ||
                    this.DisableConsoleProgressbars.Equals(input.DisableConsoleProgressbars)
                ) && 
                (
                    this.EnableConsolePrompts == input.EnableConsolePrompts ||
                    this.EnableConsolePrompts.Equals(input.EnableConsolePrompts)
                ) && 
                (
                    this.VaePath == input.VaePath ||
                    (this.VaePath != null &&
                    this.VaePath.Equals(input.VaePath))
                ) && 
                (
                    this.DisableSafeUnpickle == input.DisableSafeUnpickle ||
                    this.DisableSafeUnpickle.Equals(input.DisableSafeUnpickle)
                ) && 
                (
                    this.Api == input.Api ||
                    this.Api.Equals(input.Api)
                ) && 
                (
                    this.ApiAuth == input.ApiAuth ||
                    (this.ApiAuth != null &&
                    this.ApiAuth.Equals(input.ApiAuth))
                ) && 
                (
                    this.ApiLog == input.ApiLog ||
                    this.ApiLog.Equals(input.ApiLog)
                ) && 
                (
                    this.Nowebui == input.Nowebui ||
                    this.Nowebui.Equals(input.Nowebui)
                ) && 
                (
                    this.UiDebugMode == input.UiDebugMode ||
                    this.UiDebugMode.Equals(input.UiDebugMode)
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.Administrator == input.Administrator ||
                    this.Administrator.Equals(input.Administrator)
                ) && 
                (
                    this.CorsAllowOrigins == input.CorsAllowOrigins ||
                    (this.CorsAllowOrigins != null &&
                    this.CorsAllowOrigins.Equals(input.CorsAllowOrigins))
                ) && 
                (
                    this.CorsAllowOriginsRegex == input.CorsAllowOriginsRegex ||
                    (this.CorsAllowOriginsRegex != null &&
                    this.CorsAllowOriginsRegex.Equals(input.CorsAllowOriginsRegex))
                ) && 
                (
                    this.TlsKeyfile == input.TlsKeyfile ||
                    (this.TlsKeyfile != null &&
                    this.TlsKeyfile.Equals(input.TlsKeyfile))
                ) && 
                (
                    this.TlsCertfile == input.TlsCertfile ||
                    (this.TlsCertfile != null &&
                    this.TlsCertfile.Equals(input.TlsCertfile))
                ) && 
                (
                    this.DisableTlsVerify == input.DisableTlsVerify ||
                    (this.DisableTlsVerify != null &&
                    this.DisableTlsVerify.Equals(input.DisableTlsVerify))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.GradioQueue == input.GradioQueue ||
                    this.GradioQueue.Equals(input.GradioQueue)
                ) && 
                (
                    this.NoGradioQueue == input.NoGradioQueue ||
                    this.NoGradioQueue.Equals(input.NoGradioQueue)
                ) && 
                (
                    this.SkipVersionCheck == input.SkipVersionCheck ||
                    this.SkipVersionCheck.Equals(input.SkipVersionCheck)
                ) && 
                (
                    this.NoHashing == input.NoHashing ||
                    this.NoHashing.Equals(input.NoHashing)
                ) && 
                (
                    this.NoDownloadSdModel == input.NoDownloadSdModel ||
                    this.NoDownloadSdModel.Equals(input.NoDownloadSdModel)
                ) && 
                (
                    this.Subpath == input.Subpath ||
                    (this.Subpath != null &&
                    this.Subpath.Equals(input.Subpath))
                ) && 
                (
                    this.AddStopRoute == input.AddStopRoute ||
                    this.AddStopRoute.Equals(input.AddStopRoute)
                ) && 
                (
                    this.ApiServerStop == input.ApiServerStop ||
                    this.ApiServerStop.Equals(input.ApiServerStop)
                ) && 
                (
                    this.TimeoutKeepAlive == input.TimeoutKeepAlive ||
                    this.TimeoutKeepAlive.Equals(input.TimeoutKeepAlive)
                ) && 
                (
                    this.AddnetMaxModelCount == input.AddnetMaxModelCount ||
                    this.AddnetMaxModelCount.Equals(input.AddnetMaxModelCount)
                ) && 
                (
                    this.ControlnetDir == input.ControlnetDir ||
                    (this.ControlnetDir != null &&
                    this.ControlnetDir.Equals(input.ControlnetDir))
                ) && 
                (
                    this.ControlnetAnnotatorModelsPath == input.ControlnetAnnotatorModelsPath ||
                    (this.ControlnetAnnotatorModelsPath != null &&
                    this.ControlnetAnnotatorModelsPath.Equals(input.ControlnetAnnotatorModelsPath))
                ) && 
                (
                    this.NoHalfControlnet == input.NoHalfControlnet ||
                    (this.NoHalfControlnet != null &&
                    this.NoHalfControlnet.Equals(input.NoHalfControlnet))
                ) && 
                (
                    this.ControlnetPreprocessorCacheSize == input.ControlnetPreprocessorCacheSize ||
                    this.ControlnetPreprocessorCacheSize.Equals(input.ControlnetPreprocessorCacheSize)
                ) && 
                (
                    this.ControlnetLoglevel == input.ControlnetLoglevel ||
                    (this.ControlnetLoglevel != null &&
                    this.ControlnetLoglevel.Equals(input.ControlnetLoglevel))
                ) && 
                (
                    this.LdsrModelsPath == input.LdsrModelsPath ||
                    (this.LdsrModelsPath != null &&
                    this.LdsrModelsPath.Equals(input.LdsrModelsPath))
                ) && 
                (
                    this.LoraDir == input.LoraDir ||
                    (this.LoraDir != null &&
                    this.LoraDir.Equals(input.LoraDir))
                ) && 
                (
                    this.LycoDirBackcompat == input.LycoDirBackcompat ||
                    (this.LycoDirBackcompat != null &&
                    this.LycoDirBackcompat.Equals(input.LycoDirBackcompat))
                ) && 
                (
                    this.ScunetModelsPath == input.ScunetModelsPath ||
                    (this.ScunetModelsPath != null &&
                    this.ScunetModelsPath.Equals(input.ScunetModelsPath))
                ) && 
                (
                    this.SwinirModelsPath == input.SwinirModelsPath ||
                    (this.SwinirModelsPath != null &&
                    this.SwinirModelsPath.Equals(input.SwinirModelsPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.F.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateAllExtensions.GetHashCode();
                hashCode = (hashCode * 59) + this.SkipPythonVersionCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.SkipTorchCudaTest.GetHashCode();
                hashCode = (hashCode * 59) + this.ReinstallXformers.GetHashCode();
                hashCode = (hashCode * 59) + this.ReinstallTorch.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdateCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.TestServer.GetHashCode();
                hashCode = (hashCode * 59) + this.SkipPrepareEnvironment.GetHashCode();
                hashCode = (hashCode * 59) + this.SkipInstall.GetHashCode();
                hashCode = (hashCode * 59) + this.DoNotDownloadClip.GetHashCode();
                if (this.DataDir != null)
                {
                    hashCode = (hashCode * 59) + this.DataDir.GetHashCode();
                }
                if (this.Config != null)
                {
                    hashCode = (hashCode * 59) + this.Config.GetHashCode();
                }
                if (this.Ckpt != null)
                {
                    hashCode = (hashCode * 59) + this.Ckpt.GetHashCode();
                }
                if (this.CkptDir != null)
                {
                    hashCode = (hashCode * 59) + this.CkptDir.GetHashCode();
                }
                if (this.VaeDir != null)
                {
                    hashCode = (hashCode * 59) + this.VaeDir.GetHashCode();
                }
                if (this.GfpganDir != null)
                {
                    hashCode = (hashCode * 59) + this.GfpganDir.GetHashCode();
                }
                if (this.GfpganModel != null)
                {
                    hashCode = (hashCode * 59) + this.GfpganModel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NoHalf.GetHashCode();
                hashCode = (hashCode * 59) + this.NoHalfVae.GetHashCode();
                hashCode = (hashCode * 59) + this.NoProgressbarHiding.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxBatchCount.GetHashCode();
                if (this.EmbeddingsDir != null)
                {
                    hashCode = (hashCode * 59) + this.EmbeddingsDir.GetHashCode();
                }
                if (this.TextualInversionTemplatesDir != null)
                {
                    hashCode = (hashCode * 59) + this.TextualInversionTemplatesDir.GetHashCode();
                }
                if (this.HypernetworkDir != null)
                {
                    hashCode = (hashCode * 59) + this.HypernetworkDir.GetHashCode();
                }
                if (this.LocalizationsDir != null)
                {
                    hashCode = (hashCode * 59) + this.LocalizationsDir.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowCode.GetHashCode();
                hashCode = (hashCode * 59) + this.Medvram.GetHashCode();
                hashCode = (hashCode * 59) + this.Lowvram.GetHashCode();
                hashCode = (hashCode * 59) + this.Lowram.GetHashCode();
                hashCode = (hashCode * 59) + this.AlwaysBatchCondUncond.GetHashCode();
                hashCode = (hashCode * 59) + this.UnloadGfpgan.GetHashCode();
                if (this.Precision != null)
                {
                    hashCode = (hashCode * 59) + this.Precision.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpcastSampling.GetHashCode();
                hashCode = (hashCode * 59) + this.Share.GetHashCode();
                if (this.Ngrok != null)
                {
                    hashCode = (hashCode * 59) + this.Ngrok.GetHashCode();
                }
                if (this.NgrokRegion != null)
                {
                    hashCode = (hashCode * 59) + this.NgrokRegion.GetHashCode();
                }
                if (this.NgrokOptions != null)
                {
                    hashCode = (hashCode * 59) + this.NgrokOptions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableInsecureExtensionAccess.GetHashCode();
                if (this.CodeformerModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.CodeformerModelsPath.GetHashCode();
                }
                if (this.GfpganModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.GfpganModelsPath.GetHashCode();
                }
                if (this.EsrganModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.EsrganModelsPath.GetHashCode();
                }
                if (this.BsrganModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.BsrganModelsPath.GetHashCode();
                }
                if (this.RealesrganModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.RealesrganModelsPath.GetHashCode();
                }
                if (this.ClipModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.ClipModelsPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Xformers.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceEnableXformers.GetHashCode();
                hashCode = (hashCode * 59) + this.XformersFlashAttention.GetHashCode();
                hashCode = (hashCode * 59) + this.Deepdanbooru.GetHashCode();
                hashCode = (hashCode * 59) + this.OptSplitAttention.GetHashCode();
                hashCode = (hashCode * 59) + this.OptSubQuadAttention.GetHashCode();
                hashCode = (hashCode * 59) + this.SubQuadQChunkSize.GetHashCode();
                if (this.SubQuadKvChunkSize != null)
                {
                    hashCode = (hashCode * 59) + this.SubQuadKvChunkSize.GetHashCode();
                }
                if (this.SubQuadChunkThreshold != null)
                {
                    hashCode = (hashCode * 59) + this.SubQuadChunkThreshold.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OptSplitAttentionInvokeai.GetHashCode();
                hashCode = (hashCode * 59) + this.OptSplitAttentionV1.GetHashCode();
                hashCode = (hashCode * 59) + this.OptSdpAttention.GetHashCode();
                hashCode = (hashCode * 59) + this.OptSdpNoMemAttention.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableOptSplitAttention.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableNanCheck.GetHashCode();
                if (this.UseCpu != null)
                {
                    hashCode = (hashCode * 59) + this.UseCpu.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Listen.GetHashCode();
                if (this.Port != null)
                {
                    hashCode = (hashCode * 59) + this.Port.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowNegativePrompt.GetHashCode();
                if (this.UiConfigFile != null)
                {
                    hashCode = (hashCode * 59) + this.UiConfigFile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HideUiDirConfig.GetHashCode();
                hashCode = (hashCode * 59) + this.FreezeSettings.GetHashCode();
                if (this.UiSettingsFile != null)
                {
                    hashCode = (hashCode * 59) + this.UiSettingsFile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GradioDebug.GetHashCode();
                if (this.GradioAuth != null)
                {
                    hashCode = (hashCode * 59) + this.GradioAuth.GetHashCode();
                }
                if (this.GradioAuthPath != null)
                {
                    hashCode = (hashCode * 59) + this.GradioAuthPath.GetHashCode();
                }
                if (this.GradioImg2imgTool != null)
                {
                    hashCode = (hashCode * 59) + this.GradioImg2imgTool.GetHashCode();
                }
                if (this.GradioInpaintTool != null)
                {
                    hashCode = (hashCode * 59) + this.GradioInpaintTool.GetHashCode();
                }
                if (this.GradioAllowedPath != null)
                {
                    hashCode = (hashCode * 59) + this.GradioAllowedPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OptChannelslast.GetHashCode();
                if (this.StylesFile != null)
                {
                    hashCode = (hashCode * 59) + this.StylesFile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Autolaunch.GetHashCode();
                if (this.Theme != null)
                {
                    hashCode = (hashCode * 59) + this.Theme.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseTextboxSeed.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableConsoleProgressbars.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableConsolePrompts.GetHashCode();
                if (this.VaePath != null)
                {
                    hashCode = (hashCode * 59) + this.VaePath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisableSafeUnpickle.GetHashCode();
                hashCode = (hashCode * 59) + this.Api.GetHashCode();
                if (this.ApiAuth != null)
                {
                    hashCode = (hashCode * 59) + this.ApiAuth.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApiLog.GetHashCode();
                hashCode = (hashCode * 59) + this.Nowebui.GetHashCode();
                hashCode = (hashCode * 59) + this.UiDebugMode.GetHashCode();
                if (this.DeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Administrator.GetHashCode();
                if (this.CorsAllowOrigins != null)
                {
                    hashCode = (hashCode * 59) + this.CorsAllowOrigins.GetHashCode();
                }
                if (this.CorsAllowOriginsRegex != null)
                {
                    hashCode = (hashCode * 59) + this.CorsAllowOriginsRegex.GetHashCode();
                }
                if (this.TlsKeyfile != null)
                {
                    hashCode = (hashCode * 59) + this.TlsKeyfile.GetHashCode();
                }
                if (this.TlsCertfile != null)
                {
                    hashCode = (hashCode * 59) + this.TlsCertfile.GetHashCode();
                }
                if (this.DisableTlsVerify != null)
                {
                    hashCode = (hashCode * 59) + this.DisableTlsVerify.GetHashCode();
                }
                if (this.ServerName != null)
                {
                    hashCode = (hashCode * 59) + this.ServerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GradioQueue.GetHashCode();
                hashCode = (hashCode * 59) + this.NoGradioQueue.GetHashCode();
                hashCode = (hashCode * 59) + this.SkipVersionCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.NoHashing.GetHashCode();
                hashCode = (hashCode * 59) + this.NoDownloadSdModel.GetHashCode();
                if (this.Subpath != null)
                {
                    hashCode = (hashCode * 59) + this.Subpath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddStopRoute.GetHashCode();
                hashCode = (hashCode * 59) + this.ApiServerStop.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeoutKeepAlive.GetHashCode();
                hashCode = (hashCode * 59) + this.AddnetMaxModelCount.GetHashCode();
                if (this.ControlnetDir != null)
                {
                    hashCode = (hashCode * 59) + this.ControlnetDir.GetHashCode();
                }
                if (this.ControlnetAnnotatorModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.ControlnetAnnotatorModelsPath.GetHashCode();
                }
                if (this.NoHalfControlnet != null)
                {
                    hashCode = (hashCode * 59) + this.NoHalfControlnet.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ControlnetPreprocessorCacheSize.GetHashCode();
                if (this.ControlnetLoglevel != null)
                {
                    hashCode = (hashCode * 59) + this.ControlnetLoglevel.GetHashCode();
                }
                if (this.LdsrModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.LdsrModelsPath.GetHashCode();
                }
                if (this.LoraDir != null)
                {
                    hashCode = (hashCode * 59) + this.LoraDir.GetHashCode();
                }
                if (this.LycoDirBackcompat != null)
                {
                    hashCode = (hashCode * 59) + this.LycoDirBackcompat.GetHashCode();
                }
                if (this.ScunetModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.ScunetModelsPath.GetHashCode();
                }
                if (this.SwinirModelsPath != null)
                {
                    hashCode = (hashCode * 59) + this.SwinirModelsPath.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
