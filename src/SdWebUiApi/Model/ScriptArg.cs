/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SdWebUpApi.Client.OpenAPIDateConverter;

namespace SdWebUpApi.Model
{
    /// <summary>
    /// ScriptArg
    /// </summary>
    [DataContract(Name = "ScriptArg")]
    public partial class ScriptArg : IEquatable<ScriptArg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptArg" /> class.
        /// </summary>
        /// <param name="label">Name of the argument in UI.</param>
        /// <param name="value">Default value of the argument.</param>
        /// <param name="minimum">Minimum allowed value for the argumentin UI.</param>
        /// <param name="maximum">Maximum allowed value for the argumentin UI.</param>
        /// <param name="step">Step for changing value of the argumentin UI.</param>
        /// <param name="choices">Possible values for the argument.</param>
        public ScriptArg(string label = default(string), Object value = default(Object), Object minimum = default(Object), Object maximum = default(Object), Object step = default(Object), List<string> choices = default(List<string>))
        {
            this.Label = label;
            this.Value = value;
            this.Minimum = minimum;
            this.Maximum = maximum;
            this.Step = step;
            this.Choices = choices;
        }

        /// <summary>
        /// Name of the argument in UI
        /// </summary>
        /// <value>Name of the argument in UI</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Default value of the argument
        /// </summary>
        /// <value>Default value of the argument</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Minimum allowed value for the argumentin UI
        /// </summary>
        /// <value>Minimum allowed value for the argumentin UI</value>
        [DataMember(Name = "minimum", EmitDefaultValue = true)]
        public Object Minimum { get; set; }

        /// <summary>
        /// Maximum allowed value for the argumentin UI
        /// </summary>
        /// <value>Maximum allowed value for the argumentin UI</value>
        [DataMember(Name = "maximum", EmitDefaultValue = true)]
        public Object Maximum { get; set; }

        /// <summary>
        /// Step for changing value of the argumentin UI
        /// </summary>
        /// <value>Step for changing value of the argumentin UI</value>
        [DataMember(Name = "step", EmitDefaultValue = true)]
        public Object Step { get; set; }

        /// <summary>
        /// Possible values for the argument
        /// </summary>
        /// <value>Possible values for the argument</value>
        [DataMember(Name = "choices", EmitDefaultValue = false)]
        public List<string> Choices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScriptArg {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScriptArg);
        }

        /// <summary>
        /// Returns true if ScriptArg instances are equal
        /// </summary>
        /// <param name="input">Instance of ScriptArg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScriptArg input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    (this.Minimum != null &&
                    this.Minimum.Equals(input.Minimum))
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    (this.Maximum != null &&
                    this.Maximum.Equals(input.Maximum))
                ) && 
                (
                    this.Step == input.Step ||
                    (this.Step != null &&
                    this.Step.Equals(input.Step))
                ) && 
                (
                    this.Choices == input.Choices ||
                    this.Choices != null &&
                    input.Choices != null &&
                    this.Choices.SequenceEqual(input.Choices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Minimum != null)
                {
                    hashCode = (hashCode * 59) + this.Minimum.GetHashCode();
                }
                if (this.Maximum != null)
                {
                    hashCode = (hashCode * 59) + this.Maximum.GetHashCode();
                }
                if (this.Step != null)
                {
                    hashCode = (hashCode * 59) + this.Step.GetHashCode();
                }
                if (this.Choices != null)
                {
                    hashCode = (hashCode * 59) + this.Choices.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
