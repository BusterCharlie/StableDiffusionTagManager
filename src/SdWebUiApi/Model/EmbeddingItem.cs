/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SdWebUpApi.Client.OpenAPIDateConverter;

namespace SdWebUpApi.Model
{
    /// <summary>
    /// EmbeddingItem
    /// </summary>
    [DataContract(Name = "EmbeddingItem")]
    public partial class EmbeddingItem : IEquatable<EmbeddingItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddingItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmbeddingItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddingItem" /> class.
        /// </summary>
        /// <param name="step">The number of steps that were used to train this embedding, if available.</param>
        /// <param name="sdCheckpoint">The hash of the checkpoint this embedding was trained on, if available.</param>
        /// <param name="sdCheckpointName">The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use &#x60;sd_checkpoint&#x60; instead.</param>
        /// <param name="shape">The length of each individual vector in the embedding (required).</param>
        /// <param name="vectors">The number of vectors in the embedding (required).</param>
        public EmbeddingItem(int step = default(int), string sdCheckpoint = default(string), string sdCheckpointName = default(string), int shape = default(int), int vectors = default(int))
        {
            this.Shape = shape;
            this.Vectors = vectors;
            this.Step = step;
            this.SdCheckpoint = sdCheckpoint;
            this.SdCheckpointName = sdCheckpointName;
        }

        /// <summary>
        /// The number of steps that were used to train this embedding, if available
        /// </summary>
        /// <value>The number of steps that were used to train this embedding, if available</value>
        [DataMember(Name = "step", EmitDefaultValue = false)]
        public int Step { get; set; }

        /// <summary>
        /// The hash of the checkpoint this embedding was trained on, if available
        /// </summary>
        /// <value>The hash of the checkpoint this embedding was trained on, if available</value>
        [DataMember(Name = "sd_checkpoint", EmitDefaultValue = false)]
        public string SdCheckpoint { get; set; }

        /// <summary>
        /// The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use &#x60;sd_checkpoint&#x60; instead
        /// </summary>
        /// <value>The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use &#x60;sd_checkpoint&#x60; instead</value>
        [DataMember(Name = "sd_checkpoint_name", EmitDefaultValue = false)]
        public string SdCheckpointName { get; set; }

        /// <summary>
        /// The length of each individual vector in the embedding
        /// </summary>
        /// <value>The length of each individual vector in the embedding</value>
        [DataMember(Name = "shape", IsRequired = true, EmitDefaultValue = true)]
        public int Shape { get; set; }

        /// <summary>
        /// The number of vectors in the embedding
        /// </summary>
        /// <value>The number of vectors in the embedding</value>
        [DataMember(Name = "vectors", IsRequired = true, EmitDefaultValue = true)]
        public int Vectors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmbeddingItem {\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  SdCheckpoint: ").Append(SdCheckpoint).Append("\n");
            sb.Append("  SdCheckpointName: ").Append(SdCheckpointName).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Vectors: ").Append(Vectors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmbeddingItem);
        }

        /// <summary>
        /// Returns true if EmbeddingItem instances are equal
        /// </summary>
        /// <param name="input">Instance of EmbeddingItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmbeddingItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Step == input.Step ||
                    this.Step.Equals(input.Step)
                ) && 
                (
                    this.SdCheckpoint == input.SdCheckpoint ||
                    (this.SdCheckpoint != null &&
                    this.SdCheckpoint.Equals(input.SdCheckpoint))
                ) && 
                (
                    this.SdCheckpointName == input.SdCheckpointName ||
                    (this.SdCheckpointName != null &&
                    this.SdCheckpointName.Equals(input.SdCheckpointName))
                ) && 
                (
                    this.Shape == input.Shape ||
                    this.Shape.Equals(input.Shape)
                ) && 
                (
                    this.Vectors == input.Vectors ||
                    this.Vectors.Equals(input.Vectors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Step.GetHashCode();
                if (this.SdCheckpoint != null)
                {
                    hashCode = (hashCode * 59) + this.SdCheckpoint.GetHashCode();
                }
                if (this.SdCheckpointName != null)
                {
                    hashCode = (hashCode * 59) + this.SdCheckpointName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Shape.GetHashCode();
                hashCode = (hashCode * 59) + this.Vectors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
