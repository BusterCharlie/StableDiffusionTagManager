/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SdWebUpApi.Client.OpenAPIDateConverter;

namespace SdWebUpApi.Model
{
    /// <summary>
    /// Options
    /// </summary>
    [DataContract(Name = "Options")]
    public partial class Options : IEquatable<Options>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Options" /> class.
        /// </summary>
        /// <param name="samplesSave">Always save all generated images (default to true).</param>
        /// <param name="samplesFormat">File format for images (default to &quot;png&quot;).</param>
        /// <param name="samplesFilenamePattern">Images filename pattern.</param>
        /// <param name="saveImagesAddNumber">Add number to filename when saving (default to true).</param>
        /// <param name="gridSave">Always save all generated image grids (default to true).</param>
        /// <param name="gridFormat">File format for grids (default to &quot;png&quot;).</param>
        /// <param name="gridExtendedFilename">Add extended info (seed, prompt) to filename when saving grid.</param>
        /// <param name="gridOnlyIfMultiple">Do not save grids consisting of one picture (default to true).</param>
        /// <param name="gridPreventEmptySpots">Prevent empty spots in grid (when set to autodetect).</param>
        /// <param name="gridZipFilenamePattern">Archive filename pattern.</param>
        /// <param name="nRows">Grid row count; use -1 for autodetect and 0 for it to be same as batch size (default to -1M).</param>
        /// <param name="font">Font for image grids that have text.</param>
        /// <param name="gridTextActiveColor">Text color for image grids (default to &quot;#000000&quot;).</param>
        /// <param name="gridTextInactiveColor">Inactive text color for image grids (default to &quot;#999999&quot;).</param>
        /// <param name="gridBackgroundColor">Background color for image grids (default to &quot;#ffffff&quot;).</param>
        /// <param name="enablePnginfo">Save text information about generation parameters as chunks to png files (default to true).</param>
        /// <param name="saveTxt">Create a text file next to every image with generation parameters..</param>
        /// <param name="saveImagesBeforeFaceRestoration">Save a copy of image before doing face restoration..</param>
        /// <param name="saveImagesBeforeHighresFix">Save a copy of image before applying highres fix..</param>
        /// <param name="saveImagesBeforeColorCorrection">Save a copy of image before applying color correction to img2img results.</param>
        /// <param name="saveMask">For inpainting, save a copy of the greyscale mask.</param>
        /// <param name="saveMaskComposite">For inpainting, save a masked composite.</param>
        /// <param name="jpegQuality">Quality for saved jpeg images (default to 80M).</param>
        /// <param name="webpLossless">Use lossless compression for webp images.</param>
        /// <param name="exportFor4chan">Save copy of large images as JPG (default to true).</param>
        /// <param name="imgDownscaleThreshold">File size limit for the above option, MB (default to 4.0M).</param>
        /// <param name="targetSideLength">Width/height limit for the above option, in pixels (default to 4000M).</param>
        /// <param name="imgMaxSizeMp">Maximum image size (default to 200M).</param>
        /// <param name="useOriginalNameBatch">Use original name for output filename during batch process in extras tab (default to true).</param>
        /// <param name="useUpscalerNameAsSuffix">Use upscaler name as filename suffix in the extras tab.</param>
        /// <param name="saveSelectedOnly">When using &#39;Save&#39; button, only save a single selected image (default to true).</param>
        /// <param name="saveInitImg">Save init images when using img2img.</param>
        /// <param name="tempDir">Directory for temporary images; leave empty for default.</param>
        /// <param name="cleanTempDirAtStart">Cleanup non-default temporary directory when starting webui.</param>
        /// <param name="outdirSamples">Output directory for images; if empty, defaults to three directories below.</param>
        /// <param name="outdirTxt2imgSamples">Output directory for txt2img images (default to &quot;outputs/txt2img-images&quot;).</param>
        /// <param name="outdirImg2imgSamples">Output directory for img2img images (default to &quot;outputs/img2img-images&quot;).</param>
        /// <param name="outdirExtrasSamples">Output directory for images from extras tab (default to &quot;outputs/extras-images&quot;).</param>
        /// <param name="outdirGrids">Output directory for grids; if empty, defaults to two directories below.</param>
        /// <param name="outdirTxt2imgGrids">Output directory for txt2img grids (default to &quot;outputs/txt2img-grids&quot;).</param>
        /// <param name="outdirImg2imgGrids">Output directory for img2img grids (default to &quot;outputs/img2img-grids&quot;).</param>
        /// <param name="outdirSave">Directory for saving images using the Save button (default to &quot;log/images&quot;).</param>
        /// <param name="outdirInitImages">Directory for saving init images when using img2img (default to &quot;outputs/init-images&quot;).</param>
        /// <param name="saveToDirs">Save images to a subdirectory (default to true).</param>
        /// <param name="gridSaveToDirs">Save grids to a subdirectory (default to true).</param>
        /// <param name="useSaveToDirsForUi">When using \&quot;Save\&quot; button, save images to a subdirectory.</param>
        /// <param name="directoriesFilenamePattern">Directory name pattern (default to &quot;[date]&quot;).</param>
        /// <param name="directoriesMaxPromptWords">Max prompt words for [prompt_words] pattern (default to 8M).</param>
        /// <param name="eSRGANTile">Tile size for ESRGAN upscalers. (default to 192M).</param>
        /// <param name="eSRGANTileOverlap">Tile overlap for ESRGAN upscalers. (default to 8M).</param>
        /// <param name="realesrganEnabledModels">Select which Real-ESRGAN models to show in the web UI..</param>
        /// <param name="upscalerForImg2img">Upscaler for img2img.</param>
        /// <param name="faceRestorationModel">Face restoration model (default to &quot;CodeFormer&quot;).</param>
        /// <param name="codeFormerWeight">CodeFormer weight (default to 0.5M).</param>
        /// <param name="faceRestorationUnload">Move face restoration model from VRAM into RAM after processing.</param>
        /// <param name="showWarnings">Show warnings in console..</param>
        /// <param name="memmonPollRate">VRAM usage polls per second during generation. (default to 8M).</param>
        /// <param name="samplesLogStdout">Always print all generation info to standard output.</param>
        /// <param name="multipleTqdm">Add a second progress bar to the console that shows progress for an entire job. (default to true).</param>
        /// <param name="printHypernetExtra">Print extra hypernetwork information to console..</param>
        /// <param name="listHiddenFiles">Load models/files in hidden directories (default to true).</param>
        /// <param name="disableMmapLoadSafetensors">Disable memmapping for loading .safetensors files..</param>
        /// <param name="unloadModelsWhenTraining">Move VAE and CLIP to RAM when training if possible. Saves VRAM..</param>
        /// <param name="pinMemory">Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage..</param>
        /// <param name="saveOptimizerState">Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file..</param>
        /// <param name="saveTrainingSettingsToTxt">Save textual inversion and hypernet settings to a text file whenever training starts. (default to true).</param>
        /// <param name="datasetFilenameWordRegex">Filename word regex.</param>
        /// <param name="datasetFilenameJoinString">Filename join string (default to &quot; &quot;).</param>
        /// <param name="trainingImageRepeatsPerEpoch">Number of repeats for a single input image per epoch; used only for displaying epoch number (default to 1M).</param>
        /// <param name="trainingWriteCsvEvery">Save an csv containing the loss to log directory every N steps, 0 to disable (default to 500M).</param>
        /// <param name="trainingXattentionOptimizations">Use cross attention optimizations while training.</param>
        /// <param name="trainingEnableTensorboard">Enable tensorboard logging..</param>
        /// <param name="trainingTensorboardSaveImages">Save generated images within tensorboard..</param>
        /// <param name="trainingTensorboardFlushEvery">How often, in seconds, to flush the pending tensorboard events and summaries to disk. (default to 120M).</param>
        /// <param name="sdModelCheckpoint">Stable Diffusion checkpoint.</param>
        /// <param name="sdCheckpointCache">Checkpoints to cache in RAM.</param>
        /// <param name="sdVaeCheckpointCache">VAE Checkpoints to cache in RAM.</param>
        /// <param name="sdVae">SD VAE (default to &quot;Automatic&quot;).</param>
        /// <param name="sdVaeAsDefault">Ignore selected VAE for stable diffusion checkpoints that have their own .vae.pt next to them (default to true).</param>
        /// <param name="sdUnet">SD Unet (default to &quot;Automatic&quot;).</param>
        /// <param name="inpaintingMaskWeight">Inpainting conditioning mask strength (default to 1.0M).</param>
        /// <param name="initialNoiseMultiplier">Noise multiplier for img2img (default to 1.0M).</param>
        /// <param name="img2imgColorCorrection">Apply color correction to img2img results to match original colors..</param>
        /// <param name="img2imgFixSteps">With img2img, do exactly the amount of steps the slider specifies..</param>
        /// <param name="img2imgBackgroundColor">With img2img, fill image&#39;s transparent parts with this color. (default to &quot;#ffffff&quot;).</param>
        /// <param name="enableQuantization">Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds. Requires restart to apply..</param>
        /// <param name="enableEmphasis">Enable emphasis (default to true).</param>
        /// <param name="enableBatchSeeds">Make K-diffusion samplers produce same images in a batch as when making a single image (default to true).</param>
        /// <param name="commaPaddingBacktrack">Prompt word wrap length limit (default to 20M).</param>
        /// <param name="cLIPStopAtLastLayers">Clip skip (default to 1M).</param>
        /// <param name="upcastAttn">Upcast cross attention layer to float32.</param>
        /// <param name="autoVaePrecision">Automaticlly revert VAE to 32-bit floats (default to true).</param>
        /// <param name="randnSource">Random number generator source. (default to &quot;GPU&quot;).</param>
        /// <param name="sdxlCropTop">crop top coordinate.</param>
        /// <param name="sdxlCropLeft">crop left coordinate.</param>
        /// <param name="sdxlRefinerLowAestheticScore">SDXL low aesthetic score (default to 2.5M).</param>
        /// <param name="sdxlRefinerHighAestheticScore">SDXL high aesthetic score (default to 6.0M).</param>
        /// <param name="crossAttentionOptimization">Cross attention optimization (default to &quot;Automatic&quot;).</param>
        /// <param name="sMinUncond">Negative Guidance minimum sigma.</param>
        /// <param name="tokenMergingRatio">Token merging ratio.</param>
        /// <param name="tokenMergingRatioImg2img">Token merging ratio for img2img.</param>
        /// <param name="tokenMergingRatioHr">Token merging ratio for high-res pass.</param>
        /// <param name="padCondUncond">Pad prompt/negative prompt to be same length.</param>
        /// <param name="experimentalPersistentCondCache">persistent cond cache.</param>
        /// <param name="useOldEmphasisImplementation">Use old emphasis implementation. Can be useful to reproduce old seeds..</param>
        /// <param name="useOldKarrasSchedulerSigmas">Use old karras scheduler sigmas (0.1 to 10)..</param>
        /// <param name="noDpmppSdeBatchDeterminism">Do not make DPM++ SDE deterministic across different batch sizes..</param>
        /// <param name="useOldHiresFixWidthHeight">For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to)..</param>
        /// <param name="dontFixSecondOrderSamplersSchedule">Do not fix prompt schedule for second order samplers..</param>
        /// <param name="hiresFixUseFirstpassConds">For hires fix, calculate conds of second pass using extra networks of first pass..</param>
        /// <param name="interrogateKeepModelsInMemory">Keep models in VRAM.</param>
        /// <param name="interrogateReturnRanks">Include ranks of model tags matches in results..</param>
        /// <param name="interrogateClipNumBeams">BLIP: num_beams (default to 1M).</param>
        /// <param name="interrogateClipMinLength">BLIP: minimum description length (default to 24M).</param>
        /// <param name="interrogateClipMaxLength">BLIP: maximum description length (default to 48M).</param>
        /// <param name="interrogateClipDictLimit">CLIP: maximum number of lines in text file (default to 1500M).</param>
        /// <param name="interrogateClipSkipCategories">CLIP: skip inquire categories.</param>
        /// <param name="interrogateDeepbooruScoreThreshold">deepbooru: score threshold (default to 0.5M).</param>
        /// <param name="deepbooruSortAlpha">deepbooru: sort tags alphabetically (default to true).</param>
        /// <param name="deepbooruUseSpaces">deepbooru: use spaces in tags (default to true).</param>
        /// <param name="deepbooruEscape">deepbooru: escape (\\) brackets (default to true).</param>
        /// <param name="deepbooruFilterTags">deepbooru: filter out those tags.</param>
        /// <param name="extraNetworksShowHiddenDirectories">Show hidden directories (default to true).</param>
        /// <param name="extraNetworksHiddenModels">Show cards for models in hidden directories (default to &quot;When searched&quot;).</param>
        /// <param name="extraNetworksDefaultMultiplier">Default multiplier for extra networks (default to 1.0M).</param>
        /// <param name="extraNetworksCardWidth">Card width for Extra Networks.</param>
        /// <param name="extraNetworksCardHeight">Card height for Extra Networks.</param>
        /// <param name="extraNetworksCardTextScale">Card text scale (default to 1.0M).</param>
        /// <param name="extraNetworksCardShowDesc">Show description on card (default to true).</param>
        /// <param name="extraNetworksAddTextSeparator">Extra networks separator (default to &quot; &quot;).</param>
        /// <param name="uiExtraNetworksTabReorder">Extra networks tab order.</param>
        /// <param name="textualInversionPrintAtLoad">Print a list of Textual Inversion embeddings when loading model.</param>
        /// <param name="textualInversionAddHashesToInfotext">Add Textual Inversion hashes to infotext (default to true).</param>
        /// <param name="sdHypernetwork">Add hypernetwork to prompt (default to &quot;None&quot;).</param>
        /// <param name="localization">Localization (default to &quot;None&quot;).</param>
        /// <param name="gradioTheme">Gradio theme (default to &quot;Default&quot;).</param>
        /// <param name="img2imgEditorHeight">img2img: height of image editor (default to 720M).</param>
        /// <param name="returnGrid">Show grid in results for web (default to true).</param>
        /// <param name="returnMask">For inpainting, include the greyscale mask in results for web.</param>
        /// <param name="returnMaskComposite">For inpainting, include masked composite in results for web.</param>
        /// <param name="doNotShowImages">Do not show any images in results for web.</param>
        /// <param name="sendSeed">Send seed when sending prompt or image to other interface (default to true).</param>
        /// <param name="sendSize">Send size when sending prompt or image to another interface (default to true).</param>
        /// <param name="jsModalLightbox">Enable full page image viewer (default to true).</param>
        /// <param name="jsModalLightboxInitiallyZoomed">Show images zoomed in by default in full page image viewer (default to true).</param>
        /// <param name="jsModalLightboxGamepad">Navigate image viewer with gamepad.</param>
        /// <param name="jsModalLightboxGamepadRepeat">Gamepad repeat period, in milliseconds (default to 250M).</param>
        /// <param name="showProgressInTitle">Show generation progress in window title. (default to true).</param>
        /// <param name="samplersInDropdown">Use dropdown for sampler selection instead of radio group (default to true).</param>
        /// <param name="dimensionsAndBatchTogether">Show Width/Height and Batch sliders in same row (default to true).</param>
        /// <param name="keyeditPrecisionAttention">Ctrl+up/down precision when editing (attention:1.1) (default to 0.1M).</param>
        /// <param name="keyeditPrecisionExtra">Ctrl+up/down precision when editing &lt;extra networks:0.9&gt; (default to 0.05M).</param>
        /// <param name="keyeditDelimiters">Ctrl+up/down word delimiters (default to &quot;.,\/!?%^*;:{}&#x3D;&#x60;~()&quot;).</param>
        /// <param name="keyeditMove">Alt+left/right moves prompt elements (default to true).</param>
        /// <param name="quicksettingsList">Quicksettings list.</param>
        /// <param name="uiTabOrder">UI tab order.</param>
        /// <param name="hiddenTabs">Hidden UI tabs.</param>
        /// <param name="uiReorderList">txt2img/img2img UI item order.</param>
        /// <param name="hiresFixShowSampler">Hires fix: show hires sampler selection.</param>
        /// <param name="hiresFixShowPrompts">Hires fix: show hires prompt and negative prompt.</param>
        /// <param name="disableTokenCounters">Disable prompt token counters.</param>
        /// <param name="addModelHashToInfo">Add model hash to generation information (default to true).</param>
        /// <param name="addModelNameToInfo">Add model name to generation information (default to true).</param>
        /// <param name="addUserNameToInfo">Add user name to generation information when authenticated.</param>
        /// <param name="addVersionToInfotext">Add program version to generation information (default to true).</param>
        /// <param name="disableWeightsAutoSwap">Disregard checkpoint information from pasted infotext (default to true).</param>
        /// <param name="infotextStyles">Infer styles from prompts of pasted infotext (default to &quot;Apply if any&quot;).</param>
        /// <param name="showProgressbar">Show progressbar (default to true).</param>
        /// <param name="livePreviewsEnable">Show live previews of the created image (default to true).</param>
        /// <param name="livePreviewsImageFormat">Live preview file format (default to &quot;png&quot;).</param>
        /// <param name="showProgressGrid">Show previews of all images generated in a batch as a grid (default to true).</param>
        /// <param name="showProgressEveryNSteps">Live preview display period (default to 10M).</param>
        /// <param name="showProgressType">Live preview method (default to &quot;Approx NN&quot;).</param>
        /// <param name="livePreviewContent">Live preview subject (default to &quot;Prompt&quot;).</param>
        /// <param name="livePreviewRefreshPeriod">Progressbar and preview update period (default to 1000M).</param>
        /// <param name="hideSamplers">Hide samplers in user interface.</param>
        /// <param name="etaDdim">Eta for DDIM.</param>
        /// <param name="etaAncestral">Eta for ancestral samplers (default to 1.0M).</param>
        /// <param name="ddimDiscretize">img2img DDIM discretize (default to &quot;uniform&quot;).</param>
        /// <param name="sChurn">sigma churn.</param>
        /// <param name="sTmin">sigma tmin.</param>
        /// <param name="sNoise">sigma noise (default to 1.0M).</param>
        /// <param name="kSchedType">scheduler type (default to &quot;Automatic&quot;).</param>
        /// <param name="sigmaMin">sigma min.</param>
        /// <param name="sigmaMax">sigma max.</param>
        /// <param name="rho">rho.</param>
        /// <param name="etaNoiseSeedDelta">Eta noise seed delta.</param>
        /// <param name="alwaysDiscardNextToLastSigma">Always discard next-to-last sigma.</param>
        /// <param name="uniPcVariant">UniPC variant (default to &quot;bh1&quot;).</param>
        /// <param name="uniPcSkipType">UniPC skip type (default to &quot;time_uniform&quot;).</param>
        /// <param name="uniPcOrder">UniPC order (default to 3M).</param>
        /// <param name="uniPcLowerOrderFinal">UniPC lower order final (default to true).</param>
        /// <param name="postprocessingEnableInMainUi">Enable postprocessing operations in txt2img and img2img tabs.</param>
        /// <param name="postprocessingOperationOrder">Postprocessing operation order.</param>
        /// <param name="upscalingMaxImagesInCache">Maximum number of images in upscaling cache (default to 5M).</param>
        /// <param name="disabledExtensions">Disable these extensions.</param>
        /// <param name="disableAllExtensions">Disable all extensions (preserves the list of disabled extensions) (default to &quot;none&quot;).</param>
        /// <param name="restoreConfigStateFile">Config state file to restore from, under &#39;config-states/&#39; folder.</param>
        /// <param name="sdCheckpointHash">SHA256 hash of the current checkpoint.</param>
        public Options(bool samplesSave = true, string samplesFormat = @"png", Object samplesFilenamePattern = default(Object), bool saveImagesAddNumber = true, bool gridSave = true, string gridFormat = @"png", Object gridExtendedFilename = default(Object), bool gridOnlyIfMultiple = true, Object gridPreventEmptySpots = default(Object), Object gridZipFilenamePattern = default(Object), decimal nRows = -1M, Object font = default(Object), string gridTextActiveColor = @"#000000", string gridTextInactiveColor = @"#999999", string gridBackgroundColor = @"#ffffff", bool enablePnginfo = true, Object saveTxt = default(Object), Object saveImagesBeforeFaceRestoration = default(Object), Object saveImagesBeforeHighresFix = default(Object), Object saveImagesBeforeColorCorrection = default(Object), Object saveMask = default(Object), Object saveMaskComposite = default(Object), decimal jpegQuality = 80M, Object webpLossless = default(Object), bool exportFor4chan = true, decimal imgDownscaleThreshold = 4.0M, decimal targetSideLength = 4000M, decimal imgMaxSizeMp = 200M, bool useOriginalNameBatch = true, Object useUpscalerNameAsSuffix = default(Object), bool saveSelectedOnly = true, Object saveInitImg = default(Object), Object tempDir = default(Object), Object cleanTempDirAtStart = default(Object), Object outdirSamples = default(Object), string outdirTxt2imgSamples = @"outputs/txt2img-images", string outdirImg2imgSamples = @"outputs/img2img-images", string outdirExtrasSamples = @"outputs/extras-images", Object outdirGrids = default(Object), string outdirTxt2imgGrids = @"outputs/txt2img-grids", string outdirImg2imgGrids = @"outputs/img2img-grids", string outdirSave = @"log/images", string outdirInitImages = @"outputs/init-images", bool saveToDirs = true, bool gridSaveToDirs = true, Object useSaveToDirsForUi = default(Object), string directoriesFilenamePattern = @"[date]", decimal directoriesMaxPromptWords = 8M, decimal eSRGANTile = 192M, decimal eSRGANTileOverlap = 8M, List<Object> realesrganEnabledModels = default(List<Object>), Object upscalerForImg2img = default(Object), string faceRestorationModel = @"CodeFormer", decimal codeFormerWeight = 0.5M, Object faceRestorationUnload = default(Object), Object showWarnings = default(Object), decimal memmonPollRate = 8M, Object samplesLogStdout = default(Object), bool multipleTqdm = true, Object printHypernetExtra = default(Object), bool listHiddenFiles = true, Object disableMmapLoadSafetensors = default(Object), Object unloadModelsWhenTraining = default(Object), Object pinMemory = default(Object), Object saveOptimizerState = default(Object), bool saveTrainingSettingsToTxt = true, Object datasetFilenameWordRegex = default(Object), string datasetFilenameJoinString = @" ", decimal trainingImageRepeatsPerEpoch = 1M, decimal trainingWriteCsvEvery = 500M, Object trainingXattentionOptimizations = default(Object), Object trainingEnableTensorboard = default(Object), Object trainingTensorboardSaveImages = default(Object), decimal trainingTensorboardFlushEvery = 120M, Object sdModelCheckpoint = default(Object), Object sdCheckpointCache = default(Object), Object sdVaeCheckpointCache = default(Object), string sdVae = @"Automatic", bool sdVaeAsDefault = true, string sdUnet = @"Automatic", decimal inpaintingMaskWeight = 1.0M, decimal initialNoiseMultiplier = 1.0M, Object img2imgColorCorrection = default(Object), Object img2imgFixSteps = default(Object), string img2imgBackgroundColor = @"#ffffff", Object enableQuantization = default(Object), bool enableEmphasis = true, bool enableBatchSeeds = true, decimal commaPaddingBacktrack = 20M, decimal cLIPStopAtLastLayers = 1M, Object upcastAttn = default(Object), bool autoVaePrecision = true, string randnSource = @"GPU", Object sdxlCropTop = default(Object), Object sdxlCropLeft = default(Object), decimal sdxlRefinerLowAestheticScore = 2.5M, decimal sdxlRefinerHighAestheticScore = 6.0M, string crossAttentionOptimization = @"Automatic", Object sMinUncond = default(Object), Object tokenMergingRatio = default(Object), Object tokenMergingRatioImg2img = default(Object), Object tokenMergingRatioHr = default(Object), Object padCondUncond = default(Object), Object experimentalPersistentCondCache = default(Object), Object useOldEmphasisImplementation = default(Object), Object useOldKarrasSchedulerSigmas = default(Object), Object noDpmppSdeBatchDeterminism = default(Object), Object useOldHiresFixWidthHeight = default(Object), Object dontFixSecondOrderSamplersSchedule = default(Object), Object hiresFixUseFirstpassConds = default(Object), Object interrogateKeepModelsInMemory = default(Object), Object interrogateReturnRanks = default(Object), decimal interrogateClipNumBeams = 1M, decimal interrogateClipMinLength = 24M, decimal interrogateClipMaxLength = 48M, decimal interrogateClipDictLimit = 1500M, Object interrogateClipSkipCategories = default(Object), decimal interrogateDeepbooruScoreThreshold = 0.5M, bool deepbooruSortAlpha = true, bool deepbooruUseSpaces = true, bool deepbooruEscape = true, Object deepbooruFilterTags = default(Object), bool extraNetworksShowHiddenDirectories = true, string extraNetworksHiddenModels = @"When searched", decimal extraNetworksDefaultMultiplier = 1.0M, Object extraNetworksCardWidth = default(Object), Object extraNetworksCardHeight = default(Object), decimal extraNetworksCardTextScale = 1.0M, bool extraNetworksCardShowDesc = true, string extraNetworksAddTextSeparator = @" ", Object uiExtraNetworksTabReorder = default(Object), Object textualInversionPrintAtLoad = default(Object), bool textualInversionAddHashesToInfotext = true, string sdHypernetwork = @"None", string localization = @"None", string gradioTheme = @"Default", decimal img2imgEditorHeight = 720M, bool returnGrid = true, Object returnMask = default(Object), Object returnMaskComposite = default(Object), Object doNotShowImages = default(Object), bool sendSeed = true, bool sendSize = true, bool jsModalLightbox = true, bool jsModalLightboxInitiallyZoomed = true, Object jsModalLightboxGamepad = default(Object), decimal jsModalLightboxGamepadRepeat = 250M, bool showProgressInTitle = true, bool samplersInDropdown = true, bool dimensionsAndBatchTogether = true, decimal keyeditPrecisionAttention = 0.1M, decimal keyeditPrecisionExtra = 0.05M, string keyeditDelimiters = @".,\/!?%^*;:{}=`~()", bool keyeditMove = true, List<Object> quicksettingsList = default(List<Object>), Object uiTabOrder = default(Object), Object hiddenTabs = default(Object), Object uiReorderList = default(Object), Object hiresFixShowSampler = default(Object), Object hiresFixShowPrompts = default(Object), Object disableTokenCounters = default(Object), bool addModelHashToInfo = true, bool addModelNameToInfo = true, Object addUserNameToInfo = default(Object), bool addVersionToInfotext = true, bool disableWeightsAutoSwap = true, string infotextStyles = @"Apply if any", bool showProgressbar = true, bool livePreviewsEnable = true, string livePreviewsImageFormat = @"png", bool showProgressGrid = true, decimal showProgressEveryNSteps = 10M, string showProgressType = @"Approx NN", string livePreviewContent = @"Prompt", decimal livePreviewRefreshPeriod = 1000M, Object hideSamplers = default(Object), Object etaDdim = default(Object), decimal etaAncestral = 1.0M, string ddimDiscretize = @"uniform", Object sChurn = default(Object), Object sTmin = default(Object), decimal sNoise = 1.0M, string kSchedType = @"Automatic", Object sigmaMin = default(Object), Object sigmaMax = default(Object), Object rho = default(Object), Object etaNoiseSeedDelta = default(Object), Object alwaysDiscardNextToLastSigma = default(Object), string uniPcVariant = @"bh1", string uniPcSkipType = @"time_uniform", decimal uniPcOrder = 3M, bool uniPcLowerOrderFinal = true, Object postprocessingEnableInMainUi = default(Object), Object postprocessingOperationOrder = default(Object), decimal upscalingMaxImagesInCache = 5M, Object disabledExtensions = default(Object), string disableAllExtensions = @"none", Object restoreConfigStateFile = default(Object), Object sdCheckpointHash = default(Object))
        {
            this.SamplesSave = samplesSave;
            // use default value if no "samplesFormat" provided
            this.SamplesFormat = samplesFormat ?? @"png";
            this.SamplesFilenamePattern = samplesFilenamePattern;
            this.SaveImagesAddNumber = saveImagesAddNumber;
            this.GridSave = gridSave;
            // use default value if no "gridFormat" provided
            this.GridFormat = gridFormat ?? @"png";
            this.GridExtendedFilename = gridExtendedFilename;
            this.GridOnlyIfMultiple = gridOnlyIfMultiple;
            this.GridPreventEmptySpots = gridPreventEmptySpots;
            this.GridZipFilenamePattern = gridZipFilenamePattern;
            this.NRows = nRows;
            this.Font = font;
            // use default value if no "gridTextActiveColor" provided
            this.GridTextActiveColor = gridTextActiveColor ?? @"#000000";
            // use default value if no "gridTextInactiveColor" provided
            this.GridTextInactiveColor = gridTextInactiveColor ?? @"#999999";
            // use default value if no "gridBackgroundColor" provided
            this.GridBackgroundColor = gridBackgroundColor ?? @"#ffffff";
            this.EnablePnginfo = enablePnginfo;
            this.SaveTxt = saveTxt;
            this.SaveImagesBeforeFaceRestoration = saveImagesBeforeFaceRestoration;
            this.SaveImagesBeforeHighresFix = saveImagesBeforeHighresFix;
            this.SaveImagesBeforeColorCorrection = saveImagesBeforeColorCorrection;
            this.SaveMask = saveMask;
            this.SaveMaskComposite = saveMaskComposite;
            this.JpegQuality = jpegQuality;
            this.WebpLossless = webpLossless;
            this.ExportFor4chan = exportFor4chan;
            this.ImgDownscaleThreshold = imgDownscaleThreshold;
            this.TargetSideLength = targetSideLength;
            this.ImgMaxSizeMp = imgMaxSizeMp;
            this.UseOriginalNameBatch = useOriginalNameBatch;
            this.UseUpscalerNameAsSuffix = useUpscalerNameAsSuffix;
            this.SaveSelectedOnly = saveSelectedOnly;
            this.SaveInitImg = saveInitImg;
            this.TempDir = tempDir;
            this.CleanTempDirAtStart = cleanTempDirAtStart;
            this.OutdirSamples = outdirSamples;
            // use default value if no "outdirTxt2imgSamples" provided
            this.OutdirTxt2imgSamples = outdirTxt2imgSamples ?? @"outputs/txt2img-images";
            // use default value if no "outdirImg2imgSamples" provided
            this.OutdirImg2imgSamples = outdirImg2imgSamples ?? @"outputs/img2img-images";
            // use default value if no "outdirExtrasSamples" provided
            this.OutdirExtrasSamples = outdirExtrasSamples ?? @"outputs/extras-images";
            this.OutdirGrids = outdirGrids;
            // use default value if no "outdirTxt2imgGrids" provided
            this.OutdirTxt2imgGrids = outdirTxt2imgGrids ?? @"outputs/txt2img-grids";
            // use default value if no "outdirImg2imgGrids" provided
            this.OutdirImg2imgGrids = outdirImg2imgGrids ?? @"outputs/img2img-grids";
            // use default value if no "outdirSave" provided
            this.OutdirSave = outdirSave ?? @"log/images";
            // use default value if no "outdirInitImages" provided
            this.OutdirInitImages = outdirInitImages ?? @"outputs/init-images";
            this.SaveToDirs = saveToDirs;
            this.GridSaveToDirs = gridSaveToDirs;
            this.UseSaveToDirsForUi = useSaveToDirsForUi;
            // use default value if no "directoriesFilenamePattern" provided
            this.DirectoriesFilenamePattern = directoriesFilenamePattern ?? @"[date]";
            this.DirectoriesMaxPromptWords = directoriesMaxPromptWords;
            this.ESRGANTile = eSRGANTile;
            this.ESRGANTileOverlap = eSRGANTileOverlap;
            this.RealesrganEnabledModels = realesrganEnabledModels;
            this.UpscalerForImg2img = upscalerForImg2img;
            // use default value if no "faceRestorationModel" provided
            this.FaceRestorationModel = faceRestorationModel ?? @"CodeFormer";
            this.CodeFormerWeight = codeFormerWeight;
            this.FaceRestorationUnload = faceRestorationUnload;
            this.ShowWarnings = showWarnings;
            this.MemmonPollRate = memmonPollRate;
            this.SamplesLogStdout = samplesLogStdout;
            this.MultipleTqdm = multipleTqdm;
            this.PrintHypernetExtra = printHypernetExtra;
            this.ListHiddenFiles = listHiddenFiles;
            this.DisableMmapLoadSafetensors = disableMmapLoadSafetensors;
            this.UnloadModelsWhenTraining = unloadModelsWhenTraining;
            this.PinMemory = pinMemory;
            this.SaveOptimizerState = saveOptimizerState;
            this.SaveTrainingSettingsToTxt = saveTrainingSettingsToTxt;
            this.DatasetFilenameWordRegex = datasetFilenameWordRegex;
            // use default value if no "datasetFilenameJoinString" provided
            this.DatasetFilenameJoinString = datasetFilenameJoinString ?? @" ";
            this.TrainingImageRepeatsPerEpoch = trainingImageRepeatsPerEpoch;
            this.TrainingWriteCsvEvery = trainingWriteCsvEvery;
            this.TrainingXattentionOptimizations = trainingXattentionOptimizations;
            this.TrainingEnableTensorboard = trainingEnableTensorboard;
            this.TrainingTensorboardSaveImages = trainingTensorboardSaveImages;
            this.TrainingTensorboardFlushEvery = trainingTensorboardFlushEvery;
            this.SdModelCheckpoint = sdModelCheckpoint;
            this.SdCheckpointCache = sdCheckpointCache;
            this.SdVaeCheckpointCache = sdVaeCheckpointCache;
            // use default value if no "sdVae" provided
            this.SdVae = sdVae ?? @"Automatic";
            this.SdVaeAsDefault = sdVaeAsDefault;
            // use default value if no "sdUnet" provided
            this.SdUnet = sdUnet ?? @"Automatic";
            this.InpaintingMaskWeight = inpaintingMaskWeight;
            this.InitialNoiseMultiplier = initialNoiseMultiplier;
            this.Img2imgColorCorrection = img2imgColorCorrection;
            this.Img2imgFixSteps = img2imgFixSteps;
            // use default value if no "img2imgBackgroundColor" provided
            this.Img2imgBackgroundColor = img2imgBackgroundColor ?? @"#ffffff";
            this.EnableQuantization = enableQuantization;
            this.EnableEmphasis = enableEmphasis;
            this.EnableBatchSeeds = enableBatchSeeds;
            this.CommaPaddingBacktrack = commaPaddingBacktrack;
            this.CLIPStopAtLastLayers = cLIPStopAtLastLayers;
            this.UpcastAttn = upcastAttn;
            this.AutoVaePrecision = autoVaePrecision;
            // use default value if no "randnSource" provided
            this.RandnSource = randnSource ?? @"GPU";
            this.SdxlCropTop = sdxlCropTop;
            this.SdxlCropLeft = sdxlCropLeft;
            this.SdxlRefinerLowAestheticScore = sdxlRefinerLowAestheticScore;
            this.SdxlRefinerHighAestheticScore = sdxlRefinerHighAestheticScore;
            // use default value if no "crossAttentionOptimization" provided
            this.CrossAttentionOptimization = crossAttentionOptimization ?? @"Automatic";
            this.SMinUncond = sMinUncond;
            this.TokenMergingRatio = tokenMergingRatio;
            this.TokenMergingRatioImg2img = tokenMergingRatioImg2img;
            this.TokenMergingRatioHr = tokenMergingRatioHr;
            this.PadCondUncond = padCondUncond;
            this.ExperimentalPersistentCondCache = experimentalPersistentCondCache;
            this.UseOldEmphasisImplementation = useOldEmphasisImplementation;
            this.UseOldKarrasSchedulerSigmas = useOldKarrasSchedulerSigmas;
            this.NoDpmppSdeBatchDeterminism = noDpmppSdeBatchDeterminism;
            this.UseOldHiresFixWidthHeight = useOldHiresFixWidthHeight;
            this.DontFixSecondOrderSamplersSchedule = dontFixSecondOrderSamplersSchedule;
            this.HiresFixUseFirstpassConds = hiresFixUseFirstpassConds;
            this.InterrogateKeepModelsInMemory = interrogateKeepModelsInMemory;
            this.InterrogateReturnRanks = interrogateReturnRanks;
            this.InterrogateClipNumBeams = interrogateClipNumBeams;
            this.InterrogateClipMinLength = interrogateClipMinLength;
            this.InterrogateClipMaxLength = interrogateClipMaxLength;
            this.InterrogateClipDictLimit = interrogateClipDictLimit;
            this.InterrogateClipSkipCategories = interrogateClipSkipCategories;
            this.InterrogateDeepbooruScoreThreshold = interrogateDeepbooruScoreThreshold;
            this.DeepbooruSortAlpha = deepbooruSortAlpha;
            this.DeepbooruUseSpaces = deepbooruUseSpaces;
            this.DeepbooruEscape = deepbooruEscape;
            this.DeepbooruFilterTags = deepbooruFilterTags;
            this.ExtraNetworksShowHiddenDirectories = extraNetworksShowHiddenDirectories;
            // use default value if no "extraNetworksHiddenModels" provided
            this.ExtraNetworksHiddenModels = extraNetworksHiddenModels ?? @"When searched";
            this.ExtraNetworksDefaultMultiplier = extraNetworksDefaultMultiplier;
            this.ExtraNetworksCardWidth = extraNetworksCardWidth;
            this.ExtraNetworksCardHeight = extraNetworksCardHeight;
            this.ExtraNetworksCardTextScale = extraNetworksCardTextScale;
            this.ExtraNetworksCardShowDesc = extraNetworksCardShowDesc;
            // use default value if no "extraNetworksAddTextSeparator" provided
            this.ExtraNetworksAddTextSeparator = extraNetworksAddTextSeparator ?? @" ";
            this.UiExtraNetworksTabReorder = uiExtraNetworksTabReorder;
            this.TextualInversionPrintAtLoad = textualInversionPrintAtLoad;
            this.TextualInversionAddHashesToInfotext = textualInversionAddHashesToInfotext;
            // use default value if no "sdHypernetwork" provided
            this.SdHypernetwork = sdHypernetwork ?? @"None";
            // use default value if no "localization" provided
            this.Localization = localization ?? @"None";
            // use default value if no "gradioTheme" provided
            this.GradioTheme = gradioTheme ?? @"Default";
            this.Img2imgEditorHeight = img2imgEditorHeight;
            this.ReturnGrid = returnGrid;
            this.ReturnMask = returnMask;
            this.ReturnMaskComposite = returnMaskComposite;
            this.DoNotShowImages = doNotShowImages;
            this.SendSeed = sendSeed;
            this.SendSize = sendSize;
            this.JsModalLightbox = jsModalLightbox;
            this.JsModalLightboxInitiallyZoomed = jsModalLightboxInitiallyZoomed;
            this.JsModalLightboxGamepad = jsModalLightboxGamepad;
            this.JsModalLightboxGamepadRepeat = jsModalLightboxGamepadRepeat;
            this.ShowProgressInTitle = showProgressInTitle;
            this.SamplersInDropdown = samplersInDropdown;
            this.DimensionsAndBatchTogether = dimensionsAndBatchTogether;
            this.KeyeditPrecisionAttention = keyeditPrecisionAttention;
            this.KeyeditPrecisionExtra = keyeditPrecisionExtra;
            // use default value if no "keyeditDelimiters" provided
            this.KeyeditDelimiters = keyeditDelimiters ?? @".,\/!?%^*;:{}=`~()";
            this.KeyeditMove = keyeditMove;
            this.QuicksettingsList = quicksettingsList;
            this.UiTabOrder = uiTabOrder;
            this.HiddenTabs = hiddenTabs;
            this.UiReorderList = uiReorderList;
            this.HiresFixShowSampler = hiresFixShowSampler;
            this.HiresFixShowPrompts = hiresFixShowPrompts;
            this.DisableTokenCounters = disableTokenCounters;
            this.AddModelHashToInfo = addModelHashToInfo;
            this.AddModelNameToInfo = addModelNameToInfo;
            this.AddUserNameToInfo = addUserNameToInfo;
            this.AddVersionToInfotext = addVersionToInfotext;
            this.DisableWeightsAutoSwap = disableWeightsAutoSwap;
            // use default value if no "infotextStyles" provided
            this.InfotextStyles = infotextStyles ?? @"Apply if any";
            this.ShowProgressbar = showProgressbar;
            this.LivePreviewsEnable = livePreviewsEnable;
            // use default value if no "livePreviewsImageFormat" provided
            this.LivePreviewsImageFormat = livePreviewsImageFormat ?? @"png";
            this.ShowProgressGrid = showProgressGrid;
            this.ShowProgressEveryNSteps = showProgressEveryNSteps;
            // use default value if no "showProgressType" provided
            this.ShowProgressType = showProgressType ?? @"Approx NN";
            // use default value if no "livePreviewContent" provided
            this.LivePreviewContent = livePreviewContent ?? @"Prompt";
            this.LivePreviewRefreshPeriod = livePreviewRefreshPeriod;
            this.HideSamplers = hideSamplers;
            this.EtaDdim = etaDdim;
            this.EtaAncestral = etaAncestral;
            // use default value if no "ddimDiscretize" provided
            this.DdimDiscretize = ddimDiscretize ?? @"uniform";
            this.SChurn = sChurn;
            this.STmin = sTmin;
            this.SNoise = sNoise;
            // use default value if no "kSchedType" provided
            this.KSchedType = kSchedType ?? @"Automatic";
            this.SigmaMin = sigmaMin;
            this.SigmaMax = sigmaMax;
            this.Rho = rho;
            this.EtaNoiseSeedDelta = etaNoiseSeedDelta;
            this.AlwaysDiscardNextToLastSigma = alwaysDiscardNextToLastSigma;
            // use default value if no "uniPcVariant" provided
            this.UniPcVariant = uniPcVariant ?? @"bh1";
            // use default value if no "uniPcSkipType" provided
            this.UniPcSkipType = uniPcSkipType ?? @"time_uniform";
            this.UniPcOrder = uniPcOrder;
            this.UniPcLowerOrderFinal = uniPcLowerOrderFinal;
            this.PostprocessingEnableInMainUi = postprocessingEnableInMainUi;
            this.PostprocessingOperationOrder = postprocessingOperationOrder;
            this.UpscalingMaxImagesInCache = upscalingMaxImagesInCache;
            this.DisabledExtensions = disabledExtensions;
            // use default value if no "disableAllExtensions" provided
            this.DisableAllExtensions = disableAllExtensions ?? @"none";
            this.RestoreConfigStateFile = restoreConfigStateFile;
            this.SdCheckpointHash = sdCheckpointHash;
        }

        /// <summary>
        /// Always save all generated images
        /// </summary>
        /// <value>Always save all generated images</value>
        [DataMember(Name = "samples_save", EmitDefaultValue = true)]
        public bool SamplesSave { get; set; }

        /// <summary>
        /// File format for images
        /// </summary>
        /// <value>File format for images</value>
        [DataMember(Name = "samples_format", EmitDefaultValue = false)]
        public string SamplesFormat { get; set; }

        /// <summary>
        /// Images filename pattern
        /// </summary>
        /// <value>Images filename pattern</value>
        [DataMember(Name = "samples_filename_pattern", EmitDefaultValue = true)]
        public Object SamplesFilenamePattern { get; set; }

        /// <summary>
        /// Add number to filename when saving
        /// </summary>
        /// <value>Add number to filename when saving</value>
        [DataMember(Name = "save_images_add_number", EmitDefaultValue = true)]
        public bool SaveImagesAddNumber { get; set; }

        /// <summary>
        /// Always save all generated image grids
        /// </summary>
        /// <value>Always save all generated image grids</value>
        [DataMember(Name = "grid_save", EmitDefaultValue = true)]
        public bool GridSave { get; set; }

        /// <summary>
        /// File format for grids
        /// </summary>
        /// <value>File format for grids</value>
        [DataMember(Name = "grid_format", EmitDefaultValue = false)]
        public string GridFormat { get; set; }

        /// <summary>
        /// Add extended info (seed, prompt) to filename when saving grid
        /// </summary>
        /// <value>Add extended info (seed, prompt) to filename when saving grid</value>
        [DataMember(Name = "grid_extended_filename", EmitDefaultValue = true)]
        public Object GridExtendedFilename { get; set; }

        /// <summary>
        /// Do not save grids consisting of one picture
        /// </summary>
        /// <value>Do not save grids consisting of one picture</value>
        [DataMember(Name = "grid_only_if_multiple", EmitDefaultValue = true)]
        public bool GridOnlyIfMultiple { get; set; }

        /// <summary>
        /// Prevent empty spots in grid (when set to autodetect)
        /// </summary>
        /// <value>Prevent empty spots in grid (when set to autodetect)</value>
        [DataMember(Name = "grid_prevent_empty_spots", EmitDefaultValue = true)]
        public Object GridPreventEmptySpots { get; set; }

        /// <summary>
        /// Archive filename pattern
        /// </summary>
        /// <value>Archive filename pattern</value>
        [DataMember(Name = "grid_zip_filename_pattern", EmitDefaultValue = true)]
        public Object GridZipFilenamePattern { get; set; }

        /// <summary>
        /// Grid row count; use -1 for autodetect and 0 for it to be same as batch size
        /// </summary>
        /// <value>Grid row count; use -1 for autodetect and 0 for it to be same as batch size</value>
        [DataMember(Name = "n_rows", EmitDefaultValue = false)]
        public decimal NRows { get; set; }

        /// <summary>
        /// Font for image grids that have text
        /// </summary>
        /// <value>Font for image grids that have text</value>
        [DataMember(Name = "font", EmitDefaultValue = true)]
        public Object Font { get; set; }

        /// <summary>
        /// Text color for image grids
        /// </summary>
        /// <value>Text color for image grids</value>
        [DataMember(Name = "grid_text_active_color", EmitDefaultValue = false)]
        public string GridTextActiveColor { get; set; }

        /// <summary>
        /// Inactive text color for image grids
        /// </summary>
        /// <value>Inactive text color for image grids</value>
        [DataMember(Name = "grid_text_inactive_color", EmitDefaultValue = false)]
        public string GridTextInactiveColor { get; set; }

        /// <summary>
        /// Background color for image grids
        /// </summary>
        /// <value>Background color for image grids</value>
        [DataMember(Name = "grid_background_color", EmitDefaultValue = false)]
        public string GridBackgroundColor { get; set; }

        /// <summary>
        /// Save text information about generation parameters as chunks to png files
        /// </summary>
        /// <value>Save text information about generation parameters as chunks to png files</value>
        [DataMember(Name = "enable_pnginfo", EmitDefaultValue = true)]
        public bool EnablePnginfo { get; set; }

        /// <summary>
        /// Create a text file next to every image with generation parameters.
        /// </summary>
        /// <value>Create a text file next to every image with generation parameters.</value>
        [DataMember(Name = "save_txt", EmitDefaultValue = true)]
        public Object SaveTxt { get; set; }

        /// <summary>
        /// Save a copy of image before doing face restoration.
        /// </summary>
        /// <value>Save a copy of image before doing face restoration.</value>
        [DataMember(Name = "save_images_before_face_restoration", EmitDefaultValue = true)]
        public Object SaveImagesBeforeFaceRestoration { get; set; }

        /// <summary>
        /// Save a copy of image before applying highres fix.
        /// </summary>
        /// <value>Save a copy of image before applying highres fix.</value>
        [DataMember(Name = "save_images_before_highres_fix", EmitDefaultValue = true)]
        public Object SaveImagesBeforeHighresFix { get; set; }

        /// <summary>
        /// Save a copy of image before applying color correction to img2img results
        /// </summary>
        /// <value>Save a copy of image before applying color correction to img2img results</value>
        [DataMember(Name = "save_images_before_color_correction", EmitDefaultValue = true)]
        public Object SaveImagesBeforeColorCorrection { get; set; }

        /// <summary>
        /// For inpainting, save a copy of the greyscale mask
        /// </summary>
        /// <value>For inpainting, save a copy of the greyscale mask</value>
        [DataMember(Name = "save_mask", EmitDefaultValue = true)]
        public Object SaveMask { get; set; }

        /// <summary>
        /// For inpainting, save a masked composite
        /// </summary>
        /// <value>For inpainting, save a masked composite</value>
        [DataMember(Name = "save_mask_composite", EmitDefaultValue = true)]
        public Object SaveMaskComposite { get; set; }

        /// <summary>
        /// Quality for saved jpeg images
        /// </summary>
        /// <value>Quality for saved jpeg images</value>
        [DataMember(Name = "jpeg_quality", EmitDefaultValue = false)]
        public decimal JpegQuality { get; set; }

        /// <summary>
        /// Use lossless compression for webp images
        /// </summary>
        /// <value>Use lossless compression for webp images</value>
        [DataMember(Name = "webp_lossless", EmitDefaultValue = true)]
        public Object WebpLossless { get; set; }

        /// <summary>
        /// Save copy of large images as JPG
        /// </summary>
        /// <value>Save copy of large images as JPG</value>
        [DataMember(Name = "export_for_4chan", EmitDefaultValue = true)]
        public bool ExportFor4chan { get; set; }

        /// <summary>
        /// File size limit for the above option, MB
        /// </summary>
        /// <value>File size limit for the above option, MB</value>
        [DataMember(Name = "img_downscale_threshold", EmitDefaultValue = false)]
        public decimal ImgDownscaleThreshold { get; set; }

        /// <summary>
        /// Width/height limit for the above option, in pixels
        /// </summary>
        /// <value>Width/height limit for the above option, in pixels</value>
        [DataMember(Name = "target_side_length", EmitDefaultValue = false)]
        public decimal TargetSideLength { get; set; }

        /// <summary>
        /// Maximum image size
        /// </summary>
        /// <value>Maximum image size</value>
        [DataMember(Name = "img_max_size_mp", EmitDefaultValue = false)]
        public decimal ImgMaxSizeMp { get; set; }

        /// <summary>
        /// Use original name for output filename during batch process in extras tab
        /// </summary>
        /// <value>Use original name for output filename during batch process in extras tab</value>
        [DataMember(Name = "use_original_name_batch", EmitDefaultValue = true)]
        public bool UseOriginalNameBatch { get; set; }

        /// <summary>
        /// Use upscaler name as filename suffix in the extras tab
        /// </summary>
        /// <value>Use upscaler name as filename suffix in the extras tab</value>
        [DataMember(Name = "use_upscaler_name_as_suffix", EmitDefaultValue = true)]
        public Object UseUpscalerNameAsSuffix { get; set; }

        /// <summary>
        /// When using &#39;Save&#39; button, only save a single selected image
        /// </summary>
        /// <value>When using &#39;Save&#39; button, only save a single selected image</value>
        [DataMember(Name = "save_selected_only", EmitDefaultValue = true)]
        public bool SaveSelectedOnly { get; set; }

        /// <summary>
        /// Save init images when using img2img
        /// </summary>
        /// <value>Save init images when using img2img</value>
        [DataMember(Name = "save_init_img", EmitDefaultValue = true)]
        public Object SaveInitImg { get; set; }

        /// <summary>
        /// Directory for temporary images; leave empty for default
        /// </summary>
        /// <value>Directory for temporary images; leave empty for default</value>
        [DataMember(Name = "temp_dir", EmitDefaultValue = true)]
        public Object TempDir { get; set; }

        /// <summary>
        /// Cleanup non-default temporary directory when starting webui
        /// </summary>
        /// <value>Cleanup non-default temporary directory when starting webui</value>
        [DataMember(Name = "clean_temp_dir_at_start", EmitDefaultValue = true)]
        public Object CleanTempDirAtStart { get; set; }

        /// <summary>
        /// Output directory for images; if empty, defaults to three directories below
        /// </summary>
        /// <value>Output directory for images; if empty, defaults to three directories below</value>
        [DataMember(Name = "outdir_samples", EmitDefaultValue = true)]
        public Object OutdirSamples { get; set; }

        /// <summary>
        /// Output directory for txt2img images
        /// </summary>
        /// <value>Output directory for txt2img images</value>
        [DataMember(Name = "outdir_txt2img_samples", EmitDefaultValue = false)]
        public string OutdirTxt2imgSamples { get; set; }

        /// <summary>
        /// Output directory for img2img images
        /// </summary>
        /// <value>Output directory for img2img images</value>
        [DataMember(Name = "outdir_img2img_samples", EmitDefaultValue = false)]
        public string OutdirImg2imgSamples { get; set; }

        /// <summary>
        /// Output directory for images from extras tab
        /// </summary>
        /// <value>Output directory for images from extras tab</value>
        [DataMember(Name = "outdir_extras_samples", EmitDefaultValue = false)]
        public string OutdirExtrasSamples { get; set; }

        /// <summary>
        /// Output directory for grids; if empty, defaults to two directories below
        /// </summary>
        /// <value>Output directory for grids; if empty, defaults to two directories below</value>
        [DataMember(Name = "outdir_grids", EmitDefaultValue = true)]
        public Object OutdirGrids { get; set; }

        /// <summary>
        /// Output directory for txt2img grids
        /// </summary>
        /// <value>Output directory for txt2img grids</value>
        [DataMember(Name = "outdir_txt2img_grids", EmitDefaultValue = false)]
        public string OutdirTxt2imgGrids { get; set; }

        /// <summary>
        /// Output directory for img2img grids
        /// </summary>
        /// <value>Output directory for img2img grids</value>
        [DataMember(Name = "outdir_img2img_grids", EmitDefaultValue = false)]
        public string OutdirImg2imgGrids { get; set; }

        /// <summary>
        /// Directory for saving images using the Save button
        /// </summary>
        /// <value>Directory for saving images using the Save button</value>
        [DataMember(Name = "outdir_save", EmitDefaultValue = false)]
        public string OutdirSave { get; set; }

        /// <summary>
        /// Directory for saving init images when using img2img
        /// </summary>
        /// <value>Directory for saving init images when using img2img</value>
        [DataMember(Name = "outdir_init_images", EmitDefaultValue = false)]
        public string OutdirInitImages { get; set; }

        /// <summary>
        /// Save images to a subdirectory
        /// </summary>
        /// <value>Save images to a subdirectory</value>
        [DataMember(Name = "save_to_dirs", EmitDefaultValue = true)]
        public bool SaveToDirs { get; set; }

        /// <summary>
        /// Save grids to a subdirectory
        /// </summary>
        /// <value>Save grids to a subdirectory</value>
        [DataMember(Name = "grid_save_to_dirs", EmitDefaultValue = true)]
        public bool GridSaveToDirs { get; set; }

        /// <summary>
        /// When using \&quot;Save\&quot; button, save images to a subdirectory
        /// </summary>
        /// <value>When using \&quot;Save\&quot; button, save images to a subdirectory</value>
        [DataMember(Name = "use_save_to_dirs_for_ui", EmitDefaultValue = true)]
        public Object UseSaveToDirsForUi { get; set; }

        /// <summary>
        /// Directory name pattern
        /// </summary>
        /// <value>Directory name pattern</value>
        [DataMember(Name = "directories_filename_pattern", EmitDefaultValue = false)]
        public string DirectoriesFilenamePattern { get; set; }

        /// <summary>
        /// Max prompt words for [prompt_words] pattern
        /// </summary>
        /// <value>Max prompt words for [prompt_words] pattern</value>
        [DataMember(Name = "directories_max_prompt_words", EmitDefaultValue = false)]
        public decimal DirectoriesMaxPromptWords { get; set; }

        /// <summary>
        /// Tile size for ESRGAN upscalers.
        /// </summary>
        /// <value>Tile size for ESRGAN upscalers.</value>
        [DataMember(Name = "ESRGAN_tile", EmitDefaultValue = false)]
        public decimal ESRGANTile { get; set; }

        /// <summary>
        /// Tile overlap for ESRGAN upscalers.
        /// </summary>
        /// <value>Tile overlap for ESRGAN upscalers.</value>
        [DataMember(Name = "ESRGAN_tile_overlap", EmitDefaultValue = false)]
        public decimal ESRGANTileOverlap { get; set; }

        /// <summary>
        /// Select which Real-ESRGAN models to show in the web UI.
        /// </summary>
        /// <value>Select which Real-ESRGAN models to show in the web UI.</value>
        [DataMember(Name = "realesrgan_enabled_models", EmitDefaultValue = false)]
        public List<Object> RealesrganEnabledModels { get; set; }

        /// <summary>
        /// Upscaler for img2img
        /// </summary>
        /// <value>Upscaler for img2img</value>
        [DataMember(Name = "upscaler_for_img2img", EmitDefaultValue = true)]
        public Object UpscalerForImg2img { get; set; }

        /// <summary>
        /// Face restoration model
        /// </summary>
        /// <value>Face restoration model</value>
        [DataMember(Name = "face_restoration_model", EmitDefaultValue = false)]
        public string FaceRestorationModel { get; set; }

        /// <summary>
        /// CodeFormer weight
        /// </summary>
        /// <value>CodeFormer weight</value>
        [DataMember(Name = "code_former_weight", EmitDefaultValue = false)]
        public decimal CodeFormerWeight { get; set; }

        /// <summary>
        /// Move face restoration model from VRAM into RAM after processing
        /// </summary>
        /// <value>Move face restoration model from VRAM into RAM after processing</value>
        [DataMember(Name = "face_restoration_unload", EmitDefaultValue = true)]
        public Object FaceRestorationUnload { get; set; }

        /// <summary>
        /// Show warnings in console.
        /// </summary>
        /// <value>Show warnings in console.</value>
        [DataMember(Name = "show_warnings", EmitDefaultValue = true)]
        public Object ShowWarnings { get; set; }

        /// <summary>
        /// VRAM usage polls per second during generation.
        /// </summary>
        /// <value>VRAM usage polls per second during generation.</value>
        [DataMember(Name = "memmon_poll_rate", EmitDefaultValue = false)]
        public decimal MemmonPollRate { get; set; }

        /// <summary>
        /// Always print all generation info to standard output
        /// </summary>
        /// <value>Always print all generation info to standard output</value>
        [DataMember(Name = "samples_log_stdout", EmitDefaultValue = true)]
        public Object SamplesLogStdout { get; set; }

        /// <summary>
        /// Add a second progress bar to the console that shows progress for an entire job.
        /// </summary>
        /// <value>Add a second progress bar to the console that shows progress for an entire job.</value>
        [DataMember(Name = "multiple_tqdm", EmitDefaultValue = true)]
        public bool MultipleTqdm { get; set; }

        /// <summary>
        /// Print extra hypernetwork information to console.
        /// </summary>
        /// <value>Print extra hypernetwork information to console.</value>
        [DataMember(Name = "print_hypernet_extra", EmitDefaultValue = true)]
        public Object PrintHypernetExtra { get; set; }

        /// <summary>
        /// Load models/files in hidden directories
        /// </summary>
        /// <value>Load models/files in hidden directories</value>
        [DataMember(Name = "list_hidden_files", EmitDefaultValue = true)]
        public bool ListHiddenFiles { get; set; }

        /// <summary>
        /// Disable memmapping for loading .safetensors files.
        /// </summary>
        /// <value>Disable memmapping for loading .safetensors files.</value>
        [DataMember(Name = "disable_mmap_load_safetensors", EmitDefaultValue = true)]
        public Object DisableMmapLoadSafetensors { get; set; }

        /// <summary>
        /// Move VAE and CLIP to RAM when training if possible. Saves VRAM.
        /// </summary>
        /// <value>Move VAE and CLIP to RAM when training if possible. Saves VRAM.</value>
        [DataMember(Name = "unload_models_when_training", EmitDefaultValue = true)]
        public Object UnloadModelsWhenTraining { get; set; }

        /// <summary>
        /// Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage.
        /// </summary>
        /// <value>Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage.</value>
        [DataMember(Name = "pin_memory", EmitDefaultValue = true)]
        public Object PinMemory { get; set; }

        /// <summary>
        /// Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file.
        /// </summary>
        /// <value>Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file.</value>
        [DataMember(Name = "save_optimizer_state", EmitDefaultValue = true)]
        public Object SaveOptimizerState { get; set; }

        /// <summary>
        /// Save textual inversion and hypernet settings to a text file whenever training starts.
        /// </summary>
        /// <value>Save textual inversion and hypernet settings to a text file whenever training starts.</value>
        [DataMember(Name = "save_training_settings_to_txt", EmitDefaultValue = true)]
        public bool SaveTrainingSettingsToTxt { get; set; }

        /// <summary>
        /// Filename word regex
        /// </summary>
        /// <value>Filename word regex</value>
        [DataMember(Name = "dataset_filename_word_regex", EmitDefaultValue = true)]
        public Object DatasetFilenameWordRegex { get; set; }

        /// <summary>
        /// Filename join string
        /// </summary>
        /// <value>Filename join string</value>
        [DataMember(Name = "dataset_filename_join_string", EmitDefaultValue = false)]
        public string DatasetFilenameJoinString { get; set; }

        /// <summary>
        /// Number of repeats for a single input image per epoch; used only for displaying epoch number
        /// </summary>
        /// <value>Number of repeats for a single input image per epoch; used only for displaying epoch number</value>
        [DataMember(Name = "training_image_repeats_per_epoch", EmitDefaultValue = false)]
        public decimal TrainingImageRepeatsPerEpoch { get; set; }

        /// <summary>
        /// Save an csv containing the loss to log directory every N steps, 0 to disable
        /// </summary>
        /// <value>Save an csv containing the loss to log directory every N steps, 0 to disable</value>
        [DataMember(Name = "training_write_csv_every", EmitDefaultValue = false)]
        public decimal TrainingWriteCsvEvery { get; set; }

        /// <summary>
        /// Use cross attention optimizations while training
        /// </summary>
        /// <value>Use cross attention optimizations while training</value>
        [DataMember(Name = "training_xattention_optimizations", EmitDefaultValue = true)]
        public Object TrainingXattentionOptimizations { get; set; }

        /// <summary>
        /// Enable tensorboard logging.
        /// </summary>
        /// <value>Enable tensorboard logging.</value>
        [DataMember(Name = "training_enable_tensorboard", EmitDefaultValue = true)]
        public Object TrainingEnableTensorboard { get; set; }

        /// <summary>
        /// Save generated images within tensorboard.
        /// </summary>
        /// <value>Save generated images within tensorboard.</value>
        [DataMember(Name = "training_tensorboard_save_images", EmitDefaultValue = true)]
        public Object TrainingTensorboardSaveImages { get; set; }

        /// <summary>
        /// How often, in seconds, to flush the pending tensorboard events and summaries to disk.
        /// </summary>
        /// <value>How often, in seconds, to flush the pending tensorboard events and summaries to disk.</value>
        [DataMember(Name = "training_tensorboard_flush_every", EmitDefaultValue = false)]
        public decimal TrainingTensorboardFlushEvery { get; set; }

        /// <summary>
        /// Stable Diffusion checkpoint
        /// </summary>
        /// <value>Stable Diffusion checkpoint</value>
        [DataMember(Name = "sd_model_checkpoint", EmitDefaultValue = true)]
        public Object SdModelCheckpoint { get; set; }

        /// <summary>
        /// Checkpoints to cache in RAM
        /// </summary>
        /// <value>Checkpoints to cache in RAM</value>
        [DataMember(Name = "sd_checkpoint_cache", EmitDefaultValue = true)]
        public Object SdCheckpointCache { get; set; }

        /// <summary>
        /// VAE Checkpoints to cache in RAM
        /// </summary>
        /// <value>VAE Checkpoints to cache in RAM</value>
        [DataMember(Name = "sd_vae_checkpoint_cache", EmitDefaultValue = true)]
        public Object SdVaeCheckpointCache { get; set; }

        /// <summary>
        /// SD VAE
        /// </summary>
        /// <value>SD VAE</value>
        [DataMember(Name = "sd_vae", EmitDefaultValue = false)]
        public string SdVae { get; set; }

        /// <summary>
        /// Ignore selected VAE for stable diffusion checkpoints that have their own .vae.pt next to them
        /// </summary>
        /// <value>Ignore selected VAE for stable diffusion checkpoints that have their own .vae.pt next to them</value>
        [DataMember(Name = "sd_vae_as_default", EmitDefaultValue = true)]
        public bool SdVaeAsDefault { get; set; }

        /// <summary>
        /// SD Unet
        /// </summary>
        /// <value>SD Unet</value>
        [DataMember(Name = "sd_unet", EmitDefaultValue = false)]
        public string SdUnet { get; set; }

        /// <summary>
        /// Inpainting conditioning mask strength
        /// </summary>
        /// <value>Inpainting conditioning mask strength</value>
        [DataMember(Name = "inpainting_mask_weight", EmitDefaultValue = false)]
        public decimal InpaintingMaskWeight { get; set; }

        /// <summary>
        /// Noise multiplier for img2img
        /// </summary>
        /// <value>Noise multiplier for img2img</value>
        [DataMember(Name = "initial_noise_multiplier", EmitDefaultValue = false)]
        public decimal InitialNoiseMultiplier { get; set; }

        /// <summary>
        /// Apply color correction to img2img results to match original colors.
        /// </summary>
        /// <value>Apply color correction to img2img results to match original colors.</value>
        [DataMember(Name = "img2img_color_correction", EmitDefaultValue = true)]
        public Object Img2imgColorCorrection { get; set; }

        /// <summary>
        /// With img2img, do exactly the amount of steps the slider specifies.
        /// </summary>
        /// <value>With img2img, do exactly the amount of steps the slider specifies.</value>
        [DataMember(Name = "img2img_fix_steps", EmitDefaultValue = true)]
        public Object Img2imgFixSteps { get; set; }

        /// <summary>
        /// With img2img, fill image&#39;s transparent parts with this color.
        /// </summary>
        /// <value>With img2img, fill image&#39;s transparent parts with this color.</value>
        [DataMember(Name = "img2img_background_color", EmitDefaultValue = false)]
        public string Img2imgBackgroundColor { get; set; }

        /// <summary>
        /// Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds. Requires restart to apply.
        /// </summary>
        /// <value>Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds. Requires restart to apply.</value>
        [DataMember(Name = "enable_quantization", EmitDefaultValue = true)]
        public Object EnableQuantization { get; set; }

        /// <summary>
        /// Enable emphasis
        /// </summary>
        /// <value>Enable emphasis</value>
        [DataMember(Name = "enable_emphasis", EmitDefaultValue = true)]
        public bool EnableEmphasis { get; set; }

        /// <summary>
        /// Make K-diffusion samplers produce same images in a batch as when making a single image
        /// </summary>
        /// <value>Make K-diffusion samplers produce same images in a batch as when making a single image</value>
        [DataMember(Name = "enable_batch_seeds", EmitDefaultValue = true)]
        public bool EnableBatchSeeds { get; set; }

        /// <summary>
        /// Prompt word wrap length limit
        /// </summary>
        /// <value>Prompt word wrap length limit</value>
        [DataMember(Name = "comma_padding_backtrack", EmitDefaultValue = false)]
        public decimal CommaPaddingBacktrack { get; set; }

        /// <summary>
        /// Clip skip
        /// </summary>
        /// <value>Clip skip</value>
        [DataMember(Name = "CLIP_stop_at_last_layers", EmitDefaultValue = false)]
        public decimal CLIPStopAtLastLayers { get; set; }

        /// <summary>
        /// Upcast cross attention layer to float32
        /// </summary>
        /// <value>Upcast cross attention layer to float32</value>
        [DataMember(Name = "upcast_attn", EmitDefaultValue = true)]
        public Object UpcastAttn { get; set; }

        /// <summary>
        /// Automaticlly revert VAE to 32-bit floats
        /// </summary>
        /// <value>Automaticlly revert VAE to 32-bit floats</value>
        [DataMember(Name = "auto_vae_precision", EmitDefaultValue = true)]
        public bool AutoVaePrecision { get; set; }

        /// <summary>
        /// Random number generator source.
        /// </summary>
        /// <value>Random number generator source.</value>
        [DataMember(Name = "randn_source", EmitDefaultValue = false)]
        public string RandnSource { get; set; }

        /// <summary>
        /// crop top coordinate
        /// </summary>
        /// <value>crop top coordinate</value>
        [DataMember(Name = "sdxl_crop_top", EmitDefaultValue = true)]
        public Object SdxlCropTop { get; set; }

        /// <summary>
        /// crop left coordinate
        /// </summary>
        /// <value>crop left coordinate</value>
        [DataMember(Name = "sdxl_crop_left", EmitDefaultValue = true)]
        public Object SdxlCropLeft { get; set; }

        /// <summary>
        /// SDXL low aesthetic score
        /// </summary>
        /// <value>SDXL low aesthetic score</value>
        [DataMember(Name = "sdxl_refiner_low_aesthetic_score", EmitDefaultValue = false)]
        public decimal SdxlRefinerLowAestheticScore { get; set; }

        /// <summary>
        /// SDXL high aesthetic score
        /// </summary>
        /// <value>SDXL high aesthetic score</value>
        [DataMember(Name = "sdxl_refiner_high_aesthetic_score", EmitDefaultValue = false)]
        public decimal SdxlRefinerHighAestheticScore { get; set; }

        /// <summary>
        /// Cross attention optimization
        /// </summary>
        /// <value>Cross attention optimization</value>
        [DataMember(Name = "cross_attention_optimization", EmitDefaultValue = false)]
        public string CrossAttentionOptimization { get; set; }

        /// <summary>
        /// Negative Guidance minimum sigma
        /// </summary>
        /// <value>Negative Guidance minimum sigma</value>
        [DataMember(Name = "s_min_uncond", EmitDefaultValue = true)]
        public Object SMinUncond { get; set; }

        /// <summary>
        /// Token merging ratio
        /// </summary>
        /// <value>Token merging ratio</value>
        [DataMember(Name = "token_merging_ratio", EmitDefaultValue = true)]
        public Object TokenMergingRatio { get; set; }

        /// <summary>
        /// Token merging ratio for img2img
        /// </summary>
        /// <value>Token merging ratio for img2img</value>
        [DataMember(Name = "token_merging_ratio_img2img", EmitDefaultValue = true)]
        public Object TokenMergingRatioImg2img { get; set; }

        /// <summary>
        /// Token merging ratio for high-res pass
        /// </summary>
        /// <value>Token merging ratio for high-res pass</value>
        [DataMember(Name = "token_merging_ratio_hr", EmitDefaultValue = true)]
        public Object TokenMergingRatioHr { get; set; }

        /// <summary>
        /// Pad prompt/negative prompt to be same length
        /// </summary>
        /// <value>Pad prompt/negative prompt to be same length</value>
        [DataMember(Name = "pad_cond_uncond", EmitDefaultValue = true)]
        public Object PadCondUncond { get; set; }

        /// <summary>
        /// persistent cond cache
        /// </summary>
        /// <value>persistent cond cache</value>
        [DataMember(Name = "experimental_persistent_cond_cache", EmitDefaultValue = true)]
        public Object ExperimentalPersistentCondCache { get; set; }

        /// <summary>
        /// Use old emphasis implementation. Can be useful to reproduce old seeds.
        /// </summary>
        /// <value>Use old emphasis implementation. Can be useful to reproduce old seeds.</value>
        [DataMember(Name = "use_old_emphasis_implementation", EmitDefaultValue = true)]
        public Object UseOldEmphasisImplementation { get; set; }

        /// <summary>
        /// Use old karras scheduler sigmas (0.1 to 10).
        /// </summary>
        /// <value>Use old karras scheduler sigmas (0.1 to 10).</value>
        [DataMember(Name = "use_old_karras_scheduler_sigmas", EmitDefaultValue = true)]
        public Object UseOldKarrasSchedulerSigmas { get; set; }

        /// <summary>
        /// Do not make DPM++ SDE deterministic across different batch sizes.
        /// </summary>
        /// <value>Do not make DPM++ SDE deterministic across different batch sizes.</value>
        [DataMember(Name = "no_dpmpp_sde_batch_determinism", EmitDefaultValue = true)]
        public Object NoDpmppSdeBatchDeterminism { get; set; }

        /// <summary>
        /// For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to).
        /// </summary>
        /// <value>For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to).</value>
        [DataMember(Name = "use_old_hires_fix_width_height", EmitDefaultValue = true)]
        public Object UseOldHiresFixWidthHeight { get; set; }

        /// <summary>
        /// Do not fix prompt schedule for second order samplers.
        /// </summary>
        /// <value>Do not fix prompt schedule for second order samplers.</value>
        [DataMember(Name = "dont_fix_second_order_samplers_schedule", EmitDefaultValue = true)]
        public Object DontFixSecondOrderSamplersSchedule { get; set; }

        /// <summary>
        /// For hires fix, calculate conds of second pass using extra networks of first pass.
        /// </summary>
        /// <value>For hires fix, calculate conds of second pass using extra networks of first pass.</value>
        [DataMember(Name = "hires_fix_use_firstpass_conds", EmitDefaultValue = true)]
        public Object HiresFixUseFirstpassConds { get; set; }

        /// <summary>
        /// Keep models in VRAM
        /// </summary>
        /// <value>Keep models in VRAM</value>
        [DataMember(Name = "interrogate_keep_models_in_memory", EmitDefaultValue = true)]
        public Object InterrogateKeepModelsInMemory { get; set; }

        /// <summary>
        /// Include ranks of model tags matches in results.
        /// </summary>
        /// <value>Include ranks of model tags matches in results.</value>
        [DataMember(Name = "interrogate_return_ranks", EmitDefaultValue = true)]
        public Object InterrogateReturnRanks { get; set; }

        /// <summary>
        /// BLIP: num_beams
        /// </summary>
        /// <value>BLIP: num_beams</value>
        [DataMember(Name = "interrogate_clip_num_beams", EmitDefaultValue = false)]
        public decimal InterrogateClipNumBeams { get; set; }

        /// <summary>
        /// BLIP: minimum description length
        /// </summary>
        /// <value>BLIP: minimum description length</value>
        [DataMember(Name = "interrogate_clip_min_length", EmitDefaultValue = false)]
        public decimal InterrogateClipMinLength { get; set; }

        /// <summary>
        /// BLIP: maximum description length
        /// </summary>
        /// <value>BLIP: maximum description length</value>
        [DataMember(Name = "interrogate_clip_max_length", EmitDefaultValue = false)]
        public decimal InterrogateClipMaxLength { get; set; }

        /// <summary>
        /// CLIP: maximum number of lines in text file
        /// </summary>
        /// <value>CLIP: maximum number of lines in text file</value>
        [DataMember(Name = "interrogate_clip_dict_limit", EmitDefaultValue = false)]
        public decimal InterrogateClipDictLimit { get; set; }

        /// <summary>
        /// CLIP: skip inquire categories
        /// </summary>
        /// <value>CLIP: skip inquire categories</value>
        [DataMember(Name = "interrogate_clip_skip_categories", EmitDefaultValue = true)]
        public Object InterrogateClipSkipCategories { get; set; }

        /// <summary>
        /// deepbooru: score threshold
        /// </summary>
        /// <value>deepbooru: score threshold</value>
        [DataMember(Name = "interrogate_deepbooru_score_threshold", EmitDefaultValue = false)]
        public decimal InterrogateDeepbooruScoreThreshold { get; set; }

        /// <summary>
        /// deepbooru: sort tags alphabetically
        /// </summary>
        /// <value>deepbooru: sort tags alphabetically</value>
        [DataMember(Name = "deepbooru_sort_alpha", EmitDefaultValue = true)]
        public bool DeepbooruSortAlpha { get; set; }

        /// <summary>
        /// deepbooru: use spaces in tags
        /// </summary>
        /// <value>deepbooru: use spaces in tags</value>
        [DataMember(Name = "deepbooru_use_spaces", EmitDefaultValue = true)]
        public bool DeepbooruUseSpaces { get; set; }

        /// <summary>
        /// deepbooru: escape (\\) brackets
        /// </summary>
        /// <value>deepbooru: escape (\\) brackets</value>
        [DataMember(Name = "deepbooru_escape", EmitDefaultValue = true)]
        public bool DeepbooruEscape { get; set; }

        /// <summary>
        /// deepbooru: filter out those tags
        /// </summary>
        /// <value>deepbooru: filter out those tags</value>
        [DataMember(Name = "deepbooru_filter_tags", EmitDefaultValue = true)]
        public Object DeepbooruFilterTags { get; set; }

        /// <summary>
        /// Show hidden directories
        /// </summary>
        /// <value>Show hidden directories</value>
        [DataMember(Name = "extra_networks_show_hidden_directories", EmitDefaultValue = true)]
        public bool ExtraNetworksShowHiddenDirectories { get; set; }

        /// <summary>
        /// Show cards for models in hidden directories
        /// </summary>
        /// <value>Show cards for models in hidden directories</value>
        [DataMember(Name = "extra_networks_hidden_models", EmitDefaultValue = false)]
        public string ExtraNetworksHiddenModels { get; set; }

        /// <summary>
        /// Default multiplier for extra networks
        /// </summary>
        /// <value>Default multiplier for extra networks</value>
        [DataMember(Name = "extra_networks_default_multiplier", EmitDefaultValue = false)]
        public decimal ExtraNetworksDefaultMultiplier { get; set; }

        /// <summary>
        /// Card width for Extra Networks
        /// </summary>
        /// <value>Card width for Extra Networks</value>
        [DataMember(Name = "extra_networks_card_width", EmitDefaultValue = true)]
        public Object ExtraNetworksCardWidth { get; set; }

        /// <summary>
        /// Card height for Extra Networks
        /// </summary>
        /// <value>Card height for Extra Networks</value>
        [DataMember(Name = "extra_networks_card_height", EmitDefaultValue = true)]
        public Object ExtraNetworksCardHeight { get; set; }

        /// <summary>
        /// Card text scale
        /// </summary>
        /// <value>Card text scale</value>
        [DataMember(Name = "extra_networks_card_text_scale", EmitDefaultValue = false)]
        public decimal ExtraNetworksCardTextScale { get; set; }

        /// <summary>
        /// Show description on card
        /// </summary>
        /// <value>Show description on card</value>
        [DataMember(Name = "extra_networks_card_show_desc", EmitDefaultValue = true)]
        public bool ExtraNetworksCardShowDesc { get; set; }

        /// <summary>
        /// Extra networks separator
        /// </summary>
        /// <value>Extra networks separator</value>
        [DataMember(Name = "extra_networks_add_text_separator", EmitDefaultValue = false)]
        public string ExtraNetworksAddTextSeparator { get; set; }

        /// <summary>
        /// Extra networks tab order
        /// </summary>
        /// <value>Extra networks tab order</value>
        [DataMember(Name = "ui_extra_networks_tab_reorder", EmitDefaultValue = true)]
        public Object UiExtraNetworksTabReorder { get; set; }

        /// <summary>
        /// Print a list of Textual Inversion embeddings when loading model
        /// </summary>
        /// <value>Print a list of Textual Inversion embeddings when loading model</value>
        [DataMember(Name = "textual_inversion_print_at_load", EmitDefaultValue = true)]
        public Object TextualInversionPrintAtLoad { get; set; }

        /// <summary>
        /// Add Textual Inversion hashes to infotext
        /// </summary>
        /// <value>Add Textual Inversion hashes to infotext</value>
        [DataMember(Name = "textual_inversion_add_hashes_to_infotext", EmitDefaultValue = true)]
        public bool TextualInversionAddHashesToInfotext { get; set; }

        /// <summary>
        /// Add hypernetwork to prompt
        /// </summary>
        /// <value>Add hypernetwork to prompt</value>
        [DataMember(Name = "sd_hypernetwork", EmitDefaultValue = false)]
        public string SdHypernetwork { get; set; }

        /// <summary>
        /// Localization
        /// </summary>
        /// <value>Localization</value>
        [DataMember(Name = "localization", EmitDefaultValue = false)]
        public string Localization { get; set; }

        /// <summary>
        /// Gradio theme
        /// </summary>
        /// <value>Gradio theme</value>
        [DataMember(Name = "gradio_theme", EmitDefaultValue = false)]
        public string GradioTheme { get; set; }

        /// <summary>
        /// img2img: height of image editor
        /// </summary>
        /// <value>img2img: height of image editor</value>
        [DataMember(Name = "img2img_editor_height", EmitDefaultValue = false)]
        public decimal Img2imgEditorHeight { get; set; }

        /// <summary>
        /// Show grid in results for web
        /// </summary>
        /// <value>Show grid in results for web</value>
        [DataMember(Name = "return_grid", EmitDefaultValue = true)]
        public bool ReturnGrid { get; set; }

        /// <summary>
        /// For inpainting, include the greyscale mask in results for web
        /// </summary>
        /// <value>For inpainting, include the greyscale mask in results for web</value>
        [DataMember(Name = "return_mask", EmitDefaultValue = true)]
        public Object ReturnMask { get; set; }

        /// <summary>
        /// For inpainting, include masked composite in results for web
        /// </summary>
        /// <value>For inpainting, include masked composite in results for web</value>
        [DataMember(Name = "return_mask_composite", EmitDefaultValue = true)]
        public Object ReturnMaskComposite { get; set; }

        /// <summary>
        /// Do not show any images in results for web
        /// </summary>
        /// <value>Do not show any images in results for web</value>
        [DataMember(Name = "do_not_show_images", EmitDefaultValue = true)]
        public Object DoNotShowImages { get; set; }

        /// <summary>
        /// Send seed when sending prompt or image to other interface
        /// </summary>
        /// <value>Send seed when sending prompt or image to other interface</value>
        [DataMember(Name = "send_seed", EmitDefaultValue = true)]
        public bool SendSeed { get; set; }

        /// <summary>
        /// Send size when sending prompt or image to another interface
        /// </summary>
        /// <value>Send size when sending prompt or image to another interface</value>
        [DataMember(Name = "send_size", EmitDefaultValue = true)]
        public bool SendSize { get; set; }

        /// <summary>
        /// Enable full page image viewer
        /// </summary>
        /// <value>Enable full page image viewer</value>
        [DataMember(Name = "js_modal_lightbox", EmitDefaultValue = true)]
        public bool JsModalLightbox { get; set; }

        /// <summary>
        /// Show images zoomed in by default in full page image viewer
        /// </summary>
        /// <value>Show images zoomed in by default in full page image viewer</value>
        [DataMember(Name = "js_modal_lightbox_initially_zoomed", EmitDefaultValue = true)]
        public bool JsModalLightboxInitiallyZoomed { get; set; }

        /// <summary>
        /// Navigate image viewer with gamepad
        /// </summary>
        /// <value>Navigate image viewer with gamepad</value>
        [DataMember(Name = "js_modal_lightbox_gamepad", EmitDefaultValue = true)]
        public Object JsModalLightboxGamepad { get; set; }

        /// <summary>
        /// Gamepad repeat period, in milliseconds
        /// </summary>
        /// <value>Gamepad repeat period, in milliseconds</value>
        [DataMember(Name = "js_modal_lightbox_gamepad_repeat", EmitDefaultValue = false)]
        public decimal JsModalLightboxGamepadRepeat { get; set; }

        /// <summary>
        /// Show generation progress in window title.
        /// </summary>
        /// <value>Show generation progress in window title.</value>
        [DataMember(Name = "show_progress_in_title", EmitDefaultValue = true)]
        public bool ShowProgressInTitle { get; set; }

        /// <summary>
        /// Use dropdown for sampler selection instead of radio group
        /// </summary>
        /// <value>Use dropdown for sampler selection instead of radio group</value>
        [DataMember(Name = "samplers_in_dropdown", EmitDefaultValue = true)]
        public bool SamplersInDropdown { get; set; }

        /// <summary>
        /// Show Width/Height and Batch sliders in same row
        /// </summary>
        /// <value>Show Width/Height and Batch sliders in same row</value>
        [DataMember(Name = "dimensions_and_batch_together", EmitDefaultValue = true)]
        public bool DimensionsAndBatchTogether { get; set; }

        /// <summary>
        /// Ctrl+up/down precision when editing (attention:1.1)
        /// </summary>
        /// <value>Ctrl+up/down precision when editing (attention:1.1)</value>
        [DataMember(Name = "keyedit_precision_attention", EmitDefaultValue = false)]
        public decimal KeyeditPrecisionAttention { get; set; }

        /// <summary>
        /// Ctrl+up/down precision when editing &lt;extra networks:0.9&gt;
        /// </summary>
        /// <value>Ctrl+up/down precision when editing &lt;extra networks:0.9&gt;</value>
        [DataMember(Name = "keyedit_precision_extra", EmitDefaultValue = false)]
        public decimal KeyeditPrecisionExtra { get; set; }

        /// <summary>
        /// Ctrl+up/down word delimiters
        /// </summary>
        /// <value>Ctrl+up/down word delimiters</value>
        [DataMember(Name = "keyedit_delimiters", EmitDefaultValue = false)]
        public string KeyeditDelimiters { get; set; }

        /// <summary>
        /// Alt+left/right moves prompt elements
        /// </summary>
        /// <value>Alt+left/right moves prompt elements</value>
        [DataMember(Name = "keyedit_move", EmitDefaultValue = true)]
        public bool KeyeditMove { get; set; }

        /// <summary>
        /// Quicksettings list
        /// </summary>
        /// <value>Quicksettings list</value>
        [DataMember(Name = "quicksettings_list", EmitDefaultValue = false)]
        public List<Object> QuicksettingsList { get; set; }

        /// <summary>
        /// UI tab order
        /// </summary>
        /// <value>UI tab order</value>
        [DataMember(Name = "ui_tab_order", EmitDefaultValue = true)]
        public Object UiTabOrder { get; set; }

        /// <summary>
        /// Hidden UI tabs
        /// </summary>
        /// <value>Hidden UI tabs</value>
        [DataMember(Name = "hidden_tabs", EmitDefaultValue = true)]
        public Object HiddenTabs { get; set; }

        /// <summary>
        /// txt2img/img2img UI item order
        /// </summary>
        /// <value>txt2img/img2img UI item order</value>
        [DataMember(Name = "ui_reorder_list", EmitDefaultValue = true)]
        public Object UiReorderList { get; set; }

        /// <summary>
        /// Hires fix: show hires sampler selection
        /// </summary>
        /// <value>Hires fix: show hires sampler selection</value>
        [DataMember(Name = "hires_fix_show_sampler", EmitDefaultValue = true)]
        public Object HiresFixShowSampler { get; set; }

        /// <summary>
        /// Hires fix: show hires prompt and negative prompt
        /// </summary>
        /// <value>Hires fix: show hires prompt and negative prompt</value>
        [DataMember(Name = "hires_fix_show_prompts", EmitDefaultValue = true)]
        public Object HiresFixShowPrompts { get; set; }

        /// <summary>
        /// Disable prompt token counters
        /// </summary>
        /// <value>Disable prompt token counters</value>
        [DataMember(Name = "disable_token_counters", EmitDefaultValue = true)]
        public Object DisableTokenCounters { get; set; }

        /// <summary>
        /// Add model hash to generation information
        /// </summary>
        /// <value>Add model hash to generation information</value>
        [DataMember(Name = "add_model_hash_to_info", EmitDefaultValue = true)]
        public bool AddModelHashToInfo { get; set; }

        /// <summary>
        /// Add model name to generation information
        /// </summary>
        /// <value>Add model name to generation information</value>
        [DataMember(Name = "add_model_name_to_info", EmitDefaultValue = true)]
        public bool AddModelNameToInfo { get; set; }

        /// <summary>
        /// Add user name to generation information when authenticated
        /// </summary>
        /// <value>Add user name to generation information when authenticated</value>
        [DataMember(Name = "add_user_name_to_info", EmitDefaultValue = true)]
        public Object AddUserNameToInfo { get; set; }

        /// <summary>
        /// Add program version to generation information
        /// </summary>
        /// <value>Add program version to generation information</value>
        [DataMember(Name = "add_version_to_infotext", EmitDefaultValue = true)]
        public bool AddVersionToInfotext { get; set; }

        /// <summary>
        /// Disregard checkpoint information from pasted infotext
        /// </summary>
        /// <value>Disregard checkpoint information from pasted infotext</value>
        [DataMember(Name = "disable_weights_auto_swap", EmitDefaultValue = true)]
        public bool DisableWeightsAutoSwap { get; set; }

        /// <summary>
        /// Infer styles from prompts of pasted infotext
        /// </summary>
        /// <value>Infer styles from prompts of pasted infotext</value>
        [DataMember(Name = "infotext_styles", EmitDefaultValue = false)]
        public string InfotextStyles { get; set; }

        /// <summary>
        /// Show progressbar
        /// </summary>
        /// <value>Show progressbar</value>
        [DataMember(Name = "show_progressbar", EmitDefaultValue = true)]
        public bool ShowProgressbar { get; set; }

        /// <summary>
        /// Show live previews of the created image
        /// </summary>
        /// <value>Show live previews of the created image</value>
        [DataMember(Name = "live_previews_enable", EmitDefaultValue = true)]
        public bool LivePreviewsEnable { get; set; }

        /// <summary>
        /// Live preview file format
        /// </summary>
        /// <value>Live preview file format</value>
        [DataMember(Name = "live_previews_image_format", EmitDefaultValue = false)]
        public string LivePreviewsImageFormat { get; set; }

        /// <summary>
        /// Show previews of all images generated in a batch as a grid
        /// </summary>
        /// <value>Show previews of all images generated in a batch as a grid</value>
        [DataMember(Name = "show_progress_grid", EmitDefaultValue = true)]
        public bool ShowProgressGrid { get; set; }

        /// <summary>
        /// Live preview display period
        /// </summary>
        /// <value>Live preview display period</value>
        [DataMember(Name = "show_progress_every_n_steps", EmitDefaultValue = false)]
        public decimal ShowProgressEveryNSteps { get; set; }

        /// <summary>
        /// Live preview method
        /// </summary>
        /// <value>Live preview method</value>
        [DataMember(Name = "show_progress_type", EmitDefaultValue = false)]
        public string ShowProgressType { get; set; }

        /// <summary>
        /// Live preview subject
        /// </summary>
        /// <value>Live preview subject</value>
        [DataMember(Name = "live_preview_content", EmitDefaultValue = false)]
        public string LivePreviewContent { get; set; }

        /// <summary>
        /// Progressbar and preview update period
        /// </summary>
        /// <value>Progressbar and preview update period</value>
        [DataMember(Name = "live_preview_refresh_period", EmitDefaultValue = false)]
        public decimal LivePreviewRefreshPeriod { get; set; }

        /// <summary>
        /// Hide samplers in user interface
        /// </summary>
        /// <value>Hide samplers in user interface</value>
        [DataMember(Name = "hide_samplers", EmitDefaultValue = true)]
        public Object HideSamplers { get; set; }

        /// <summary>
        /// Eta for DDIM
        /// </summary>
        /// <value>Eta for DDIM</value>
        [DataMember(Name = "eta_ddim", EmitDefaultValue = true)]
        public Object EtaDdim { get; set; }

        /// <summary>
        /// Eta for ancestral samplers
        /// </summary>
        /// <value>Eta for ancestral samplers</value>
        [DataMember(Name = "eta_ancestral", EmitDefaultValue = false)]
        public decimal EtaAncestral { get; set; }

        /// <summary>
        /// img2img DDIM discretize
        /// </summary>
        /// <value>img2img DDIM discretize</value>
        [DataMember(Name = "ddim_discretize", EmitDefaultValue = false)]
        public string DdimDiscretize { get; set; }

        /// <summary>
        /// sigma churn
        /// </summary>
        /// <value>sigma churn</value>
        [DataMember(Name = "s_churn", EmitDefaultValue = true)]
        public Object SChurn { get; set; }

        /// <summary>
        /// sigma tmin
        /// </summary>
        /// <value>sigma tmin</value>
        [DataMember(Name = "s_tmin", EmitDefaultValue = true)]
        public Object STmin { get; set; }

        /// <summary>
        /// sigma noise
        /// </summary>
        /// <value>sigma noise</value>
        [DataMember(Name = "s_noise", EmitDefaultValue = false)]
        public decimal SNoise { get; set; }

        /// <summary>
        /// scheduler type
        /// </summary>
        /// <value>scheduler type</value>
        [DataMember(Name = "k_sched_type", EmitDefaultValue = false)]
        public string KSchedType { get; set; }

        /// <summary>
        /// sigma min
        /// </summary>
        /// <value>sigma min</value>
        [DataMember(Name = "sigma_min", EmitDefaultValue = true)]
        public Object SigmaMin { get; set; }

        /// <summary>
        /// sigma max
        /// </summary>
        /// <value>sigma max</value>
        [DataMember(Name = "sigma_max", EmitDefaultValue = true)]
        public Object SigmaMax { get; set; }

        /// <summary>
        /// rho
        /// </summary>
        /// <value>rho</value>
        [DataMember(Name = "rho", EmitDefaultValue = true)]
        public Object Rho { get; set; }

        /// <summary>
        /// Eta noise seed delta
        /// </summary>
        /// <value>Eta noise seed delta</value>
        [DataMember(Name = "eta_noise_seed_delta", EmitDefaultValue = true)]
        public Object EtaNoiseSeedDelta { get; set; }

        /// <summary>
        /// Always discard next-to-last sigma
        /// </summary>
        /// <value>Always discard next-to-last sigma</value>
        [DataMember(Name = "always_discard_next_to_last_sigma", EmitDefaultValue = true)]
        public Object AlwaysDiscardNextToLastSigma { get; set; }

        /// <summary>
        /// UniPC variant
        /// </summary>
        /// <value>UniPC variant</value>
        [DataMember(Name = "uni_pc_variant", EmitDefaultValue = false)]
        public string UniPcVariant { get; set; }

        /// <summary>
        /// UniPC skip type
        /// </summary>
        /// <value>UniPC skip type</value>
        [DataMember(Name = "uni_pc_skip_type", EmitDefaultValue = false)]
        public string UniPcSkipType { get; set; }

        /// <summary>
        /// UniPC order
        /// </summary>
        /// <value>UniPC order</value>
        [DataMember(Name = "uni_pc_order", EmitDefaultValue = false)]
        public decimal UniPcOrder { get; set; }

        /// <summary>
        /// UniPC lower order final
        /// </summary>
        /// <value>UniPC lower order final</value>
        [DataMember(Name = "uni_pc_lower_order_final", EmitDefaultValue = true)]
        public bool UniPcLowerOrderFinal { get; set; }

        /// <summary>
        /// Enable postprocessing operations in txt2img and img2img tabs
        /// </summary>
        /// <value>Enable postprocessing operations in txt2img and img2img tabs</value>
        [DataMember(Name = "postprocessing_enable_in_main_ui", EmitDefaultValue = true)]
        public Object PostprocessingEnableInMainUi { get; set; }

        /// <summary>
        /// Postprocessing operation order
        /// </summary>
        /// <value>Postprocessing operation order</value>
        [DataMember(Name = "postprocessing_operation_order", EmitDefaultValue = true)]
        public Object PostprocessingOperationOrder { get; set; }

        /// <summary>
        /// Maximum number of images in upscaling cache
        /// </summary>
        /// <value>Maximum number of images in upscaling cache</value>
        [DataMember(Name = "upscaling_max_images_in_cache", EmitDefaultValue = false)]
        public decimal UpscalingMaxImagesInCache { get; set; }

        /// <summary>
        /// Disable these extensions
        /// </summary>
        /// <value>Disable these extensions</value>
        [DataMember(Name = "disabled_extensions", EmitDefaultValue = true)]
        public Object DisabledExtensions { get; set; }

        /// <summary>
        /// Disable all extensions (preserves the list of disabled extensions)
        /// </summary>
        /// <value>Disable all extensions (preserves the list of disabled extensions)</value>
        [DataMember(Name = "disable_all_extensions", EmitDefaultValue = false)]
        public string DisableAllExtensions { get; set; }

        /// <summary>
        /// Config state file to restore from, under &#39;config-states/&#39; folder
        /// </summary>
        /// <value>Config state file to restore from, under &#39;config-states/&#39; folder</value>
        [DataMember(Name = "restore_config_state_file", EmitDefaultValue = true)]
        public Object RestoreConfigStateFile { get; set; }

        /// <summary>
        /// SHA256 hash of the current checkpoint
        /// </summary>
        /// <value>SHA256 hash of the current checkpoint</value>
        [DataMember(Name = "sd_checkpoint_hash", EmitDefaultValue = true)]
        public Object SdCheckpointHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Options {\n");
            sb.Append("  SamplesSave: ").Append(SamplesSave).Append("\n");
            sb.Append("  SamplesFormat: ").Append(SamplesFormat).Append("\n");
            sb.Append("  SamplesFilenamePattern: ").Append(SamplesFilenamePattern).Append("\n");
            sb.Append("  SaveImagesAddNumber: ").Append(SaveImagesAddNumber).Append("\n");
            sb.Append("  GridSave: ").Append(GridSave).Append("\n");
            sb.Append("  GridFormat: ").Append(GridFormat).Append("\n");
            sb.Append("  GridExtendedFilename: ").Append(GridExtendedFilename).Append("\n");
            sb.Append("  GridOnlyIfMultiple: ").Append(GridOnlyIfMultiple).Append("\n");
            sb.Append("  GridPreventEmptySpots: ").Append(GridPreventEmptySpots).Append("\n");
            sb.Append("  GridZipFilenamePattern: ").Append(GridZipFilenamePattern).Append("\n");
            sb.Append("  NRows: ").Append(NRows).Append("\n");
            sb.Append("  Font: ").Append(Font).Append("\n");
            sb.Append("  GridTextActiveColor: ").Append(GridTextActiveColor).Append("\n");
            sb.Append("  GridTextInactiveColor: ").Append(GridTextInactiveColor).Append("\n");
            sb.Append("  GridBackgroundColor: ").Append(GridBackgroundColor).Append("\n");
            sb.Append("  EnablePnginfo: ").Append(EnablePnginfo).Append("\n");
            sb.Append("  SaveTxt: ").Append(SaveTxt).Append("\n");
            sb.Append("  SaveImagesBeforeFaceRestoration: ").Append(SaveImagesBeforeFaceRestoration).Append("\n");
            sb.Append("  SaveImagesBeforeHighresFix: ").Append(SaveImagesBeforeHighresFix).Append("\n");
            sb.Append("  SaveImagesBeforeColorCorrection: ").Append(SaveImagesBeforeColorCorrection).Append("\n");
            sb.Append("  SaveMask: ").Append(SaveMask).Append("\n");
            sb.Append("  SaveMaskComposite: ").Append(SaveMaskComposite).Append("\n");
            sb.Append("  JpegQuality: ").Append(JpegQuality).Append("\n");
            sb.Append("  WebpLossless: ").Append(WebpLossless).Append("\n");
            sb.Append("  ExportFor4chan: ").Append(ExportFor4chan).Append("\n");
            sb.Append("  ImgDownscaleThreshold: ").Append(ImgDownscaleThreshold).Append("\n");
            sb.Append("  TargetSideLength: ").Append(TargetSideLength).Append("\n");
            sb.Append("  ImgMaxSizeMp: ").Append(ImgMaxSizeMp).Append("\n");
            sb.Append("  UseOriginalNameBatch: ").Append(UseOriginalNameBatch).Append("\n");
            sb.Append("  UseUpscalerNameAsSuffix: ").Append(UseUpscalerNameAsSuffix).Append("\n");
            sb.Append("  SaveSelectedOnly: ").Append(SaveSelectedOnly).Append("\n");
            sb.Append("  SaveInitImg: ").Append(SaveInitImg).Append("\n");
            sb.Append("  TempDir: ").Append(TempDir).Append("\n");
            sb.Append("  CleanTempDirAtStart: ").Append(CleanTempDirAtStart).Append("\n");
            sb.Append("  OutdirSamples: ").Append(OutdirSamples).Append("\n");
            sb.Append("  OutdirTxt2imgSamples: ").Append(OutdirTxt2imgSamples).Append("\n");
            sb.Append("  OutdirImg2imgSamples: ").Append(OutdirImg2imgSamples).Append("\n");
            sb.Append("  OutdirExtrasSamples: ").Append(OutdirExtrasSamples).Append("\n");
            sb.Append("  OutdirGrids: ").Append(OutdirGrids).Append("\n");
            sb.Append("  OutdirTxt2imgGrids: ").Append(OutdirTxt2imgGrids).Append("\n");
            sb.Append("  OutdirImg2imgGrids: ").Append(OutdirImg2imgGrids).Append("\n");
            sb.Append("  OutdirSave: ").Append(OutdirSave).Append("\n");
            sb.Append("  OutdirInitImages: ").Append(OutdirInitImages).Append("\n");
            sb.Append("  SaveToDirs: ").Append(SaveToDirs).Append("\n");
            sb.Append("  GridSaveToDirs: ").Append(GridSaveToDirs).Append("\n");
            sb.Append("  UseSaveToDirsForUi: ").Append(UseSaveToDirsForUi).Append("\n");
            sb.Append("  DirectoriesFilenamePattern: ").Append(DirectoriesFilenamePattern).Append("\n");
            sb.Append("  DirectoriesMaxPromptWords: ").Append(DirectoriesMaxPromptWords).Append("\n");
            sb.Append("  ESRGANTile: ").Append(ESRGANTile).Append("\n");
            sb.Append("  ESRGANTileOverlap: ").Append(ESRGANTileOverlap).Append("\n");
            sb.Append("  RealesrganEnabledModels: ").Append(RealesrganEnabledModels).Append("\n");
            sb.Append("  UpscalerForImg2img: ").Append(UpscalerForImg2img).Append("\n");
            sb.Append("  FaceRestorationModel: ").Append(FaceRestorationModel).Append("\n");
            sb.Append("  CodeFormerWeight: ").Append(CodeFormerWeight).Append("\n");
            sb.Append("  FaceRestorationUnload: ").Append(FaceRestorationUnload).Append("\n");
            sb.Append("  ShowWarnings: ").Append(ShowWarnings).Append("\n");
            sb.Append("  MemmonPollRate: ").Append(MemmonPollRate).Append("\n");
            sb.Append("  SamplesLogStdout: ").Append(SamplesLogStdout).Append("\n");
            sb.Append("  MultipleTqdm: ").Append(MultipleTqdm).Append("\n");
            sb.Append("  PrintHypernetExtra: ").Append(PrintHypernetExtra).Append("\n");
            sb.Append("  ListHiddenFiles: ").Append(ListHiddenFiles).Append("\n");
            sb.Append("  DisableMmapLoadSafetensors: ").Append(DisableMmapLoadSafetensors).Append("\n");
            sb.Append("  UnloadModelsWhenTraining: ").Append(UnloadModelsWhenTraining).Append("\n");
            sb.Append("  PinMemory: ").Append(PinMemory).Append("\n");
            sb.Append("  SaveOptimizerState: ").Append(SaveOptimizerState).Append("\n");
            sb.Append("  SaveTrainingSettingsToTxt: ").Append(SaveTrainingSettingsToTxt).Append("\n");
            sb.Append("  DatasetFilenameWordRegex: ").Append(DatasetFilenameWordRegex).Append("\n");
            sb.Append("  DatasetFilenameJoinString: ").Append(DatasetFilenameJoinString).Append("\n");
            sb.Append("  TrainingImageRepeatsPerEpoch: ").Append(TrainingImageRepeatsPerEpoch).Append("\n");
            sb.Append("  TrainingWriteCsvEvery: ").Append(TrainingWriteCsvEvery).Append("\n");
            sb.Append("  TrainingXattentionOptimizations: ").Append(TrainingXattentionOptimizations).Append("\n");
            sb.Append("  TrainingEnableTensorboard: ").Append(TrainingEnableTensorboard).Append("\n");
            sb.Append("  TrainingTensorboardSaveImages: ").Append(TrainingTensorboardSaveImages).Append("\n");
            sb.Append("  TrainingTensorboardFlushEvery: ").Append(TrainingTensorboardFlushEvery).Append("\n");
            sb.Append("  SdModelCheckpoint: ").Append(SdModelCheckpoint).Append("\n");
            sb.Append("  SdCheckpointCache: ").Append(SdCheckpointCache).Append("\n");
            sb.Append("  SdVaeCheckpointCache: ").Append(SdVaeCheckpointCache).Append("\n");
            sb.Append("  SdVae: ").Append(SdVae).Append("\n");
            sb.Append("  SdVaeAsDefault: ").Append(SdVaeAsDefault).Append("\n");
            sb.Append("  SdUnet: ").Append(SdUnet).Append("\n");
            sb.Append("  InpaintingMaskWeight: ").Append(InpaintingMaskWeight).Append("\n");
            sb.Append("  InitialNoiseMultiplier: ").Append(InitialNoiseMultiplier).Append("\n");
            sb.Append("  Img2imgColorCorrection: ").Append(Img2imgColorCorrection).Append("\n");
            sb.Append("  Img2imgFixSteps: ").Append(Img2imgFixSteps).Append("\n");
            sb.Append("  Img2imgBackgroundColor: ").Append(Img2imgBackgroundColor).Append("\n");
            sb.Append("  EnableQuantization: ").Append(EnableQuantization).Append("\n");
            sb.Append("  EnableEmphasis: ").Append(EnableEmphasis).Append("\n");
            sb.Append("  EnableBatchSeeds: ").Append(EnableBatchSeeds).Append("\n");
            sb.Append("  CommaPaddingBacktrack: ").Append(CommaPaddingBacktrack).Append("\n");
            sb.Append("  CLIPStopAtLastLayers: ").Append(CLIPStopAtLastLayers).Append("\n");
            sb.Append("  UpcastAttn: ").Append(UpcastAttn).Append("\n");
            sb.Append("  AutoVaePrecision: ").Append(AutoVaePrecision).Append("\n");
            sb.Append("  RandnSource: ").Append(RandnSource).Append("\n");
            sb.Append("  SdxlCropTop: ").Append(SdxlCropTop).Append("\n");
            sb.Append("  SdxlCropLeft: ").Append(SdxlCropLeft).Append("\n");
            sb.Append("  SdxlRefinerLowAestheticScore: ").Append(SdxlRefinerLowAestheticScore).Append("\n");
            sb.Append("  SdxlRefinerHighAestheticScore: ").Append(SdxlRefinerHighAestheticScore).Append("\n");
            sb.Append("  CrossAttentionOptimization: ").Append(CrossAttentionOptimization).Append("\n");
            sb.Append("  SMinUncond: ").Append(SMinUncond).Append("\n");
            sb.Append("  TokenMergingRatio: ").Append(TokenMergingRatio).Append("\n");
            sb.Append("  TokenMergingRatioImg2img: ").Append(TokenMergingRatioImg2img).Append("\n");
            sb.Append("  TokenMergingRatioHr: ").Append(TokenMergingRatioHr).Append("\n");
            sb.Append("  PadCondUncond: ").Append(PadCondUncond).Append("\n");
            sb.Append("  ExperimentalPersistentCondCache: ").Append(ExperimentalPersistentCondCache).Append("\n");
            sb.Append("  UseOldEmphasisImplementation: ").Append(UseOldEmphasisImplementation).Append("\n");
            sb.Append("  UseOldKarrasSchedulerSigmas: ").Append(UseOldKarrasSchedulerSigmas).Append("\n");
            sb.Append("  NoDpmppSdeBatchDeterminism: ").Append(NoDpmppSdeBatchDeterminism).Append("\n");
            sb.Append("  UseOldHiresFixWidthHeight: ").Append(UseOldHiresFixWidthHeight).Append("\n");
            sb.Append("  DontFixSecondOrderSamplersSchedule: ").Append(DontFixSecondOrderSamplersSchedule).Append("\n");
            sb.Append("  HiresFixUseFirstpassConds: ").Append(HiresFixUseFirstpassConds).Append("\n");
            sb.Append("  InterrogateKeepModelsInMemory: ").Append(InterrogateKeepModelsInMemory).Append("\n");
            sb.Append("  InterrogateReturnRanks: ").Append(InterrogateReturnRanks).Append("\n");
            sb.Append("  InterrogateClipNumBeams: ").Append(InterrogateClipNumBeams).Append("\n");
            sb.Append("  InterrogateClipMinLength: ").Append(InterrogateClipMinLength).Append("\n");
            sb.Append("  InterrogateClipMaxLength: ").Append(InterrogateClipMaxLength).Append("\n");
            sb.Append("  InterrogateClipDictLimit: ").Append(InterrogateClipDictLimit).Append("\n");
            sb.Append("  InterrogateClipSkipCategories: ").Append(InterrogateClipSkipCategories).Append("\n");
            sb.Append("  InterrogateDeepbooruScoreThreshold: ").Append(InterrogateDeepbooruScoreThreshold).Append("\n");
            sb.Append("  DeepbooruSortAlpha: ").Append(DeepbooruSortAlpha).Append("\n");
            sb.Append("  DeepbooruUseSpaces: ").Append(DeepbooruUseSpaces).Append("\n");
            sb.Append("  DeepbooruEscape: ").Append(DeepbooruEscape).Append("\n");
            sb.Append("  DeepbooruFilterTags: ").Append(DeepbooruFilterTags).Append("\n");
            sb.Append("  ExtraNetworksShowHiddenDirectories: ").Append(ExtraNetworksShowHiddenDirectories).Append("\n");
            sb.Append("  ExtraNetworksHiddenModels: ").Append(ExtraNetworksHiddenModels).Append("\n");
            sb.Append("  ExtraNetworksDefaultMultiplier: ").Append(ExtraNetworksDefaultMultiplier).Append("\n");
            sb.Append("  ExtraNetworksCardWidth: ").Append(ExtraNetworksCardWidth).Append("\n");
            sb.Append("  ExtraNetworksCardHeight: ").Append(ExtraNetworksCardHeight).Append("\n");
            sb.Append("  ExtraNetworksCardTextScale: ").Append(ExtraNetworksCardTextScale).Append("\n");
            sb.Append("  ExtraNetworksCardShowDesc: ").Append(ExtraNetworksCardShowDesc).Append("\n");
            sb.Append("  ExtraNetworksAddTextSeparator: ").Append(ExtraNetworksAddTextSeparator).Append("\n");
            sb.Append("  UiExtraNetworksTabReorder: ").Append(UiExtraNetworksTabReorder).Append("\n");
            sb.Append("  TextualInversionPrintAtLoad: ").Append(TextualInversionPrintAtLoad).Append("\n");
            sb.Append("  TextualInversionAddHashesToInfotext: ").Append(TextualInversionAddHashesToInfotext).Append("\n");
            sb.Append("  SdHypernetwork: ").Append(SdHypernetwork).Append("\n");
            sb.Append("  Localization: ").Append(Localization).Append("\n");
            sb.Append("  GradioTheme: ").Append(GradioTheme).Append("\n");
            sb.Append("  Img2imgEditorHeight: ").Append(Img2imgEditorHeight).Append("\n");
            sb.Append("  ReturnGrid: ").Append(ReturnGrid).Append("\n");
            sb.Append("  ReturnMask: ").Append(ReturnMask).Append("\n");
            sb.Append("  ReturnMaskComposite: ").Append(ReturnMaskComposite).Append("\n");
            sb.Append("  DoNotShowImages: ").Append(DoNotShowImages).Append("\n");
            sb.Append("  SendSeed: ").Append(SendSeed).Append("\n");
            sb.Append("  SendSize: ").Append(SendSize).Append("\n");
            sb.Append("  JsModalLightbox: ").Append(JsModalLightbox).Append("\n");
            sb.Append("  JsModalLightboxInitiallyZoomed: ").Append(JsModalLightboxInitiallyZoomed).Append("\n");
            sb.Append("  JsModalLightboxGamepad: ").Append(JsModalLightboxGamepad).Append("\n");
            sb.Append("  JsModalLightboxGamepadRepeat: ").Append(JsModalLightboxGamepadRepeat).Append("\n");
            sb.Append("  ShowProgressInTitle: ").Append(ShowProgressInTitle).Append("\n");
            sb.Append("  SamplersInDropdown: ").Append(SamplersInDropdown).Append("\n");
            sb.Append("  DimensionsAndBatchTogether: ").Append(DimensionsAndBatchTogether).Append("\n");
            sb.Append("  KeyeditPrecisionAttention: ").Append(KeyeditPrecisionAttention).Append("\n");
            sb.Append("  KeyeditPrecisionExtra: ").Append(KeyeditPrecisionExtra).Append("\n");
            sb.Append("  KeyeditDelimiters: ").Append(KeyeditDelimiters).Append("\n");
            sb.Append("  KeyeditMove: ").Append(KeyeditMove).Append("\n");
            sb.Append("  QuicksettingsList: ").Append(QuicksettingsList).Append("\n");
            sb.Append("  UiTabOrder: ").Append(UiTabOrder).Append("\n");
            sb.Append("  HiddenTabs: ").Append(HiddenTabs).Append("\n");
            sb.Append("  UiReorderList: ").Append(UiReorderList).Append("\n");
            sb.Append("  HiresFixShowSampler: ").Append(HiresFixShowSampler).Append("\n");
            sb.Append("  HiresFixShowPrompts: ").Append(HiresFixShowPrompts).Append("\n");
            sb.Append("  DisableTokenCounters: ").Append(DisableTokenCounters).Append("\n");
            sb.Append("  AddModelHashToInfo: ").Append(AddModelHashToInfo).Append("\n");
            sb.Append("  AddModelNameToInfo: ").Append(AddModelNameToInfo).Append("\n");
            sb.Append("  AddUserNameToInfo: ").Append(AddUserNameToInfo).Append("\n");
            sb.Append("  AddVersionToInfotext: ").Append(AddVersionToInfotext).Append("\n");
            sb.Append("  DisableWeightsAutoSwap: ").Append(DisableWeightsAutoSwap).Append("\n");
            sb.Append("  InfotextStyles: ").Append(InfotextStyles).Append("\n");
            sb.Append("  ShowProgressbar: ").Append(ShowProgressbar).Append("\n");
            sb.Append("  LivePreviewsEnable: ").Append(LivePreviewsEnable).Append("\n");
            sb.Append("  LivePreviewsImageFormat: ").Append(LivePreviewsImageFormat).Append("\n");
            sb.Append("  ShowProgressGrid: ").Append(ShowProgressGrid).Append("\n");
            sb.Append("  ShowProgressEveryNSteps: ").Append(ShowProgressEveryNSteps).Append("\n");
            sb.Append("  ShowProgressType: ").Append(ShowProgressType).Append("\n");
            sb.Append("  LivePreviewContent: ").Append(LivePreviewContent).Append("\n");
            sb.Append("  LivePreviewRefreshPeriod: ").Append(LivePreviewRefreshPeriod).Append("\n");
            sb.Append("  HideSamplers: ").Append(HideSamplers).Append("\n");
            sb.Append("  EtaDdim: ").Append(EtaDdim).Append("\n");
            sb.Append("  EtaAncestral: ").Append(EtaAncestral).Append("\n");
            sb.Append("  DdimDiscretize: ").Append(DdimDiscretize).Append("\n");
            sb.Append("  SChurn: ").Append(SChurn).Append("\n");
            sb.Append("  STmin: ").Append(STmin).Append("\n");
            sb.Append("  SNoise: ").Append(SNoise).Append("\n");
            sb.Append("  KSchedType: ").Append(KSchedType).Append("\n");
            sb.Append("  SigmaMin: ").Append(SigmaMin).Append("\n");
            sb.Append("  SigmaMax: ").Append(SigmaMax).Append("\n");
            sb.Append("  Rho: ").Append(Rho).Append("\n");
            sb.Append("  EtaNoiseSeedDelta: ").Append(EtaNoiseSeedDelta).Append("\n");
            sb.Append("  AlwaysDiscardNextToLastSigma: ").Append(AlwaysDiscardNextToLastSigma).Append("\n");
            sb.Append("  UniPcVariant: ").Append(UniPcVariant).Append("\n");
            sb.Append("  UniPcSkipType: ").Append(UniPcSkipType).Append("\n");
            sb.Append("  UniPcOrder: ").Append(UniPcOrder).Append("\n");
            sb.Append("  UniPcLowerOrderFinal: ").Append(UniPcLowerOrderFinal).Append("\n");
            sb.Append("  PostprocessingEnableInMainUi: ").Append(PostprocessingEnableInMainUi).Append("\n");
            sb.Append("  PostprocessingOperationOrder: ").Append(PostprocessingOperationOrder).Append("\n");
            sb.Append("  UpscalingMaxImagesInCache: ").Append(UpscalingMaxImagesInCache).Append("\n");
            sb.Append("  DisabledExtensions: ").Append(DisabledExtensions).Append("\n");
            sb.Append("  DisableAllExtensions: ").Append(DisableAllExtensions).Append("\n");
            sb.Append("  RestoreConfigStateFile: ").Append(RestoreConfigStateFile).Append("\n");
            sb.Append("  SdCheckpointHash: ").Append(SdCheckpointHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Options);
        }

        /// <summary>
        /// Returns true if Options instances are equal
        /// </summary>
        /// <param name="input">Instance of Options to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Options input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SamplesSave == input.SamplesSave ||
                    this.SamplesSave.Equals(input.SamplesSave)
                ) && 
                (
                    this.SamplesFormat == input.SamplesFormat ||
                    (this.SamplesFormat != null &&
                    this.SamplesFormat.Equals(input.SamplesFormat))
                ) && 
                (
                    this.SamplesFilenamePattern == input.SamplesFilenamePattern ||
                    (this.SamplesFilenamePattern != null &&
                    this.SamplesFilenamePattern.Equals(input.SamplesFilenamePattern))
                ) && 
                (
                    this.SaveImagesAddNumber == input.SaveImagesAddNumber ||
                    this.SaveImagesAddNumber.Equals(input.SaveImagesAddNumber)
                ) && 
                (
                    this.GridSave == input.GridSave ||
                    this.GridSave.Equals(input.GridSave)
                ) && 
                (
                    this.GridFormat == input.GridFormat ||
                    (this.GridFormat != null &&
                    this.GridFormat.Equals(input.GridFormat))
                ) && 
                (
                    this.GridExtendedFilename == input.GridExtendedFilename ||
                    (this.GridExtendedFilename != null &&
                    this.GridExtendedFilename.Equals(input.GridExtendedFilename))
                ) && 
                (
                    this.GridOnlyIfMultiple == input.GridOnlyIfMultiple ||
                    this.GridOnlyIfMultiple.Equals(input.GridOnlyIfMultiple)
                ) && 
                (
                    this.GridPreventEmptySpots == input.GridPreventEmptySpots ||
                    (this.GridPreventEmptySpots != null &&
                    this.GridPreventEmptySpots.Equals(input.GridPreventEmptySpots))
                ) && 
                (
                    this.GridZipFilenamePattern == input.GridZipFilenamePattern ||
                    (this.GridZipFilenamePattern != null &&
                    this.GridZipFilenamePattern.Equals(input.GridZipFilenamePattern))
                ) && 
                (
                    this.NRows == input.NRows ||
                    this.NRows.Equals(input.NRows)
                ) && 
                (
                    this.Font == input.Font ||
                    (this.Font != null &&
                    this.Font.Equals(input.Font))
                ) && 
                (
                    this.GridTextActiveColor == input.GridTextActiveColor ||
                    (this.GridTextActiveColor != null &&
                    this.GridTextActiveColor.Equals(input.GridTextActiveColor))
                ) && 
                (
                    this.GridTextInactiveColor == input.GridTextInactiveColor ||
                    (this.GridTextInactiveColor != null &&
                    this.GridTextInactiveColor.Equals(input.GridTextInactiveColor))
                ) && 
                (
                    this.GridBackgroundColor == input.GridBackgroundColor ||
                    (this.GridBackgroundColor != null &&
                    this.GridBackgroundColor.Equals(input.GridBackgroundColor))
                ) && 
                (
                    this.EnablePnginfo == input.EnablePnginfo ||
                    this.EnablePnginfo.Equals(input.EnablePnginfo)
                ) && 
                (
                    this.SaveTxt == input.SaveTxt ||
                    (this.SaveTxt != null &&
                    this.SaveTxt.Equals(input.SaveTxt))
                ) && 
                (
                    this.SaveImagesBeforeFaceRestoration == input.SaveImagesBeforeFaceRestoration ||
                    (this.SaveImagesBeforeFaceRestoration != null &&
                    this.SaveImagesBeforeFaceRestoration.Equals(input.SaveImagesBeforeFaceRestoration))
                ) && 
                (
                    this.SaveImagesBeforeHighresFix == input.SaveImagesBeforeHighresFix ||
                    (this.SaveImagesBeforeHighresFix != null &&
                    this.SaveImagesBeforeHighresFix.Equals(input.SaveImagesBeforeHighresFix))
                ) && 
                (
                    this.SaveImagesBeforeColorCorrection == input.SaveImagesBeforeColorCorrection ||
                    (this.SaveImagesBeforeColorCorrection != null &&
                    this.SaveImagesBeforeColorCorrection.Equals(input.SaveImagesBeforeColorCorrection))
                ) && 
                (
                    this.SaveMask == input.SaveMask ||
                    (this.SaveMask != null &&
                    this.SaveMask.Equals(input.SaveMask))
                ) && 
                (
                    this.SaveMaskComposite == input.SaveMaskComposite ||
                    (this.SaveMaskComposite != null &&
                    this.SaveMaskComposite.Equals(input.SaveMaskComposite))
                ) && 
                (
                    this.JpegQuality == input.JpegQuality ||
                    this.JpegQuality.Equals(input.JpegQuality)
                ) && 
                (
                    this.WebpLossless == input.WebpLossless ||
                    (this.WebpLossless != null &&
                    this.WebpLossless.Equals(input.WebpLossless))
                ) && 
                (
                    this.ExportFor4chan == input.ExportFor4chan ||
                    this.ExportFor4chan.Equals(input.ExportFor4chan)
                ) && 
                (
                    this.ImgDownscaleThreshold == input.ImgDownscaleThreshold ||
                    this.ImgDownscaleThreshold.Equals(input.ImgDownscaleThreshold)
                ) && 
                (
                    this.TargetSideLength == input.TargetSideLength ||
                    this.TargetSideLength.Equals(input.TargetSideLength)
                ) && 
                (
                    this.ImgMaxSizeMp == input.ImgMaxSizeMp ||
                    this.ImgMaxSizeMp.Equals(input.ImgMaxSizeMp)
                ) && 
                (
                    this.UseOriginalNameBatch == input.UseOriginalNameBatch ||
                    this.UseOriginalNameBatch.Equals(input.UseOriginalNameBatch)
                ) && 
                (
                    this.UseUpscalerNameAsSuffix == input.UseUpscalerNameAsSuffix ||
                    (this.UseUpscalerNameAsSuffix != null &&
                    this.UseUpscalerNameAsSuffix.Equals(input.UseUpscalerNameAsSuffix))
                ) && 
                (
                    this.SaveSelectedOnly == input.SaveSelectedOnly ||
                    this.SaveSelectedOnly.Equals(input.SaveSelectedOnly)
                ) && 
                (
                    this.SaveInitImg == input.SaveInitImg ||
                    (this.SaveInitImg != null &&
                    this.SaveInitImg.Equals(input.SaveInitImg))
                ) && 
                (
                    this.TempDir == input.TempDir ||
                    (this.TempDir != null &&
                    this.TempDir.Equals(input.TempDir))
                ) && 
                (
                    this.CleanTempDirAtStart == input.CleanTempDirAtStart ||
                    (this.CleanTempDirAtStart != null &&
                    this.CleanTempDirAtStart.Equals(input.CleanTempDirAtStart))
                ) && 
                (
                    this.OutdirSamples == input.OutdirSamples ||
                    (this.OutdirSamples != null &&
                    this.OutdirSamples.Equals(input.OutdirSamples))
                ) && 
                (
                    this.OutdirTxt2imgSamples == input.OutdirTxt2imgSamples ||
                    (this.OutdirTxt2imgSamples != null &&
                    this.OutdirTxt2imgSamples.Equals(input.OutdirTxt2imgSamples))
                ) && 
                (
                    this.OutdirImg2imgSamples == input.OutdirImg2imgSamples ||
                    (this.OutdirImg2imgSamples != null &&
                    this.OutdirImg2imgSamples.Equals(input.OutdirImg2imgSamples))
                ) && 
                (
                    this.OutdirExtrasSamples == input.OutdirExtrasSamples ||
                    (this.OutdirExtrasSamples != null &&
                    this.OutdirExtrasSamples.Equals(input.OutdirExtrasSamples))
                ) && 
                (
                    this.OutdirGrids == input.OutdirGrids ||
                    (this.OutdirGrids != null &&
                    this.OutdirGrids.Equals(input.OutdirGrids))
                ) && 
                (
                    this.OutdirTxt2imgGrids == input.OutdirTxt2imgGrids ||
                    (this.OutdirTxt2imgGrids != null &&
                    this.OutdirTxt2imgGrids.Equals(input.OutdirTxt2imgGrids))
                ) && 
                (
                    this.OutdirImg2imgGrids == input.OutdirImg2imgGrids ||
                    (this.OutdirImg2imgGrids != null &&
                    this.OutdirImg2imgGrids.Equals(input.OutdirImg2imgGrids))
                ) && 
                (
                    this.OutdirSave == input.OutdirSave ||
                    (this.OutdirSave != null &&
                    this.OutdirSave.Equals(input.OutdirSave))
                ) && 
                (
                    this.OutdirInitImages == input.OutdirInitImages ||
                    (this.OutdirInitImages != null &&
                    this.OutdirInitImages.Equals(input.OutdirInitImages))
                ) && 
                (
                    this.SaveToDirs == input.SaveToDirs ||
                    this.SaveToDirs.Equals(input.SaveToDirs)
                ) && 
                (
                    this.GridSaveToDirs == input.GridSaveToDirs ||
                    this.GridSaveToDirs.Equals(input.GridSaveToDirs)
                ) && 
                (
                    this.UseSaveToDirsForUi == input.UseSaveToDirsForUi ||
                    (this.UseSaveToDirsForUi != null &&
                    this.UseSaveToDirsForUi.Equals(input.UseSaveToDirsForUi))
                ) && 
                (
                    this.DirectoriesFilenamePattern == input.DirectoriesFilenamePattern ||
                    (this.DirectoriesFilenamePattern != null &&
                    this.DirectoriesFilenamePattern.Equals(input.DirectoriesFilenamePattern))
                ) && 
                (
                    this.DirectoriesMaxPromptWords == input.DirectoriesMaxPromptWords ||
                    this.DirectoriesMaxPromptWords.Equals(input.DirectoriesMaxPromptWords)
                ) && 
                (
                    this.ESRGANTile == input.ESRGANTile ||
                    this.ESRGANTile.Equals(input.ESRGANTile)
                ) && 
                (
                    this.ESRGANTileOverlap == input.ESRGANTileOverlap ||
                    this.ESRGANTileOverlap.Equals(input.ESRGANTileOverlap)
                ) && 
                (
                    this.RealesrganEnabledModels == input.RealesrganEnabledModels ||
                    this.RealesrganEnabledModels != null &&
                    input.RealesrganEnabledModels != null &&
                    this.RealesrganEnabledModels.SequenceEqual(input.RealesrganEnabledModels)
                ) && 
                (
                    this.UpscalerForImg2img == input.UpscalerForImg2img ||
                    (this.UpscalerForImg2img != null &&
                    this.UpscalerForImg2img.Equals(input.UpscalerForImg2img))
                ) && 
                (
                    this.FaceRestorationModel == input.FaceRestorationModel ||
                    (this.FaceRestorationModel != null &&
                    this.FaceRestorationModel.Equals(input.FaceRestorationModel))
                ) && 
                (
                    this.CodeFormerWeight == input.CodeFormerWeight ||
                    this.CodeFormerWeight.Equals(input.CodeFormerWeight)
                ) && 
                (
                    this.FaceRestorationUnload == input.FaceRestorationUnload ||
                    (this.FaceRestorationUnload != null &&
                    this.FaceRestorationUnload.Equals(input.FaceRestorationUnload))
                ) && 
                (
                    this.ShowWarnings == input.ShowWarnings ||
                    (this.ShowWarnings != null &&
                    this.ShowWarnings.Equals(input.ShowWarnings))
                ) && 
                (
                    this.MemmonPollRate == input.MemmonPollRate ||
                    this.MemmonPollRate.Equals(input.MemmonPollRate)
                ) && 
                (
                    this.SamplesLogStdout == input.SamplesLogStdout ||
                    (this.SamplesLogStdout != null &&
                    this.SamplesLogStdout.Equals(input.SamplesLogStdout))
                ) && 
                (
                    this.MultipleTqdm == input.MultipleTqdm ||
                    this.MultipleTqdm.Equals(input.MultipleTqdm)
                ) && 
                (
                    this.PrintHypernetExtra == input.PrintHypernetExtra ||
                    (this.PrintHypernetExtra != null &&
                    this.PrintHypernetExtra.Equals(input.PrintHypernetExtra))
                ) && 
                (
                    this.ListHiddenFiles == input.ListHiddenFiles ||
                    this.ListHiddenFiles.Equals(input.ListHiddenFiles)
                ) && 
                (
                    this.DisableMmapLoadSafetensors == input.DisableMmapLoadSafetensors ||
                    (this.DisableMmapLoadSafetensors != null &&
                    this.DisableMmapLoadSafetensors.Equals(input.DisableMmapLoadSafetensors))
                ) && 
                (
                    this.UnloadModelsWhenTraining == input.UnloadModelsWhenTraining ||
                    (this.UnloadModelsWhenTraining != null &&
                    this.UnloadModelsWhenTraining.Equals(input.UnloadModelsWhenTraining))
                ) && 
                (
                    this.PinMemory == input.PinMemory ||
                    (this.PinMemory != null &&
                    this.PinMemory.Equals(input.PinMemory))
                ) && 
                (
                    this.SaveOptimizerState == input.SaveOptimizerState ||
                    (this.SaveOptimizerState != null &&
                    this.SaveOptimizerState.Equals(input.SaveOptimizerState))
                ) && 
                (
                    this.SaveTrainingSettingsToTxt == input.SaveTrainingSettingsToTxt ||
                    this.SaveTrainingSettingsToTxt.Equals(input.SaveTrainingSettingsToTxt)
                ) && 
                (
                    this.DatasetFilenameWordRegex == input.DatasetFilenameWordRegex ||
                    (this.DatasetFilenameWordRegex != null &&
                    this.DatasetFilenameWordRegex.Equals(input.DatasetFilenameWordRegex))
                ) && 
                (
                    this.DatasetFilenameJoinString == input.DatasetFilenameJoinString ||
                    (this.DatasetFilenameJoinString != null &&
                    this.DatasetFilenameJoinString.Equals(input.DatasetFilenameJoinString))
                ) && 
                (
                    this.TrainingImageRepeatsPerEpoch == input.TrainingImageRepeatsPerEpoch ||
                    this.TrainingImageRepeatsPerEpoch.Equals(input.TrainingImageRepeatsPerEpoch)
                ) && 
                (
                    this.TrainingWriteCsvEvery == input.TrainingWriteCsvEvery ||
                    this.TrainingWriteCsvEvery.Equals(input.TrainingWriteCsvEvery)
                ) && 
                (
                    this.TrainingXattentionOptimizations == input.TrainingXattentionOptimizations ||
                    (this.TrainingXattentionOptimizations != null &&
                    this.TrainingXattentionOptimizations.Equals(input.TrainingXattentionOptimizations))
                ) && 
                (
                    this.TrainingEnableTensorboard == input.TrainingEnableTensorboard ||
                    (this.TrainingEnableTensorboard != null &&
                    this.TrainingEnableTensorboard.Equals(input.TrainingEnableTensorboard))
                ) && 
                (
                    this.TrainingTensorboardSaveImages == input.TrainingTensorboardSaveImages ||
                    (this.TrainingTensorboardSaveImages != null &&
                    this.TrainingTensorboardSaveImages.Equals(input.TrainingTensorboardSaveImages))
                ) && 
                (
                    this.TrainingTensorboardFlushEvery == input.TrainingTensorboardFlushEvery ||
                    this.TrainingTensorboardFlushEvery.Equals(input.TrainingTensorboardFlushEvery)
                ) && 
                (
                    this.SdModelCheckpoint == input.SdModelCheckpoint ||
                    (this.SdModelCheckpoint != null &&
                    this.SdModelCheckpoint.Equals(input.SdModelCheckpoint))
                ) && 
                (
                    this.SdCheckpointCache == input.SdCheckpointCache ||
                    (this.SdCheckpointCache != null &&
                    this.SdCheckpointCache.Equals(input.SdCheckpointCache))
                ) && 
                (
                    this.SdVaeCheckpointCache == input.SdVaeCheckpointCache ||
                    (this.SdVaeCheckpointCache != null &&
                    this.SdVaeCheckpointCache.Equals(input.SdVaeCheckpointCache))
                ) && 
                (
                    this.SdVae == input.SdVae ||
                    (this.SdVae != null &&
                    this.SdVae.Equals(input.SdVae))
                ) && 
                (
                    this.SdVaeAsDefault == input.SdVaeAsDefault ||
                    this.SdVaeAsDefault.Equals(input.SdVaeAsDefault)
                ) && 
                (
                    this.SdUnet == input.SdUnet ||
                    (this.SdUnet != null &&
                    this.SdUnet.Equals(input.SdUnet))
                ) && 
                (
                    this.InpaintingMaskWeight == input.InpaintingMaskWeight ||
                    this.InpaintingMaskWeight.Equals(input.InpaintingMaskWeight)
                ) && 
                (
                    this.InitialNoiseMultiplier == input.InitialNoiseMultiplier ||
                    this.InitialNoiseMultiplier.Equals(input.InitialNoiseMultiplier)
                ) && 
                (
                    this.Img2imgColorCorrection == input.Img2imgColorCorrection ||
                    (this.Img2imgColorCorrection != null &&
                    this.Img2imgColorCorrection.Equals(input.Img2imgColorCorrection))
                ) && 
                (
                    this.Img2imgFixSteps == input.Img2imgFixSteps ||
                    (this.Img2imgFixSteps != null &&
                    this.Img2imgFixSteps.Equals(input.Img2imgFixSteps))
                ) && 
                (
                    this.Img2imgBackgroundColor == input.Img2imgBackgroundColor ||
                    (this.Img2imgBackgroundColor != null &&
                    this.Img2imgBackgroundColor.Equals(input.Img2imgBackgroundColor))
                ) && 
                (
                    this.EnableQuantization == input.EnableQuantization ||
                    (this.EnableQuantization != null &&
                    this.EnableQuantization.Equals(input.EnableQuantization))
                ) && 
                (
                    this.EnableEmphasis == input.EnableEmphasis ||
                    this.EnableEmphasis.Equals(input.EnableEmphasis)
                ) && 
                (
                    this.EnableBatchSeeds == input.EnableBatchSeeds ||
                    this.EnableBatchSeeds.Equals(input.EnableBatchSeeds)
                ) && 
                (
                    this.CommaPaddingBacktrack == input.CommaPaddingBacktrack ||
                    this.CommaPaddingBacktrack.Equals(input.CommaPaddingBacktrack)
                ) && 
                (
                    this.CLIPStopAtLastLayers == input.CLIPStopAtLastLayers ||
                    this.CLIPStopAtLastLayers.Equals(input.CLIPStopAtLastLayers)
                ) && 
                (
                    this.UpcastAttn == input.UpcastAttn ||
                    (this.UpcastAttn != null &&
                    this.UpcastAttn.Equals(input.UpcastAttn))
                ) && 
                (
                    this.AutoVaePrecision == input.AutoVaePrecision ||
                    this.AutoVaePrecision.Equals(input.AutoVaePrecision)
                ) && 
                (
                    this.RandnSource == input.RandnSource ||
                    (this.RandnSource != null &&
                    this.RandnSource.Equals(input.RandnSource))
                ) && 
                (
                    this.SdxlCropTop == input.SdxlCropTop ||
                    (this.SdxlCropTop != null &&
                    this.SdxlCropTop.Equals(input.SdxlCropTop))
                ) && 
                (
                    this.SdxlCropLeft == input.SdxlCropLeft ||
                    (this.SdxlCropLeft != null &&
                    this.SdxlCropLeft.Equals(input.SdxlCropLeft))
                ) && 
                (
                    this.SdxlRefinerLowAestheticScore == input.SdxlRefinerLowAestheticScore ||
                    this.SdxlRefinerLowAestheticScore.Equals(input.SdxlRefinerLowAestheticScore)
                ) && 
                (
                    this.SdxlRefinerHighAestheticScore == input.SdxlRefinerHighAestheticScore ||
                    this.SdxlRefinerHighAestheticScore.Equals(input.SdxlRefinerHighAestheticScore)
                ) && 
                (
                    this.CrossAttentionOptimization == input.CrossAttentionOptimization ||
                    (this.CrossAttentionOptimization != null &&
                    this.CrossAttentionOptimization.Equals(input.CrossAttentionOptimization))
                ) && 
                (
                    this.SMinUncond == input.SMinUncond ||
                    (this.SMinUncond != null &&
                    this.SMinUncond.Equals(input.SMinUncond))
                ) && 
                (
                    this.TokenMergingRatio == input.TokenMergingRatio ||
                    (this.TokenMergingRatio != null &&
                    this.TokenMergingRatio.Equals(input.TokenMergingRatio))
                ) && 
                (
                    this.TokenMergingRatioImg2img == input.TokenMergingRatioImg2img ||
                    (this.TokenMergingRatioImg2img != null &&
                    this.TokenMergingRatioImg2img.Equals(input.TokenMergingRatioImg2img))
                ) && 
                (
                    this.TokenMergingRatioHr == input.TokenMergingRatioHr ||
                    (this.TokenMergingRatioHr != null &&
                    this.TokenMergingRatioHr.Equals(input.TokenMergingRatioHr))
                ) && 
                (
                    this.PadCondUncond == input.PadCondUncond ||
                    (this.PadCondUncond != null &&
                    this.PadCondUncond.Equals(input.PadCondUncond))
                ) && 
                (
                    this.ExperimentalPersistentCondCache == input.ExperimentalPersistentCondCache ||
                    (this.ExperimentalPersistentCondCache != null &&
                    this.ExperimentalPersistentCondCache.Equals(input.ExperimentalPersistentCondCache))
                ) && 
                (
                    this.UseOldEmphasisImplementation == input.UseOldEmphasisImplementation ||
                    (this.UseOldEmphasisImplementation != null &&
                    this.UseOldEmphasisImplementation.Equals(input.UseOldEmphasisImplementation))
                ) && 
                (
                    this.UseOldKarrasSchedulerSigmas == input.UseOldKarrasSchedulerSigmas ||
                    (this.UseOldKarrasSchedulerSigmas != null &&
                    this.UseOldKarrasSchedulerSigmas.Equals(input.UseOldKarrasSchedulerSigmas))
                ) && 
                (
                    this.NoDpmppSdeBatchDeterminism == input.NoDpmppSdeBatchDeterminism ||
                    (this.NoDpmppSdeBatchDeterminism != null &&
                    this.NoDpmppSdeBatchDeterminism.Equals(input.NoDpmppSdeBatchDeterminism))
                ) && 
                (
                    this.UseOldHiresFixWidthHeight == input.UseOldHiresFixWidthHeight ||
                    (this.UseOldHiresFixWidthHeight != null &&
                    this.UseOldHiresFixWidthHeight.Equals(input.UseOldHiresFixWidthHeight))
                ) && 
                (
                    this.DontFixSecondOrderSamplersSchedule == input.DontFixSecondOrderSamplersSchedule ||
                    (this.DontFixSecondOrderSamplersSchedule != null &&
                    this.DontFixSecondOrderSamplersSchedule.Equals(input.DontFixSecondOrderSamplersSchedule))
                ) && 
                (
                    this.HiresFixUseFirstpassConds == input.HiresFixUseFirstpassConds ||
                    (this.HiresFixUseFirstpassConds != null &&
                    this.HiresFixUseFirstpassConds.Equals(input.HiresFixUseFirstpassConds))
                ) && 
                (
                    this.InterrogateKeepModelsInMemory == input.InterrogateKeepModelsInMemory ||
                    (this.InterrogateKeepModelsInMemory != null &&
                    this.InterrogateKeepModelsInMemory.Equals(input.InterrogateKeepModelsInMemory))
                ) && 
                (
                    this.InterrogateReturnRanks == input.InterrogateReturnRanks ||
                    (this.InterrogateReturnRanks != null &&
                    this.InterrogateReturnRanks.Equals(input.InterrogateReturnRanks))
                ) && 
                (
                    this.InterrogateClipNumBeams == input.InterrogateClipNumBeams ||
                    this.InterrogateClipNumBeams.Equals(input.InterrogateClipNumBeams)
                ) && 
                (
                    this.InterrogateClipMinLength == input.InterrogateClipMinLength ||
                    this.InterrogateClipMinLength.Equals(input.InterrogateClipMinLength)
                ) && 
                (
                    this.InterrogateClipMaxLength == input.InterrogateClipMaxLength ||
                    this.InterrogateClipMaxLength.Equals(input.InterrogateClipMaxLength)
                ) && 
                (
                    this.InterrogateClipDictLimit == input.InterrogateClipDictLimit ||
                    this.InterrogateClipDictLimit.Equals(input.InterrogateClipDictLimit)
                ) && 
                (
                    this.InterrogateClipSkipCategories == input.InterrogateClipSkipCategories ||
                    (this.InterrogateClipSkipCategories != null &&
                    this.InterrogateClipSkipCategories.Equals(input.InterrogateClipSkipCategories))
                ) && 
                (
                    this.InterrogateDeepbooruScoreThreshold == input.InterrogateDeepbooruScoreThreshold ||
                    this.InterrogateDeepbooruScoreThreshold.Equals(input.InterrogateDeepbooruScoreThreshold)
                ) && 
                (
                    this.DeepbooruSortAlpha == input.DeepbooruSortAlpha ||
                    this.DeepbooruSortAlpha.Equals(input.DeepbooruSortAlpha)
                ) && 
                (
                    this.DeepbooruUseSpaces == input.DeepbooruUseSpaces ||
                    this.DeepbooruUseSpaces.Equals(input.DeepbooruUseSpaces)
                ) && 
                (
                    this.DeepbooruEscape == input.DeepbooruEscape ||
                    this.DeepbooruEscape.Equals(input.DeepbooruEscape)
                ) && 
                (
                    this.DeepbooruFilterTags == input.DeepbooruFilterTags ||
                    (this.DeepbooruFilterTags != null &&
                    this.DeepbooruFilterTags.Equals(input.DeepbooruFilterTags))
                ) && 
                (
                    this.ExtraNetworksShowHiddenDirectories == input.ExtraNetworksShowHiddenDirectories ||
                    this.ExtraNetworksShowHiddenDirectories.Equals(input.ExtraNetworksShowHiddenDirectories)
                ) && 
                (
                    this.ExtraNetworksHiddenModels == input.ExtraNetworksHiddenModels ||
                    (this.ExtraNetworksHiddenModels != null &&
                    this.ExtraNetworksHiddenModels.Equals(input.ExtraNetworksHiddenModels))
                ) && 
                (
                    this.ExtraNetworksDefaultMultiplier == input.ExtraNetworksDefaultMultiplier ||
                    this.ExtraNetworksDefaultMultiplier.Equals(input.ExtraNetworksDefaultMultiplier)
                ) && 
                (
                    this.ExtraNetworksCardWidth == input.ExtraNetworksCardWidth ||
                    (this.ExtraNetworksCardWidth != null &&
                    this.ExtraNetworksCardWidth.Equals(input.ExtraNetworksCardWidth))
                ) && 
                (
                    this.ExtraNetworksCardHeight == input.ExtraNetworksCardHeight ||
                    (this.ExtraNetworksCardHeight != null &&
                    this.ExtraNetworksCardHeight.Equals(input.ExtraNetworksCardHeight))
                ) && 
                (
                    this.ExtraNetworksCardTextScale == input.ExtraNetworksCardTextScale ||
                    this.ExtraNetworksCardTextScale.Equals(input.ExtraNetworksCardTextScale)
                ) && 
                (
                    this.ExtraNetworksCardShowDesc == input.ExtraNetworksCardShowDesc ||
                    this.ExtraNetworksCardShowDesc.Equals(input.ExtraNetworksCardShowDesc)
                ) && 
                (
                    this.ExtraNetworksAddTextSeparator == input.ExtraNetworksAddTextSeparator ||
                    (this.ExtraNetworksAddTextSeparator != null &&
                    this.ExtraNetworksAddTextSeparator.Equals(input.ExtraNetworksAddTextSeparator))
                ) && 
                (
                    this.UiExtraNetworksTabReorder == input.UiExtraNetworksTabReorder ||
                    (this.UiExtraNetworksTabReorder != null &&
                    this.UiExtraNetworksTabReorder.Equals(input.UiExtraNetworksTabReorder))
                ) && 
                (
                    this.TextualInversionPrintAtLoad == input.TextualInversionPrintAtLoad ||
                    (this.TextualInversionPrintAtLoad != null &&
                    this.TextualInversionPrintAtLoad.Equals(input.TextualInversionPrintAtLoad))
                ) && 
                (
                    this.TextualInversionAddHashesToInfotext == input.TextualInversionAddHashesToInfotext ||
                    this.TextualInversionAddHashesToInfotext.Equals(input.TextualInversionAddHashesToInfotext)
                ) && 
                (
                    this.SdHypernetwork == input.SdHypernetwork ||
                    (this.SdHypernetwork != null &&
                    this.SdHypernetwork.Equals(input.SdHypernetwork))
                ) && 
                (
                    this.Localization == input.Localization ||
                    (this.Localization != null &&
                    this.Localization.Equals(input.Localization))
                ) && 
                (
                    this.GradioTheme == input.GradioTheme ||
                    (this.GradioTheme != null &&
                    this.GradioTheme.Equals(input.GradioTheme))
                ) && 
                (
                    this.Img2imgEditorHeight == input.Img2imgEditorHeight ||
                    this.Img2imgEditorHeight.Equals(input.Img2imgEditorHeight)
                ) && 
                (
                    this.ReturnGrid == input.ReturnGrid ||
                    this.ReturnGrid.Equals(input.ReturnGrid)
                ) && 
                (
                    this.ReturnMask == input.ReturnMask ||
                    (this.ReturnMask != null &&
                    this.ReturnMask.Equals(input.ReturnMask))
                ) && 
                (
                    this.ReturnMaskComposite == input.ReturnMaskComposite ||
                    (this.ReturnMaskComposite != null &&
                    this.ReturnMaskComposite.Equals(input.ReturnMaskComposite))
                ) && 
                (
                    this.DoNotShowImages == input.DoNotShowImages ||
                    (this.DoNotShowImages != null &&
                    this.DoNotShowImages.Equals(input.DoNotShowImages))
                ) && 
                (
                    this.SendSeed == input.SendSeed ||
                    this.SendSeed.Equals(input.SendSeed)
                ) && 
                (
                    this.SendSize == input.SendSize ||
                    this.SendSize.Equals(input.SendSize)
                ) && 
                (
                    this.JsModalLightbox == input.JsModalLightbox ||
                    this.JsModalLightbox.Equals(input.JsModalLightbox)
                ) && 
                (
                    this.JsModalLightboxInitiallyZoomed == input.JsModalLightboxInitiallyZoomed ||
                    this.JsModalLightboxInitiallyZoomed.Equals(input.JsModalLightboxInitiallyZoomed)
                ) && 
                (
                    this.JsModalLightboxGamepad == input.JsModalLightboxGamepad ||
                    (this.JsModalLightboxGamepad != null &&
                    this.JsModalLightboxGamepad.Equals(input.JsModalLightboxGamepad))
                ) && 
                (
                    this.JsModalLightboxGamepadRepeat == input.JsModalLightboxGamepadRepeat ||
                    this.JsModalLightboxGamepadRepeat.Equals(input.JsModalLightboxGamepadRepeat)
                ) && 
                (
                    this.ShowProgressInTitle == input.ShowProgressInTitle ||
                    this.ShowProgressInTitle.Equals(input.ShowProgressInTitle)
                ) && 
                (
                    this.SamplersInDropdown == input.SamplersInDropdown ||
                    this.SamplersInDropdown.Equals(input.SamplersInDropdown)
                ) && 
                (
                    this.DimensionsAndBatchTogether == input.DimensionsAndBatchTogether ||
                    this.DimensionsAndBatchTogether.Equals(input.DimensionsAndBatchTogether)
                ) && 
                (
                    this.KeyeditPrecisionAttention == input.KeyeditPrecisionAttention ||
                    this.KeyeditPrecisionAttention.Equals(input.KeyeditPrecisionAttention)
                ) && 
                (
                    this.KeyeditPrecisionExtra == input.KeyeditPrecisionExtra ||
                    this.KeyeditPrecisionExtra.Equals(input.KeyeditPrecisionExtra)
                ) && 
                (
                    this.KeyeditDelimiters == input.KeyeditDelimiters ||
                    (this.KeyeditDelimiters != null &&
                    this.KeyeditDelimiters.Equals(input.KeyeditDelimiters))
                ) && 
                (
                    this.KeyeditMove == input.KeyeditMove ||
                    this.KeyeditMove.Equals(input.KeyeditMove)
                ) && 
                (
                    this.QuicksettingsList == input.QuicksettingsList ||
                    this.QuicksettingsList != null &&
                    input.QuicksettingsList != null &&
                    this.QuicksettingsList.SequenceEqual(input.QuicksettingsList)
                ) && 
                (
                    this.UiTabOrder == input.UiTabOrder ||
                    (this.UiTabOrder != null &&
                    this.UiTabOrder.Equals(input.UiTabOrder))
                ) && 
                (
                    this.HiddenTabs == input.HiddenTabs ||
                    (this.HiddenTabs != null &&
                    this.HiddenTabs.Equals(input.HiddenTabs))
                ) && 
                (
                    this.UiReorderList == input.UiReorderList ||
                    (this.UiReorderList != null &&
                    this.UiReorderList.Equals(input.UiReorderList))
                ) && 
                (
                    this.HiresFixShowSampler == input.HiresFixShowSampler ||
                    (this.HiresFixShowSampler != null &&
                    this.HiresFixShowSampler.Equals(input.HiresFixShowSampler))
                ) && 
                (
                    this.HiresFixShowPrompts == input.HiresFixShowPrompts ||
                    (this.HiresFixShowPrompts != null &&
                    this.HiresFixShowPrompts.Equals(input.HiresFixShowPrompts))
                ) && 
                (
                    this.DisableTokenCounters == input.DisableTokenCounters ||
                    (this.DisableTokenCounters != null &&
                    this.DisableTokenCounters.Equals(input.DisableTokenCounters))
                ) && 
                (
                    this.AddModelHashToInfo == input.AddModelHashToInfo ||
                    this.AddModelHashToInfo.Equals(input.AddModelHashToInfo)
                ) && 
                (
                    this.AddModelNameToInfo == input.AddModelNameToInfo ||
                    this.AddModelNameToInfo.Equals(input.AddModelNameToInfo)
                ) && 
                (
                    this.AddUserNameToInfo == input.AddUserNameToInfo ||
                    (this.AddUserNameToInfo != null &&
                    this.AddUserNameToInfo.Equals(input.AddUserNameToInfo))
                ) && 
                (
                    this.AddVersionToInfotext == input.AddVersionToInfotext ||
                    this.AddVersionToInfotext.Equals(input.AddVersionToInfotext)
                ) && 
                (
                    this.DisableWeightsAutoSwap == input.DisableWeightsAutoSwap ||
                    this.DisableWeightsAutoSwap.Equals(input.DisableWeightsAutoSwap)
                ) && 
                (
                    this.InfotextStyles == input.InfotextStyles ||
                    (this.InfotextStyles != null &&
                    this.InfotextStyles.Equals(input.InfotextStyles))
                ) && 
                (
                    this.ShowProgressbar == input.ShowProgressbar ||
                    this.ShowProgressbar.Equals(input.ShowProgressbar)
                ) && 
                (
                    this.LivePreviewsEnable == input.LivePreviewsEnable ||
                    this.LivePreviewsEnable.Equals(input.LivePreviewsEnable)
                ) && 
                (
                    this.LivePreviewsImageFormat == input.LivePreviewsImageFormat ||
                    (this.LivePreviewsImageFormat != null &&
                    this.LivePreviewsImageFormat.Equals(input.LivePreviewsImageFormat))
                ) && 
                (
                    this.ShowProgressGrid == input.ShowProgressGrid ||
                    this.ShowProgressGrid.Equals(input.ShowProgressGrid)
                ) && 
                (
                    this.ShowProgressEveryNSteps == input.ShowProgressEveryNSteps ||
                    this.ShowProgressEveryNSteps.Equals(input.ShowProgressEveryNSteps)
                ) && 
                (
                    this.ShowProgressType == input.ShowProgressType ||
                    (this.ShowProgressType != null &&
                    this.ShowProgressType.Equals(input.ShowProgressType))
                ) && 
                (
                    this.LivePreviewContent == input.LivePreviewContent ||
                    (this.LivePreviewContent != null &&
                    this.LivePreviewContent.Equals(input.LivePreviewContent))
                ) && 
                (
                    this.LivePreviewRefreshPeriod == input.LivePreviewRefreshPeriod ||
                    this.LivePreviewRefreshPeriod.Equals(input.LivePreviewRefreshPeriod)
                ) && 
                (
                    this.HideSamplers == input.HideSamplers ||
                    (this.HideSamplers != null &&
                    this.HideSamplers.Equals(input.HideSamplers))
                ) && 
                (
                    this.EtaDdim == input.EtaDdim ||
                    (this.EtaDdim != null &&
                    this.EtaDdim.Equals(input.EtaDdim))
                ) && 
                (
                    this.EtaAncestral == input.EtaAncestral ||
                    this.EtaAncestral.Equals(input.EtaAncestral)
                ) && 
                (
                    this.DdimDiscretize == input.DdimDiscretize ||
                    (this.DdimDiscretize != null &&
                    this.DdimDiscretize.Equals(input.DdimDiscretize))
                ) && 
                (
                    this.SChurn == input.SChurn ||
                    (this.SChurn != null &&
                    this.SChurn.Equals(input.SChurn))
                ) && 
                (
                    this.STmin == input.STmin ||
                    (this.STmin != null &&
                    this.STmin.Equals(input.STmin))
                ) && 
                (
                    this.SNoise == input.SNoise ||
                    this.SNoise.Equals(input.SNoise)
                ) && 
                (
                    this.KSchedType == input.KSchedType ||
                    (this.KSchedType != null &&
                    this.KSchedType.Equals(input.KSchedType))
                ) && 
                (
                    this.SigmaMin == input.SigmaMin ||
                    (this.SigmaMin != null &&
                    this.SigmaMin.Equals(input.SigmaMin))
                ) && 
                (
                    this.SigmaMax == input.SigmaMax ||
                    (this.SigmaMax != null &&
                    this.SigmaMax.Equals(input.SigmaMax))
                ) && 
                (
                    this.Rho == input.Rho ||
                    (this.Rho != null &&
                    this.Rho.Equals(input.Rho))
                ) && 
                (
                    this.EtaNoiseSeedDelta == input.EtaNoiseSeedDelta ||
                    (this.EtaNoiseSeedDelta != null &&
                    this.EtaNoiseSeedDelta.Equals(input.EtaNoiseSeedDelta))
                ) && 
                (
                    this.AlwaysDiscardNextToLastSigma == input.AlwaysDiscardNextToLastSigma ||
                    (this.AlwaysDiscardNextToLastSigma != null &&
                    this.AlwaysDiscardNextToLastSigma.Equals(input.AlwaysDiscardNextToLastSigma))
                ) && 
                (
                    this.UniPcVariant == input.UniPcVariant ||
                    (this.UniPcVariant != null &&
                    this.UniPcVariant.Equals(input.UniPcVariant))
                ) && 
                (
                    this.UniPcSkipType == input.UniPcSkipType ||
                    (this.UniPcSkipType != null &&
                    this.UniPcSkipType.Equals(input.UniPcSkipType))
                ) && 
                (
                    this.UniPcOrder == input.UniPcOrder ||
                    this.UniPcOrder.Equals(input.UniPcOrder)
                ) && 
                (
                    this.UniPcLowerOrderFinal == input.UniPcLowerOrderFinal ||
                    this.UniPcLowerOrderFinal.Equals(input.UniPcLowerOrderFinal)
                ) && 
                (
                    this.PostprocessingEnableInMainUi == input.PostprocessingEnableInMainUi ||
                    (this.PostprocessingEnableInMainUi != null &&
                    this.PostprocessingEnableInMainUi.Equals(input.PostprocessingEnableInMainUi))
                ) && 
                (
                    this.PostprocessingOperationOrder == input.PostprocessingOperationOrder ||
                    (this.PostprocessingOperationOrder != null &&
                    this.PostprocessingOperationOrder.Equals(input.PostprocessingOperationOrder))
                ) && 
                (
                    this.UpscalingMaxImagesInCache == input.UpscalingMaxImagesInCache ||
                    this.UpscalingMaxImagesInCache.Equals(input.UpscalingMaxImagesInCache)
                ) && 
                (
                    this.DisabledExtensions == input.DisabledExtensions ||
                    (this.DisabledExtensions != null &&
                    this.DisabledExtensions.Equals(input.DisabledExtensions))
                ) && 
                (
                    this.DisableAllExtensions == input.DisableAllExtensions ||
                    (this.DisableAllExtensions != null &&
                    this.DisableAllExtensions.Equals(input.DisableAllExtensions))
                ) && 
                (
                    this.RestoreConfigStateFile == input.RestoreConfigStateFile ||
                    (this.RestoreConfigStateFile != null &&
                    this.RestoreConfigStateFile.Equals(input.RestoreConfigStateFile))
                ) && 
                (
                    this.SdCheckpointHash == input.SdCheckpointHash ||
                    (this.SdCheckpointHash != null &&
                    this.SdCheckpointHash.Equals(input.SdCheckpointHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SamplesSave.GetHashCode();
                if (this.SamplesFormat != null)
                {
                    hashCode = (hashCode * 59) + this.SamplesFormat.GetHashCode();
                }
                if (this.SamplesFilenamePattern != null)
                {
                    hashCode = (hashCode * 59) + this.SamplesFilenamePattern.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SaveImagesAddNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.GridSave.GetHashCode();
                if (this.GridFormat != null)
                {
                    hashCode = (hashCode * 59) + this.GridFormat.GetHashCode();
                }
                if (this.GridExtendedFilename != null)
                {
                    hashCode = (hashCode * 59) + this.GridExtendedFilename.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GridOnlyIfMultiple.GetHashCode();
                if (this.GridPreventEmptySpots != null)
                {
                    hashCode = (hashCode * 59) + this.GridPreventEmptySpots.GetHashCode();
                }
                if (this.GridZipFilenamePattern != null)
                {
                    hashCode = (hashCode * 59) + this.GridZipFilenamePattern.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NRows.GetHashCode();
                if (this.Font != null)
                {
                    hashCode = (hashCode * 59) + this.Font.GetHashCode();
                }
                if (this.GridTextActiveColor != null)
                {
                    hashCode = (hashCode * 59) + this.GridTextActiveColor.GetHashCode();
                }
                if (this.GridTextInactiveColor != null)
                {
                    hashCode = (hashCode * 59) + this.GridTextInactiveColor.GetHashCode();
                }
                if (this.GridBackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.GridBackgroundColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnablePnginfo.GetHashCode();
                if (this.SaveTxt != null)
                {
                    hashCode = (hashCode * 59) + this.SaveTxt.GetHashCode();
                }
                if (this.SaveImagesBeforeFaceRestoration != null)
                {
                    hashCode = (hashCode * 59) + this.SaveImagesBeforeFaceRestoration.GetHashCode();
                }
                if (this.SaveImagesBeforeHighresFix != null)
                {
                    hashCode = (hashCode * 59) + this.SaveImagesBeforeHighresFix.GetHashCode();
                }
                if (this.SaveImagesBeforeColorCorrection != null)
                {
                    hashCode = (hashCode * 59) + this.SaveImagesBeforeColorCorrection.GetHashCode();
                }
                if (this.SaveMask != null)
                {
                    hashCode = (hashCode * 59) + this.SaveMask.GetHashCode();
                }
                if (this.SaveMaskComposite != null)
                {
                    hashCode = (hashCode * 59) + this.SaveMaskComposite.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JpegQuality.GetHashCode();
                if (this.WebpLossless != null)
                {
                    hashCode = (hashCode * 59) + this.WebpLossless.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExportFor4chan.GetHashCode();
                hashCode = (hashCode * 59) + this.ImgDownscaleThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.TargetSideLength.GetHashCode();
                hashCode = (hashCode * 59) + this.ImgMaxSizeMp.GetHashCode();
                hashCode = (hashCode * 59) + this.UseOriginalNameBatch.GetHashCode();
                if (this.UseUpscalerNameAsSuffix != null)
                {
                    hashCode = (hashCode * 59) + this.UseUpscalerNameAsSuffix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SaveSelectedOnly.GetHashCode();
                if (this.SaveInitImg != null)
                {
                    hashCode = (hashCode * 59) + this.SaveInitImg.GetHashCode();
                }
                if (this.TempDir != null)
                {
                    hashCode = (hashCode * 59) + this.TempDir.GetHashCode();
                }
                if (this.CleanTempDirAtStart != null)
                {
                    hashCode = (hashCode * 59) + this.CleanTempDirAtStart.GetHashCode();
                }
                if (this.OutdirSamples != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirSamples.GetHashCode();
                }
                if (this.OutdirTxt2imgSamples != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirTxt2imgSamples.GetHashCode();
                }
                if (this.OutdirImg2imgSamples != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirImg2imgSamples.GetHashCode();
                }
                if (this.OutdirExtrasSamples != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirExtrasSamples.GetHashCode();
                }
                if (this.OutdirGrids != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirGrids.GetHashCode();
                }
                if (this.OutdirTxt2imgGrids != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirTxt2imgGrids.GetHashCode();
                }
                if (this.OutdirImg2imgGrids != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirImg2imgGrids.GetHashCode();
                }
                if (this.OutdirSave != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirSave.GetHashCode();
                }
                if (this.OutdirInitImages != null)
                {
                    hashCode = (hashCode * 59) + this.OutdirInitImages.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SaveToDirs.GetHashCode();
                hashCode = (hashCode * 59) + this.GridSaveToDirs.GetHashCode();
                if (this.UseSaveToDirsForUi != null)
                {
                    hashCode = (hashCode * 59) + this.UseSaveToDirsForUi.GetHashCode();
                }
                if (this.DirectoriesFilenamePattern != null)
                {
                    hashCode = (hashCode * 59) + this.DirectoriesFilenamePattern.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DirectoriesMaxPromptWords.GetHashCode();
                hashCode = (hashCode * 59) + this.ESRGANTile.GetHashCode();
                hashCode = (hashCode * 59) + this.ESRGANTileOverlap.GetHashCode();
                if (this.RealesrganEnabledModels != null)
                {
                    hashCode = (hashCode * 59) + this.RealesrganEnabledModels.GetHashCode();
                }
                if (this.UpscalerForImg2img != null)
                {
                    hashCode = (hashCode * 59) + this.UpscalerForImg2img.GetHashCode();
                }
                if (this.FaceRestorationModel != null)
                {
                    hashCode = (hashCode * 59) + this.FaceRestorationModel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CodeFormerWeight.GetHashCode();
                if (this.FaceRestorationUnload != null)
                {
                    hashCode = (hashCode * 59) + this.FaceRestorationUnload.GetHashCode();
                }
                if (this.ShowWarnings != null)
                {
                    hashCode = (hashCode * 59) + this.ShowWarnings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MemmonPollRate.GetHashCode();
                if (this.SamplesLogStdout != null)
                {
                    hashCode = (hashCode * 59) + this.SamplesLogStdout.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MultipleTqdm.GetHashCode();
                if (this.PrintHypernetExtra != null)
                {
                    hashCode = (hashCode * 59) + this.PrintHypernetExtra.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ListHiddenFiles.GetHashCode();
                if (this.DisableMmapLoadSafetensors != null)
                {
                    hashCode = (hashCode * 59) + this.DisableMmapLoadSafetensors.GetHashCode();
                }
                if (this.UnloadModelsWhenTraining != null)
                {
                    hashCode = (hashCode * 59) + this.UnloadModelsWhenTraining.GetHashCode();
                }
                if (this.PinMemory != null)
                {
                    hashCode = (hashCode * 59) + this.PinMemory.GetHashCode();
                }
                if (this.SaveOptimizerState != null)
                {
                    hashCode = (hashCode * 59) + this.SaveOptimizerState.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SaveTrainingSettingsToTxt.GetHashCode();
                if (this.DatasetFilenameWordRegex != null)
                {
                    hashCode = (hashCode * 59) + this.DatasetFilenameWordRegex.GetHashCode();
                }
                if (this.DatasetFilenameJoinString != null)
                {
                    hashCode = (hashCode * 59) + this.DatasetFilenameJoinString.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TrainingImageRepeatsPerEpoch.GetHashCode();
                hashCode = (hashCode * 59) + this.TrainingWriteCsvEvery.GetHashCode();
                if (this.TrainingXattentionOptimizations != null)
                {
                    hashCode = (hashCode * 59) + this.TrainingXattentionOptimizations.GetHashCode();
                }
                if (this.TrainingEnableTensorboard != null)
                {
                    hashCode = (hashCode * 59) + this.TrainingEnableTensorboard.GetHashCode();
                }
                if (this.TrainingTensorboardSaveImages != null)
                {
                    hashCode = (hashCode * 59) + this.TrainingTensorboardSaveImages.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TrainingTensorboardFlushEvery.GetHashCode();
                if (this.SdModelCheckpoint != null)
                {
                    hashCode = (hashCode * 59) + this.SdModelCheckpoint.GetHashCode();
                }
                if (this.SdCheckpointCache != null)
                {
                    hashCode = (hashCode * 59) + this.SdCheckpointCache.GetHashCode();
                }
                if (this.SdVaeCheckpointCache != null)
                {
                    hashCode = (hashCode * 59) + this.SdVaeCheckpointCache.GetHashCode();
                }
                if (this.SdVae != null)
                {
                    hashCode = (hashCode * 59) + this.SdVae.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SdVaeAsDefault.GetHashCode();
                if (this.SdUnet != null)
                {
                    hashCode = (hashCode * 59) + this.SdUnet.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InpaintingMaskWeight.GetHashCode();
                hashCode = (hashCode * 59) + this.InitialNoiseMultiplier.GetHashCode();
                if (this.Img2imgColorCorrection != null)
                {
                    hashCode = (hashCode * 59) + this.Img2imgColorCorrection.GetHashCode();
                }
                if (this.Img2imgFixSteps != null)
                {
                    hashCode = (hashCode * 59) + this.Img2imgFixSteps.GetHashCode();
                }
                if (this.Img2imgBackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.Img2imgBackgroundColor.GetHashCode();
                }
                if (this.EnableQuantization != null)
                {
                    hashCode = (hashCode * 59) + this.EnableQuantization.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableEmphasis.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableBatchSeeds.GetHashCode();
                hashCode = (hashCode * 59) + this.CommaPaddingBacktrack.GetHashCode();
                hashCode = (hashCode * 59) + this.CLIPStopAtLastLayers.GetHashCode();
                if (this.UpcastAttn != null)
                {
                    hashCode = (hashCode * 59) + this.UpcastAttn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoVaePrecision.GetHashCode();
                if (this.RandnSource != null)
                {
                    hashCode = (hashCode * 59) + this.RandnSource.GetHashCode();
                }
                if (this.SdxlCropTop != null)
                {
                    hashCode = (hashCode * 59) + this.SdxlCropTop.GetHashCode();
                }
                if (this.SdxlCropLeft != null)
                {
                    hashCode = (hashCode * 59) + this.SdxlCropLeft.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SdxlRefinerLowAestheticScore.GetHashCode();
                hashCode = (hashCode * 59) + this.SdxlRefinerHighAestheticScore.GetHashCode();
                if (this.CrossAttentionOptimization != null)
                {
                    hashCode = (hashCode * 59) + this.CrossAttentionOptimization.GetHashCode();
                }
                if (this.SMinUncond != null)
                {
                    hashCode = (hashCode * 59) + this.SMinUncond.GetHashCode();
                }
                if (this.TokenMergingRatio != null)
                {
                    hashCode = (hashCode * 59) + this.TokenMergingRatio.GetHashCode();
                }
                if (this.TokenMergingRatioImg2img != null)
                {
                    hashCode = (hashCode * 59) + this.TokenMergingRatioImg2img.GetHashCode();
                }
                if (this.TokenMergingRatioHr != null)
                {
                    hashCode = (hashCode * 59) + this.TokenMergingRatioHr.GetHashCode();
                }
                if (this.PadCondUncond != null)
                {
                    hashCode = (hashCode * 59) + this.PadCondUncond.GetHashCode();
                }
                if (this.ExperimentalPersistentCondCache != null)
                {
                    hashCode = (hashCode * 59) + this.ExperimentalPersistentCondCache.GetHashCode();
                }
                if (this.UseOldEmphasisImplementation != null)
                {
                    hashCode = (hashCode * 59) + this.UseOldEmphasisImplementation.GetHashCode();
                }
                if (this.UseOldKarrasSchedulerSigmas != null)
                {
                    hashCode = (hashCode * 59) + this.UseOldKarrasSchedulerSigmas.GetHashCode();
                }
                if (this.NoDpmppSdeBatchDeterminism != null)
                {
                    hashCode = (hashCode * 59) + this.NoDpmppSdeBatchDeterminism.GetHashCode();
                }
                if (this.UseOldHiresFixWidthHeight != null)
                {
                    hashCode = (hashCode * 59) + this.UseOldHiresFixWidthHeight.GetHashCode();
                }
                if (this.DontFixSecondOrderSamplersSchedule != null)
                {
                    hashCode = (hashCode * 59) + this.DontFixSecondOrderSamplersSchedule.GetHashCode();
                }
                if (this.HiresFixUseFirstpassConds != null)
                {
                    hashCode = (hashCode * 59) + this.HiresFixUseFirstpassConds.GetHashCode();
                }
                if (this.InterrogateKeepModelsInMemory != null)
                {
                    hashCode = (hashCode * 59) + this.InterrogateKeepModelsInMemory.GetHashCode();
                }
                if (this.InterrogateReturnRanks != null)
                {
                    hashCode = (hashCode * 59) + this.InterrogateReturnRanks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InterrogateClipNumBeams.GetHashCode();
                hashCode = (hashCode * 59) + this.InterrogateClipMinLength.GetHashCode();
                hashCode = (hashCode * 59) + this.InterrogateClipMaxLength.GetHashCode();
                hashCode = (hashCode * 59) + this.InterrogateClipDictLimit.GetHashCode();
                if (this.InterrogateClipSkipCategories != null)
                {
                    hashCode = (hashCode * 59) + this.InterrogateClipSkipCategories.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InterrogateDeepbooruScoreThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.DeepbooruSortAlpha.GetHashCode();
                hashCode = (hashCode * 59) + this.DeepbooruUseSpaces.GetHashCode();
                hashCode = (hashCode * 59) + this.DeepbooruEscape.GetHashCode();
                if (this.DeepbooruFilterTags != null)
                {
                    hashCode = (hashCode * 59) + this.DeepbooruFilterTags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExtraNetworksShowHiddenDirectories.GetHashCode();
                if (this.ExtraNetworksHiddenModels != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraNetworksHiddenModels.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExtraNetworksDefaultMultiplier.GetHashCode();
                if (this.ExtraNetworksCardWidth != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraNetworksCardWidth.GetHashCode();
                }
                if (this.ExtraNetworksCardHeight != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraNetworksCardHeight.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExtraNetworksCardTextScale.GetHashCode();
                hashCode = (hashCode * 59) + this.ExtraNetworksCardShowDesc.GetHashCode();
                if (this.ExtraNetworksAddTextSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraNetworksAddTextSeparator.GetHashCode();
                }
                if (this.UiExtraNetworksTabReorder != null)
                {
                    hashCode = (hashCode * 59) + this.UiExtraNetworksTabReorder.GetHashCode();
                }
                if (this.TextualInversionPrintAtLoad != null)
                {
                    hashCode = (hashCode * 59) + this.TextualInversionPrintAtLoad.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TextualInversionAddHashesToInfotext.GetHashCode();
                if (this.SdHypernetwork != null)
                {
                    hashCode = (hashCode * 59) + this.SdHypernetwork.GetHashCode();
                }
                if (this.Localization != null)
                {
                    hashCode = (hashCode * 59) + this.Localization.GetHashCode();
                }
                if (this.GradioTheme != null)
                {
                    hashCode = (hashCode * 59) + this.GradioTheme.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Img2imgEditorHeight.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnGrid.GetHashCode();
                if (this.ReturnMask != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnMask.GetHashCode();
                }
                if (this.ReturnMaskComposite != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnMaskComposite.GetHashCode();
                }
                if (this.DoNotShowImages != null)
                {
                    hashCode = (hashCode * 59) + this.DoNotShowImages.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SendSeed.GetHashCode();
                hashCode = (hashCode * 59) + this.SendSize.GetHashCode();
                hashCode = (hashCode * 59) + this.JsModalLightbox.GetHashCode();
                hashCode = (hashCode * 59) + this.JsModalLightboxInitiallyZoomed.GetHashCode();
                if (this.JsModalLightboxGamepad != null)
                {
                    hashCode = (hashCode * 59) + this.JsModalLightboxGamepad.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JsModalLightboxGamepadRepeat.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowProgressInTitle.GetHashCode();
                hashCode = (hashCode * 59) + this.SamplersInDropdown.GetHashCode();
                hashCode = (hashCode * 59) + this.DimensionsAndBatchTogether.GetHashCode();
                hashCode = (hashCode * 59) + this.KeyeditPrecisionAttention.GetHashCode();
                hashCode = (hashCode * 59) + this.KeyeditPrecisionExtra.GetHashCode();
                if (this.KeyeditDelimiters != null)
                {
                    hashCode = (hashCode * 59) + this.KeyeditDelimiters.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KeyeditMove.GetHashCode();
                if (this.QuicksettingsList != null)
                {
                    hashCode = (hashCode * 59) + this.QuicksettingsList.GetHashCode();
                }
                if (this.UiTabOrder != null)
                {
                    hashCode = (hashCode * 59) + this.UiTabOrder.GetHashCode();
                }
                if (this.HiddenTabs != null)
                {
                    hashCode = (hashCode * 59) + this.HiddenTabs.GetHashCode();
                }
                if (this.UiReorderList != null)
                {
                    hashCode = (hashCode * 59) + this.UiReorderList.GetHashCode();
                }
                if (this.HiresFixShowSampler != null)
                {
                    hashCode = (hashCode * 59) + this.HiresFixShowSampler.GetHashCode();
                }
                if (this.HiresFixShowPrompts != null)
                {
                    hashCode = (hashCode * 59) + this.HiresFixShowPrompts.GetHashCode();
                }
                if (this.DisableTokenCounters != null)
                {
                    hashCode = (hashCode * 59) + this.DisableTokenCounters.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddModelHashToInfo.GetHashCode();
                hashCode = (hashCode * 59) + this.AddModelNameToInfo.GetHashCode();
                if (this.AddUserNameToInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AddUserNameToInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddVersionToInfotext.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableWeightsAutoSwap.GetHashCode();
                if (this.InfotextStyles != null)
                {
                    hashCode = (hashCode * 59) + this.InfotextStyles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowProgressbar.GetHashCode();
                hashCode = (hashCode * 59) + this.LivePreviewsEnable.GetHashCode();
                if (this.LivePreviewsImageFormat != null)
                {
                    hashCode = (hashCode * 59) + this.LivePreviewsImageFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowProgressGrid.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowProgressEveryNSteps.GetHashCode();
                if (this.ShowProgressType != null)
                {
                    hashCode = (hashCode * 59) + this.ShowProgressType.GetHashCode();
                }
                if (this.LivePreviewContent != null)
                {
                    hashCode = (hashCode * 59) + this.LivePreviewContent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LivePreviewRefreshPeriod.GetHashCode();
                if (this.HideSamplers != null)
                {
                    hashCode = (hashCode * 59) + this.HideSamplers.GetHashCode();
                }
                if (this.EtaDdim != null)
                {
                    hashCode = (hashCode * 59) + this.EtaDdim.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EtaAncestral.GetHashCode();
                if (this.DdimDiscretize != null)
                {
                    hashCode = (hashCode * 59) + this.DdimDiscretize.GetHashCode();
                }
                if (this.SChurn != null)
                {
                    hashCode = (hashCode * 59) + this.SChurn.GetHashCode();
                }
                if (this.STmin != null)
                {
                    hashCode = (hashCode * 59) + this.STmin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SNoise.GetHashCode();
                if (this.KSchedType != null)
                {
                    hashCode = (hashCode * 59) + this.KSchedType.GetHashCode();
                }
                if (this.SigmaMin != null)
                {
                    hashCode = (hashCode * 59) + this.SigmaMin.GetHashCode();
                }
                if (this.SigmaMax != null)
                {
                    hashCode = (hashCode * 59) + this.SigmaMax.GetHashCode();
                }
                if (this.Rho != null)
                {
                    hashCode = (hashCode * 59) + this.Rho.GetHashCode();
                }
                if (this.EtaNoiseSeedDelta != null)
                {
                    hashCode = (hashCode * 59) + this.EtaNoiseSeedDelta.GetHashCode();
                }
                if (this.AlwaysDiscardNextToLastSigma != null)
                {
                    hashCode = (hashCode * 59) + this.AlwaysDiscardNextToLastSigma.GetHashCode();
                }
                if (this.UniPcVariant != null)
                {
                    hashCode = (hashCode * 59) + this.UniPcVariant.GetHashCode();
                }
                if (this.UniPcSkipType != null)
                {
                    hashCode = (hashCode * 59) + this.UniPcSkipType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UniPcOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.UniPcLowerOrderFinal.GetHashCode();
                if (this.PostprocessingEnableInMainUi != null)
                {
                    hashCode = (hashCode * 59) + this.PostprocessingEnableInMainUi.GetHashCode();
                }
                if (this.PostprocessingOperationOrder != null)
                {
                    hashCode = (hashCode * 59) + this.PostprocessingOperationOrder.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpscalingMaxImagesInCache.GetHashCode();
                if (this.DisabledExtensions != null)
                {
                    hashCode = (hashCode * 59) + this.DisabledExtensions.GetHashCode();
                }
                if (this.DisableAllExtensions != null)
                {
                    hashCode = (hashCode * 59) + this.DisableAllExtensions.GetHashCode();
                }
                if (this.RestoreConfigStateFile != null)
                {
                    hashCode = (hashCode * 59) + this.RestoreConfigStateFile.GetHashCode();
                }
                if (this.SdCheckpointHash != null)
                {
                    hashCode = (hashCode * 59) + this.SdCheckpointHash.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
